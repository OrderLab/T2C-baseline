diff --git a/hbase-server/pom.xml b/hbase-server/pom.xml
index 54558f7f77..334edc9244 100644
--- a/hbase-server/pom.xml
+++ b/hbase-server/pom.xml
@@ -240,9 +240,19 @@
       <plugin>
         <artifactId>maven-surefire-plugin</artifactId>
         <configuration>
-          <systemPropertyVariables>
-            <test.build.webapps>target/test-classes/webapps</test.build.webapps>
-          </systemPropertyVariables>
+          <argLine>-Xmx32G</argLine>
+          <parallel>suites</parallel>
+          <useUnlimitedThreads>true</useUnlimitedThreads>
+            <systemPropertyVariables>
+              <daikon.app.target>hbase</daikon.app.target>
+              <test.build.webapps>target/test-classes/webapps</test.build.webapps>
+            </systemPropertyVariables>
+          <properties>
+            <property>
+              <name>listener</name>
+              <value>t2c.TestListener</value>
+            </property>
+          </properties>
         </configuration>
       </plugin>
       <plugin>
@@ -598,6 +608,19 @@
       <artifactId>mockito-core</artifactId>
       <scope>test</scope>
     </dependency>
+      <dependency>
+      <groupId>commons-beanutils</groupId>
+      <artifactId>commons-beanutils</artifactId>
+      <version>1.9.3</version>
+      <scope>compile</scope>
+    </dependency>
+    <dependency>
+      <groupId>daikon</groupId>
+      <artifactId>Semantic-Daikon-Checker</artifactId>
+      <version>1.0</version>
+      <scope>system</scope>
+      <systemPath>/users/dimas/Semantic-Daikon-Checker/target/Semantic-Daikon-checker-1.0-SNAPSHOT-jar-with-dependencies.jar</systemPath>
+    </dependency>
   </dependencies>
   <profiles>
     <!-- Needs to make the profile in apache parent pom -->
@@ -764,6 +787,7 @@
                 <phase>generate-test-resources</phase>
                 <goals>
                   <goal>build-classpath</goal>
+                  <goal>copy-dependencies</goal>
                 </goals>
                 <configuration>
                   <!-- needed to run the unit test for DS to generate
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
index 9d2a743dd2..0c3e10077f 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java
@@ -21,6 +21,9 @@ import static org.apache.hadoop.hbase.HConstants.DEFAULT_HBASE_SPLIT_COORDINATED
 import static org.apache.hadoop.hbase.HConstants.HBASE_MASTER_LOGCLEANER_PLUGINS;
 import static org.apache.hadoop.hbase.HConstants.HBASE_SPLIT_WAL_COORDINATED_BY_ZK;
 
+import daikon.DaikonLogger;
+import daikon.GlobalState;
+import daikon.InvariantChecker;
 import com.google.protobuf.Descriptors;
 import com.google.protobuf.Service;
 import java.io.IOException;
@@ -251,6 +254,7 @@ import org.apache.hadoop.hbase.shaded.protobuf.generated.WALProtos;
 @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.TOOLS)
 @SuppressWarnings("deprecation")
 public class HMaster extends HRegionServer implements MasterServices {
+  public static HMaster HMasterInstance = null;
   private static Logger LOG = LoggerFactory.getLogger(HMaster.class);
 
   /**
@@ -575,6 +579,7 @@ public class HMaster extends HRegionServer implements MasterServices {
       } else {
         this.activeMasterManager = null;
       }
+      HMasterInstance = this;
     } catch (Throwable t) {
       // Make sure we log the exception. HMaster is often started via reflection and the
       // cause of failed startup is lost.
@@ -612,6 +617,8 @@ public class HMaster extends HRegionServer implements MasterServices {
       // Fall in here even if we have been aborted. Need to run the shutdown services and
       // the super run call will do this for us.
       super.run();
+      GlobalState.mode = GlobalState.T2CMode.TEST;
+      GlobalState.triggerEvent();
     } finally {
       if (this.clusterSchemaService != null) {
         // If on way out, then we are no longer active master.
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/RegionStates.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/RegionStates.java
index 1470a5a853..5ad801306b 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/RegionStates.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/RegionStates.java
@@ -55,6 +55,7 @@ import org.apache.hbase.thirdparty.com.google.common.annotations.VisibleForTesti
  */
 @InterfaceAudience.Private
 public class RegionStates {
+  public static RegionStates regionStatesInstance = null;
   private static final Logger LOG = LoggerFactory.getLogger(RegionStates.class);
 
   // This comparator sorts the RegionStates by time stamp then Region name.
@@ -94,7 +95,9 @@ public class RegionStates {
   private final ConcurrentHashMap<ServerName, ServerStateNode> serverMap =
       new ConcurrentHashMap<ServerName, ServerStateNode>();
 
-  public RegionStates() { }
+  public RegionStates() {
+    regionStatesInstance = this;
+  }
 
   public void clear() {
     regionsMap.clear();
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java
index 7c33661d7c..8aa35aac60 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java
@@ -18,6 +18,9 @@
  */
 package org.apache.hadoop.hbase.master.normalizer;
 
+import daikon.DaikonLogger;
+import daikon.GlobalState;
+import daikon.InvariantChecker;
 import java.io.IOException;
 
 import org.apache.hadoop.hbase.client.Admin;
@@ -74,5 +77,7 @@ public class MergeNormalizationPlan implements NormalizationPlan {
     } catch (IOException ex) {
       LOG.error("Error during region merge: ", ex);
     }
+    GlobalState.mode = GlobalState.T2CMode.TEST;
+    GlobalState.triggerEvent();
   }
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java
index a30a13be24..5a72150a2f 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java
@@ -18,6 +18,9 @@
  */
 package org.apache.hadoop.hbase.master.normalizer;
 
+import daikon.DaikonLogger;
+import daikon.GlobalState;
+import daikon.InvariantChecker;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -236,6 +239,8 @@ public class SimpleRegionNormalizer implements RegionNormalizer {
       return null;
     }
     Collections.sort(plans, planComparator);
+    GlobalState.mode = GlobalState.T2CMode.TEST;
+    GlobalState.triggerEvent();
     return plans;
   }
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ModifyTableProcedure.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ModifyTableProcedure.java
index 0567ede069..c17f83e424 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ModifyTableProcedure.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ModifyTableProcedure.java
@@ -18,6 +18,9 @@
 
 package org.apache.hadoop.hbase.master.procedure;
 
+import daikon.DaikonLogger;
+import daikon.GlobalState;
+import daikon.InvariantChecker;
 import java.io.IOException;
 import java.util.HashSet;
 import java.util.List;
@@ -51,6 +54,7 @@ import org.apache.hadoop.hbase.shaded.protobuf.generated.MasterProcedureProtos.M
 @InterfaceAudience.Private
 public class ModifyTableProcedure
     extends AbstractStateMachineTableProcedure<ModifyTableState> {
+  public static ModifyTableProcedure modifyTableProcedureInstance = null;
   private static final Logger LOG = LoggerFactory.getLogger(ModifyTableProcedure.class);
 
   private TableDescriptor unmodifiedTableDescriptor = null;
@@ -60,11 +64,13 @@ public class ModifyTableProcedure
   public ModifyTableProcedure() {
     super();
     initilize();
+    modifyTableProcedureInstance = this;
   }
 
   public ModifyTableProcedure(final MasterProcedureEnv env, final TableDescriptor htd)
   throws HBaseIOException {
     this(env, htd, null);
+    modifyTableProcedureInstance = this;
   }
 
   public ModifyTableProcedure(final MasterProcedureEnv env, final TableDescriptor htd,
@@ -74,11 +80,13 @@ public class ModifyTableProcedure
     initilize();
     this.modifiedTableDescriptor = htd;
     preflightChecks(env, null/*No table checks; if changing peers, table can be online*/);
+    modifyTableProcedureInstance = this;
   }
 
   private void initilize() {
     this.unmodifiedTableDescriptor = null;
     this.deleteColumnFamilyInModify = false;
+    modifyTableProcedureInstance = this;
   }
 
   @Override
@@ -103,8 +111,12 @@ public class ModifyTableProcedure
           updateReplicaColumnsIfNeeded(env, unmodifiedTableDescriptor, modifiedTableDescriptor);
           if (deleteColumnFamilyInModify) {
             setNextState(ModifyTableState.MODIFY_TABLE_DELETE_FS_LAYOUT);
+            GlobalState.mode = GlobalState.T2CMode.TEST;
+            GlobalState.triggerEvent();
           } else {
             setNextState(ModifyTableState.MODIFY_TABLE_POST_OPERATION);
+            GlobalState.mode = GlobalState.T2CMode.TEST;
+            GlobalState.triggerEvent();
           }
           break;
         case MODIFY_TABLE_DELETE_FS_LAYOUT:
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ReopenTableRegionsProcedure.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ReopenTableRegionsProcedure.java
index 06348155f1..ad86118f93 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ReopenTableRegionsProcedure.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ReopenTableRegionsProcedure.java
@@ -17,6 +17,7 @@
  */
 package org.apache.hadoop.hbase.master.procedure;
 
+import daikon.GlobalState;
 import java.io.IOException;
 import java.util.Collections;
 import java.util.List;
@@ -45,6 +46,7 @@ import org.apache.hadoop.hbase.shaded.protobuf.generated.ProcedureProtos;
 public class ReopenTableRegionsProcedure
     extends AbstractStateMachineTableProcedure<ReopenTableRegionsState> {
 
+  public static ReopenTableRegionsProcedure reopenTableRegionsProcedureInstance = null;
   private static final Logger LOG = LoggerFactory.getLogger(ReopenTableRegionsProcedure.class);
 
   private TableName tableName;
@@ -54,10 +56,12 @@ public class ReopenTableRegionsProcedure
   private int attempt;
 
   public ReopenTableRegionsProcedure() {
+    reopenTableRegionsProcedureInstance = this;
   }
 
   public ReopenTableRegionsProcedure(TableName tableName) {
     this.tableName = tableName;
+    reopenTableRegionsProcedureInstance = this;
   }
 
   @Override
@@ -94,6 +98,8 @@ public class ReopenTableRegionsProcedure
         regions =
           env.getAssignmentManager().getRegionStates().getRegionsOfTableForReopen(tableName);
         setNextState(ReopenTableRegionsState.REOPEN_TABLE_REGIONS_REOPEN_REGIONS);
+        GlobalState.mode = GlobalState.T2CMode.TEST;
+        GlobalState.triggerEvent();
         return Flow.HAS_MORE_STATE;
       case REOPEN_TABLE_REGIONS_REOPEN_REGIONS:
         for (HRegionLocation loc : regions) {
@@ -117,16 +123,22 @@ public class ReopenTableRegionsProcedure
           addChildProcedure(proc);
         }
         setNextState(ReopenTableRegionsState.REOPEN_TABLE_REGIONS_CONFIRM_REOPENED);
+        GlobalState.mode = GlobalState.T2CMode.TEST;
+        GlobalState.triggerEvent();
         return Flow.HAS_MORE_STATE;
       case REOPEN_TABLE_REGIONS_CONFIRM_REOPENED:
         regions = regions.stream().map(env.getAssignmentManager().getRegionStates()::checkReopened)
           .filter(l -> l != null).collect(Collectors.toList());
         if (regions.isEmpty()) {
+          GlobalState.mode = GlobalState.T2CMode.TEST;
+          GlobalState.triggerEvent();
           return Flow.NO_MORE_STATE;
         }
         if (regions.stream().anyMatch(loc -> canSchedule(env, loc))) {
           attempt = 0;
           setNextState(ReopenTableRegionsState.REOPEN_TABLE_REGIONS_REOPEN_REGIONS);
+          GlobalState.mode = GlobalState.T2CMode.TEST;
+          GlobalState.triggerEvent();
           return Flow.HAS_MORE_STATE;
         }
         // We can not schedule TRSP for all the regions need to reopen, wait for a while and retry
@@ -139,6 +151,8 @@ public class ReopenTableRegionsProcedure
         setTimeout(Math.toIntExact(backoff));
         setState(ProcedureProtos.ProcedureState.WAITING_TIMEOUT);
         skipPersistence();
+        GlobalState.mode = GlobalState.T2CMode.TEST;
+        GlobalState.triggerEvent();
         throw new ProcedureSuspendedException();
       default:
         throw new UnsupportedOperationException("unhandled state=" + state);
