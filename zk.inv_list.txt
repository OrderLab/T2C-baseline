zksInstance.firstProcessor.failCreate == zksInstance.firstProcessor.skipACL
zksInstance.firstProcessor.failCreate == zksInstance.serverCnxnFactory.login.isKrbTicket
zksInstance.firstProcessor.failCreate == zksInstance.serverCnxnFactory.login.isUsingKeytab
zksInstance.firstProcessor.failCreate == zksInstance.serverCnxnFactory.login.isUsingTicketCache
zksInstance.firstProcessor.failCreate == zksInstance.txnLogFactory.snapLog.close
zksInstance.hzxid == zksInstance.serverStats.count
zksInstance.hzxid == zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.hzxid == zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.hzxid == zksInstance.zkDb.maxCommittedLog
zksInstance.maxSessionTimeout == zksInstance.minSessionTimeout
zksInstance.maxSessionTimeout == zksInstance.txnLogFactory.snapLog.dbId
zksInstance.maxSessionTimeout == daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess == daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.requestsInProcess == daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.requestsInProcess == daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.maxClientCnxns == zksInstance.txnLogFactory.txnLog.dbId
zksInstance.serverCnxnFactory.maxClientCnxns == zksInstance.zkDb.dataTree.scount
zksInstance.serverCnxnFactory.maxClientCnxns == daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.maxClientCnxns == daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.maxClientCnxns == daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.maxClientCnxns == daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE == zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE
zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE == zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE
zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE == zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE
zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE == zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE
daikon.Quant.pairwiseEqual(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.pairwiseEqual(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.expirationInterval == zksInstance.tickTime
zksInstance.sessionTracker.running == zksInstance.txnLogFactory.txnLog.forceSync
zksInstance.sessionTracker.running == zksInstance.zkDb.dataTree.$assertionsDisabled
zksInstance.sessionTracker.running == zksInstance.zkDb.dataTree.initialized
zksInstance.sessionTracker.running == zksInstance.zkDb.initialized
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns)
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns)
zksInstance.firstProcessor.failCreate == false
zksInstance.hzxid == 0 || zksInstance.hzxid == 1 || zksInstance.hzxid == 2
zksInstance.requestsInProcess == 1
zksInstance.serverCnxnFactory.login.MIN_TIME_BEFORE_RELOGIN == 60000
daikon.Quant.fuzzy.eq(zksInstance.serverCnxnFactory.login.TICKET_RENEW_JITTER, 0.05)
daikon.Quant.fuzzy.eq(zksInstance.serverCnxnFactory.login.TICKET_RENEW_WINDOW, 0.8)
zksInstance.serverCnxnFactory.login.lastLogin == 25706799
zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE != null
daikon.Quant.eltsNotEqual(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, null)
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 55
zksInstance.serverStats.minLatency == 26 || zksInstance.serverStats.minLatency == 55 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.packetsReceived == 2 || zksInstance.serverStats.packetsReceived == 5 || zksInstance.serverStats.packetsReceived == 6
zksInstance.serverStats.packetsSent == 1 || zksInstance.serverStats.packetsSent == 4 || zksInstance.serverStats.packetsSent == 5
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 55 || zksInstance.serverStats.totalLatency == 81
zksInstance.sessionTracker.currentTime == 25766825 || zksInstance.sessionTracker.currentTime == 25767000
zksInstance.sessionTracker.expirationInterval == 3000
zksInstance.sessionTracker.nextExpirationTime == 25767000 || zksInstance.sessionTracker.nextExpirationTime == 25770000
zksInstance.sessionTracker.nextSessionId == 72059282692571137L
zksInstance.sessionTracker.running == true
zksInstance.superSecret == 3007405056L
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC == 1514885966
zksInstance.txnLogFactory.txnLog.currentSize == 0 || zksInstance.txnLogFactory.txnLog.currentSize == 102416
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS == 1000
zksInstance.txnLogFactory.txnLog.preAllocSize == 102400
zksInstance.zkDb.commitLogBuffer == 700
zksInstance.zkDb.commitLogCount == 500
zksInstance.zkDb.minCommittedLog == 0 || zksInstance.zkDb.minCommittedLog == 1
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 1 || daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 2
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns) != null
daikon.Quant.subsetOf(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns))
daikon.Quant.subsetOf(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.requestsInProcess == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.maxClientCnxns == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.login.lastLogin == 25710149
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 28
zksInstance.sessionTracker.currentTime == 25770150
zksInstance.sessionTracker.nextExpirationTime == 25773000
zksInstance.sessionTracker.nextSessionId == 72059282910478337L
daikon.Quant.eltsNotEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, null)
zksInstance.serverStats.minLatency + 2147483647 * zksInstance.zkDb.minCommittedLog - -2147483648 == 0
zksInstance.serverStats.packetsReceived - zksInstance.serverStats.packetsSent - 1 == 0
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns))
zksInstance.serverCnxnFactory.login.lastLogin == 25710227
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 24
zksInstance.sessionTracker.currentTime == 25770228
zksInstance.sessionTracker.nextSessionId == 72059282915590145L
12 * zksInstance.hzxid + zksInstance.serverStats.maxLatency - 12 * zksInstance.serverStats.packetsReceived + 24 == 0
12 * zksInstance.hzxid + zksInstance.serverStats.maxLatency - 12 * zksInstance.serverStats.packetsSent + 12 == 0
14 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
51208 * zksInstance.hzxid - 51208 * zksInstance.serverStats.packetsReceived + zksInstance.txnLogFactory.txnLog.currentSize + 102416 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + 2 * zksInstance.zkDb.minCommittedLog + 2 == 0
51208 * zksInstance.hzxid - 51208 * zksInstance.serverStats.packetsSent + zksInstance.txnLogFactory.txnLog.currentSize + 51208 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + 2 * zksInstance.zkDb.minCommittedLog + 1 == 0
zksInstance.zkDb.minCommittedLog == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.login.lastLogin == 25708048
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 58
zksInstance.serverStats.minLatency == 15 || zksInstance.serverStats.minLatency == 58 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.packetsReceived == 2 || zksInstance.serverStats.packetsReceived == 7 || zksInstance.serverStats.packetsReceived == 8
zksInstance.serverStats.packetsSent == 1 || zksInstance.serverStats.packetsSent == 6 || zksInstance.serverStats.packetsSent == 7
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 58 || zksInstance.serverStats.totalLatency == 73
zksInstance.sessionTracker.currentTime == 25768049 || zksInstance.sessionTracker.currentTime == 25770001
zksInstance.sessionTracker.nextExpirationTime == 25770000 || zksInstance.sessionTracker.nextExpirationTime == 25773000
zksInstance.sessionTracker.nextSessionId == 72059282772787201L
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog) != null
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 35
zksInstance.serverStats.minLatency == 9 || zksInstance.serverStats.minLatency == 35 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.packetsReceived == 2 || zksInstance.serverStats.packetsReceived == 3 || zksInstance.serverStats.packetsReceived == 4
zksInstance.serverStats.packetsSent == 1 || zksInstance.serverStats.packetsSent == 2 || zksInstance.serverStats.packetsSent == 3
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 35 || zksInstance.serverStats.totalLatency == 44
zksInstance.sessionTracker.currentTime == 25259306
zksInstance.sessionTracker.nextExpirationTime == 25260000
zksInstance.sessionTracker.nextSessionId == 72059249431805953L
zksInstance.hzxid == zksInstance.zkDb.minCommittedLog
zksInstance.serverStats.maxLatency == zksInstance.serverStats.totalLatency
zksInstance.hzxid == 0 || zksInstance.hzxid == 1
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 20
zksInstance.serverStats.minLatency == 20 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.packetsReceived == 2 || zksInstance.serverStats.packetsReceived == 3
zksInstance.serverStats.packetsSent == 1 || zksInstance.serverStats.packetsSent == 2
zksInstance.sessionTracker.currentTime == 25258472
zksInstance.sessionTracker.nextSessionId == 72059249377148929L
zksInstance.serverStats.minLatency >= 1
zksInstance.sessionTracker.currentTime == 25259423
zksInstance.sessionTracker.nextSessionId == 72059249439473665L
zksInstance.hzxid >= zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.hzxid <= zksInstance.serverStats.count
zksInstance.hzxid <= zksInstance.serverStats.maxLatency
zksInstance.hzxid < zksInstance.serverStats.packetsReceived
zksInstance.hzxid < zksInstance.serverStats.packetsSent
zksInstance.hzxid <= zksInstance.serverStats.totalLatency
zksInstance.hzxid < zksInstance.sessionTracker.currentTime
zksInstance.hzxid < zksInstance.sessionTracker.expirationInterval
zksInstance.hzxid < zksInstance.sessionTracker.nextExpirationTime
zksInstance.hzxid < zksInstance.sessionTracker.nextSessionId
zksInstance.hzxid < zksInstance.superSecret
zksInstance.hzxid < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.hzxid <= zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.hzxid < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.hzxid < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.hzxid < zksInstance.zkDb.commitLogBuffer
zksInstance.hzxid < zksInstance.zkDb.commitLogCount
zksInstance.hzxid >= zksInstance.zkDb.minCommittedLog
zksInstance.requestsInProcess != zksInstance.serverStats.maxLatency
zksInstance.requestsInProcess <= zksInstance.serverStats.minLatency
zksInstance.requestsInProcess < zksInstance.serverStats.packetsReceived
zksInstance.requestsInProcess <= zksInstance.serverStats.packetsSent
zksInstance.requestsInProcess != zksInstance.serverStats.totalLatency
zksInstance.requestsInProcess != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.requestsInProcess >= zksInstance.zkDb.minCommittedLog
zksInstance.serverCnxnFactory.maxClientCnxns <= zksInstance.serverStats.count
zksInstance.serverCnxnFactory.maxClientCnxns <= zksInstance.serverStats.maxLatency
zksInstance.serverCnxnFactory.maxClientCnxns <= zksInstance.serverStats.totalLatency
zksInstance.serverCnxnFactory.maxClientCnxns <= zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.serverCnxnFactory.maxClientCnxns <= zksInstance.zkDb.minCommittedLog
zksInstance.serverStats.count <= zksInstance.serverStats.maxLatency
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + 2 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + 1 == 0
zksInstance.serverStats.count <= zksInstance.serverStats.totalLatency
zksInstance.serverStats.count < zksInstance.sessionTracker.currentTime
zksInstance.serverStats.count < zksInstance.sessionTracker.expirationInterval
zksInstance.serverStats.count < zksInstance.sessionTracker.nextExpirationTime
zksInstance.serverStats.count < zksInstance.sessionTracker.nextSessionId
zksInstance.serverStats.count < zksInstance.superSecret
zksInstance.serverStats.count < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.serverStats.count <= zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.serverStats.count < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.serverStats.count < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.serverStats.count < zksInstance.zkDb.commitLogBuffer
zksInstance.serverStats.count < zksInstance.zkDb.commitLogCount
zksInstance.serverStats.count >= zksInstance.zkDb.minCommittedLog
zksInstance.serverStats.maxLatency % zksInstance.serverStats.minLatency == 0
zksInstance.serverStats.maxLatency != zksInstance.serverStats.packetsReceived
zksInstance.serverStats.maxLatency != zksInstance.serverStats.packetsSent
zksInstance.serverStats.maxLatency <= zksInstance.serverStats.totalLatency
zksInstance.serverStats.maxLatency < zksInstance.sessionTracker.currentTime
zksInstance.serverStats.maxLatency < zksInstance.sessionTracker.expirationInterval
zksInstance.serverStats.maxLatency < zksInstance.sessionTracker.nextExpirationTime
zksInstance.serverStats.maxLatency < zksInstance.sessionTracker.nextSessionId
zksInstance.serverStats.maxLatency < zksInstance.superSecret
zksInstance.serverStats.maxLatency < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.serverStats.maxLatency <= zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.serverStats.maxLatency < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.serverStats.maxLatency < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.serverStats.maxLatency < zksInstance.zkDb.commitLogBuffer
zksInstance.serverStats.maxLatency < zksInstance.zkDb.commitLogCount
zksInstance.serverStats.maxLatency >= zksInstance.zkDb.minCommittedLog
zksInstance.serverStats.minLatency != zksInstance.sessionTracker.currentTime
zksInstance.serverStats.minLatency != zksInstance.sessionTracker.expirationInterval
zksInstance.serverStats.minLatency != zksInstance.sessionTracker.nextExpirationTime
zksInstance.serverStats.minLatency != zksInstance.sessionTracker.nextSessionId
zksInstance.serverStats.minLatency != zksInstance.superSecret
zksInstance.serverStats.minLatency != zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.serverStats.minLatency != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.serverStats.minLatency != zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.serverStats.minLatency != zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.serverStats.minLatency != zksInstance.zkDb.commitLogBuffer
zksInstance.serverStats.minLatency != zksInstance.zkDb.commitLogCount
zksInstance.serverStats.minLatency >= zksInstance.zkDb.minCommittedLog
zksInstance.serverStats.packetsReceived != zksInstance.serverStats.totalLatency
zksInstance.serverStats.packetsReceived < zksInstance.sessionTracker.currentTime
zksInstance.serverStats.packetsReceived < zksInstance.sessionTracker.expirationInterval
zksInstance.serverStats.packetsReceived < zksInstance.sessionTracker.nextExpirationTime
zksInstance.serverStats.packetsReceived < zksInstance.sessionTracker.nextSessionId
zksInstance.serverStats.packetsReceived < zksInstance.superSecret
zksInstance.serverStats.packetsReceived < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.serverStats.packetsReceived != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.serverStats.packetsReceived < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.serverStats.packetsReceived < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.serverStats.packetsReceived < zksInstance.zkDb.commitLogBuffer
zksInstance.serverStats.packetsReceived < zksInstance.zkDb.commitLogCount
zksInstance.serverStats.packetsReceived > zksInstance.zkDb.minCommittedLog
zksInstance.serverStats.packetsSent != zksInstance.serverStats.totalLatency
zksInstance.serverStats.packetsSent < zksInstance.sessionTracker.currentTime
zksInstance.serverStats.packetsSent < zksInstance.sessionTracker.expirationInterval
zksInstance.serverStats.packetsSent < zksInstance.sessionTracker.nextExpirationTime
zksInstance.serverStats.packetsSent < zksInstance.sessionTracker.nextSessionId
zksInstance.serverStats.packetsSent < zksInstance.superSecret
zksInstance.serverStats.packetsSent < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.serverStats.packetsSent != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.serverStats.packetsSent < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.serverStats.packetsSent < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.serverStats.packetsSent < zksInstance.zkDb.commitLogBuffer
zksInstance.serverStats.packetsSent < zksInstance.zkDb.commitLogCount
zksInstance.serverStats.packetsSent > zksInstance.zkDb.minCommittedLog
zksInstance.serverStats.totalLatency < zksInstance.sessionTracker.currentTime
zksInstance.serverStats.totalLatency < zksInstance.sessionTracker.expirationInterval
zksInstance.serverStats.totalLatency < zksInstance.sessionTracker.nextExpirationTime
zksInstance.serverStats.totalLatency < zksInstance.sessionTracker.nextSessionId
zksInstance.serverStats.totalLatency < zksInstance.superSecret
zksInstance.serverStats.totalLatency < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.serverStats.totalLatency <= zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.serverStats.totalLatency < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.serverStats.totalLatency < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.serverStats.totalLatency < zksInstance.zkDb.commitLogBuffer
zksInstance.serverStats.totalLatency < zksInstance.zkDb.commitLogCount
zksInstance.serverStats.totalLatency >= zksInstance.zkDb.minCommittedLog
zksInstance.sessionTracker.currentTime > zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.sessionTracker.currentTime > zksInstance.zkDb.minCommittedLog
zksInstance.sessionTracker.expirationInterval != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.sessionTracker.expirationInterval > zksInstance.zkDb.minCommittedLog
zksInstance.sessionTracker.nextExpirationTime > zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.sessionTracker.nextExpirationTime > zksInstance.zkDb.minCommittedLog
zksInstance.sessionTracker.nextSessionId > zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.sessionTracker.nextSessionId > zksInstance.zkDb.minCommittedLog
zksInstance.superSecret > zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.superSecret > zksInstance.zkDb.minCommittedLog
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC > zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC > zksInstance.zkDb.minCommittedLog
zksInstance.txnLogFactory.txnLog.currentSize != zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.txnLogFactory.txnLog.currentSize != zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.txnLogFactory.txnLog.currentSize != zksInstance.zkDb.commitLogBuffer
zksInstance.txnLogFactory.txnLog.currentSize != zksInstance.zkDb.commitLogCount
zksInstance.txnLogFactory.txnLog.currentSize >= zksInstance.zkDb.minCommittedLog
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS > zksInstance.zkDb.minCommittedLog
zksInstance.txnLogFactory.txnLog.preAllocSize > zksInstance.zkDb.minCommittedLog
zksInstance.zkDb.commitLogBuffer > zksInstance.zkDb.minCommittedLog
zksInstance.zkDb.commitLogCount > zksInstance.zkDb.minCommittedLog
24 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
24 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.requestsInProcess >= 1
zksInstance.sessionTracker.currentTime == 25258625
zksInstance.sessionTracker.nextSessionId == 72059249387175937L
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 1
zksInstance.hzxid != zksInstance.serverStats.minLatency
zksInstance.hzxid >= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.hzxid >= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.hzxid >= zksInstance.zkDb.maxCommittedLog
zksInstance.requestsInProcess < zksInstance.sessionTracker.currentTime
zksInstance.requestsInProcess < zksInstance.sessionTracker.expirationInterval
zksInstance.requestsInProcess < zksInstance.sessionTracker.nextExpirationTime
zksInstance.requestsInProcess < zksInstance.sessionTracker.nextSessionId
zksInstance.requestsInProcess < zksInstance.superSecret
zksInstance.requestsInProcess < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.requestsInProcess < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.requestsInProcess < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.requestsInProcess < zksInstance.zkDb.commitLogBuffer
zksInstance.requestsInProcess < zksInstance.zkDb.commitLogCount
zksInstance.requestsInProcess >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.maxClientCnxns <= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverCnxnFactory.maxClientCnxns <= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverCnxnFactory.maxClientCnxns <= zksInstance.zkDb.maxCommittedLog
zksInstance.serverStats.count != zksInstance.serverStats.minLatency
zksInstance.serverStats.count < zksInstance.serverStats.packetsReceived
zksInstance.serverStats.count <= zksInstance.serverStats.packetsSent
zksInstance.serverStats.count >= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverStats.count >= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverStats.count >= zksInstance.zkDb.maxCommittedLog
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.minLatency != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverStats.minLatency != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverStats.minLatency != zksInstance.zkDb.maxCommittedLog
zksInstance.serverStats.minLatency >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsReceived > zksInstance.serverStats.packetsSent
zksInstance.serverStats.packetsReceived > zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverStats.packetsReceived > zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverStats.packetsReceived > zksInstance.zkDb.maxCommittedLog
zksInstance.serverStats.packetsReceived > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsSent > zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverStats.packetsSent > zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverStats.packetsSent > zksInstance.zkDb.maxCommittedLog
zksInstance.serverStats.packetsSent >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.totalLatency != zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.serverStats.totalLatency >= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverStats.totalLatency != zksInstance.zkDb.commitLogBuffer
zksInstance.serverStats.totalLatency != zksInstance.zkDb.commitLogCount
zksInstance.serverStats.totalLatency >= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverStats.totalLatency >= zksInstance.zkDb.maxCommittedLog
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.currentTime > zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.sessionTracker.currentTime > zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.sessionTracker.currentTime > zksInstance.zkDb.maxCommittedLog
zksInstance.sessionTracker.expirationInterval > zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.sessionTracker.expirationInterval > zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.sessionTracker.expirationInterval > zksInstance.zkDb.maxCommittedLog
zksInstance.sessionTracker.nextExpirationTime > zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.sessionTracker.nextExpirationTime > zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.sessionTracker.nextExpirationTime > zksInstance.zkDb.maxCommittedLog
zksInstance.sessionTracker.nextSessionId > zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.sessionTracker.nextSessionId > zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.sessionTracker.nextSessionId > zksInstance.zkDb.maxCommittedLog
zksInstance.superSecret > zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.superSecret > zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.superSecret > zksInstance.zkDb.maxCommittedLog
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC > zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC > zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC > zksInstance.zkDb.maxCommittedLog
zksInstance.txnLogFactory.txnLog.currentSize >= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.txnLogFactory.txnLog.currentSize >= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.txnLogFactory.txnLog.currentSize >= zksInstance.zkDb.maxCommittedLog
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS > zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS > zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS > zksInstance.zkDb.maxCommittedLog
zksInstance.txnLogFactory.txnLog.lastZxidSeen < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.txnLogFactory.txnLog.lastZxidSeen < zksInstance.zkDb.commitLogBuffer
zksInstance.txnLogFactory.txnLog.lastZxidSeen < zksInstance.zkDb.commitLogCount
zksInstance.txnLogFactory.txnLog.lastZxidSeen >= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.txnLogFactory.txnLog.lastZxidSeen >= zksInstance.zkDb.maxCommittedLog
zksInstance.txnLogFactory.txnLog.lastZxidSeen >= zksInstance.zkDb.minCommittedLog
zksInstance.txnLogFactory.txnLog.preAllocSize > zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.txnLogFactory.txnLog.preAllocSize > zksInstance.zkDb.maxCommittedLog
zksInstance.zkDb.commitLogBuffer > zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.zkDb.commitLogBuffer > zksInstance.zkDb.maxCommittedLog
zksInstance.zkDb.commitLogCount > zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.zkDb.commitLogCount > zksInstance.zkDb.maxCommittedLog
zksInstance.zkDb.dataTree.lastProcessedZxid >= zksInstance.zkDb.maxCommittedLog
zksInstance.zkDb.dataTree.lastProcessedZxid >= zksInstance.zkDb.minCommittedLog
zksInstance.zkDb.maxCommittedLog >= zksInstance.zkDb.minCommittedLog
zksInstance.zkDb.minCommittedLog <= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
21 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
21 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.minLatency + 21 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.minLatency + 21 * zksInstance.zkDb.dataTree.lastProcessedZxid + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.minLatency + 21 * zksInstance.zkDb.maxCommittedLog + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.maxSessionTimeout == -1
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 30
zksInstance.serverStats.minLatency == 13 || zksInstance.serverStats.minLatency == 30 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 25258526
zksInstance.sessionTracker.nextSessionId == 72059249380687873L
daikon.Quant.eltsNotEqual(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, null)
daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) == 1
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + 2 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + 1 == 0
daikon.Quant.eltsEqual(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns))
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 31
zksInstance.serverStats.minLatency == 31 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 25258248
zksInstance.sessionTracker.nextSessionId == 72059249362468865L
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 27
zksInstance.serverStats.minLatency == 27 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 25258363
zksInstance.sessionTracker.nextSessionId == 72059249370005505L
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 25
zksInstance.serverStats.minLatency == 25 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 25258312
zksInstance.sessionTracker.nextSessionId == 72059249366663169L
zksInstance.sessionTracker.currentTime == 25258420
zksInstance.sessionTracker.nextSessionId == 72059249373741057L
zksInstance.sessionTracker.currentTime == 25259375
zksInstance.sessionTracker.nextSessionId == 72059249436327937L
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 498
zksInstance.serverStats.minLatency == 498 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 25257565
zksInstance.sessionTracker.nextSessionId == 72059249317707777L
zksInstance.serverStats.count == 0 || zksInstance.serverStats.count == 1 || zksInstance.serverStats.count == 2
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 34
zksInstance.serverStats.minLatency == 7 || zksInstance.serverStats.minLatency == 34 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 34 || zksInstance.serverStats.totalLatency == 41
zksInstance.sessionTracker.currentTime == 25258165
zksInstance.sessionTracker.nextSessionId == 72059249357029377L
zksInstance.maxSessionTimeout == zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.txnLogFactory.txnLog.dbId == daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.dbId == daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.dbId == daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.dbId == daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
zksInstance.sessionTracker.nextSessionId == 72059266892103681L
zksInstance.zkDb.dataTree.scount >= 0
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) >= 1
zksInstance.hzxid >= zksInstance.txnLogFactory.txnLog.dbId
zksInstance.hzxid >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess < zksInstance.serverStats.minLatency
zksInstance.requestsInProcess != zksInstance.zkDb.dataTree.scount
zksInstance.requestsInProcess <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId))
zksInstance.serverStats.maxLatency >= zksInstance.txnLogFactory.txnLog.dbId
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.serverStats.maxLatency >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.minLatency != zksInstance.zkDb.dataTree.scount
zksInstance.serverStats.packetsReceived > zksInstance.zkDb.dataTree.scount
zksInstance.serverStats.packetsReceived > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsSent >= zksInstance.zkDb.dataTree.scount
zksInstance.serverStats.packetsSent >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.serverStats.totalLatency != zksInstance.sessionTracker.expirationInterval
zksInstance.serverStats.totalLatency >= zksInstance.txnLogFactory.txnLog.dbId
zksInstance.serverStats.totalLatency >= zksInstance.zkDb.dataTree.scount
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.serverStats.totalLatency >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.currentTime > zksInstance.sessionTracker.expirationInterval
zksInstance.sessionTracker.currentTime < zksInstance.sessionTracker.nextExpirationTime
zksInstance.sessionTracker.currentTime < zksInstance.sessionTracker.nextSessionId
zksInstance.sessionTracker.currentTime < zksInstance.superSecret
zksInstance.sessionTracker.currentTime < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.sessionTracker.currentTime > zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.sessionTracker.currentTime > zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.sessionTracker.currentTime > zksInstance.zkDb.commitLogBuffer
zksInstance.sessionTracker.currentTime > zksInstance.zkDb.commitLogCount
zksInstance.sessionTracker.currentTime > zksInstance.zkDb.dataTree.scount
zksInstance.sessionTracker.currentTime % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 0
zksInstance.sessionTracker.currentTime > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.expirationInterval < zksInstance.sessionTracker.nextExpirationTime
zksInstance.sessionTracker.nextExpirationTime % zksInstance.sessionTracker.expirationInterval == 0
zksInstance.sessionTracker.expirationInterval > zksInstance.zkDb.dataTree.scount
zksInstance.sessionTracker.expirationInterval % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 0
zksInstance.sessionTracker.expirationInterval > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextExpirationTime < zksInstance.sessionTracker.nextSessionId
zksInstance.sessionTracker.nextExpirationTime < zksInstance.superSecret
zksInstance.sessionTracker.nextExpirationTime < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.sessionTracker.nextExpirationTime % zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS == 0
zksInstance.sessionTracker.nextExpirationTime > zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.sessionTracker.nextExpirationTime > zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.sessionTracker.nextExpirationTime > zksInstance.zkDb.commitLogBuffer
zksInstance.sessionTracker.nextExpirationTime % zksInstance.zkDb.commitLogCount == 0
zksInstance.sessionTracker.nextExpirationTime > zksInstance.zkDb.commitLogCount
zksInstance.sessionTracker.nextExpirationTime > zksInstance.zkDb.dataTree.scount
zksInstance.sessionTracker.nextExpirationTime % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 0
zksInstance.sessionTracker.nextExpirationTime > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextSessionId > zksInstance.zkDb.dataTree.scount
zksInstance.sessionTracker.nextSessionId > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.superSecret > zksInstance.zkDb.dataTree.scount
zksInstance.superSecret > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC > zksInstance.zkDb.dataTree.scount
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize >= zksInstance.txnLogFactory.txnLog.dbId
zksInstance.txnLogFactory.txnLog.currentSize >= zksInstance.zkDb.dataTree.scount
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.dbId <= zksInstance.zkDb.dataTree.scount
zksInstance.txnLogFactory.txnLog.dbId <= zksInstance.zkDb.minCommittedLog
zksInstance.txnLogFactory.txnLog.dbId <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS != zksInstance.zkDb.dataTree.scount
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.preAllocSize > zksInstance.zkDb.dataTree.scount
zksInstance.txnLogFactory.txnLog.preAllocSize > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.zkDb.commitLogBuffer != zksInstance.zkDb.dataTree.scount
zksInstance.zkDb.commitLogBuffer > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.zkDb.commitLogCount != zksInstance.zkDb.dataTree.scount
zksInstance.zkDb.commitLogCount > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.scount != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.scount >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
300 * zksInstance.sessionTracker.currentTime - 127 * zksInstance.sessionTracker.nextExpirationTime - 346000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.415444E9 == 0
300 * zksInstance.sessionTracker.currentTime - 127 * zksInstance.sessionTracker.nextExpirationTime - 346000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.41579E9 == 0
zksInstance.sessionTracker.nextSessionId == 72059320098881537L || zksInstance.sessionTracker.nextSessionId == 72059320961073153L
zksInstance.hzxid >= zksInstance.serverStats.count
zksInstance.hzxid != zksInstance.serverStats.packetsReceived
zksInstance.hzxid != zksInstance.serverStats.packetsSent
zksInstance.serverCnxnFactory.maxClientCnxns <= zksInstance.zkDb.dataTree.scount
zksInstance.serverCnxnFactory.maxClientCnxns <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.count <= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverStats.count >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.packetsReceived != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverStats.packetsReceived != zksInstance.zkDb.minCommittedLog
zksInstance.serverStats.packetsSent != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverStats.packetsSent != zksInstance.zkDb.minCommittedLog
zksInstance.sessionTracker.expirationInterval < zksInstance.sessionTracker.nextSessionId
zksInstance.sessionTracker.nextSessionId > zksInstance.superSecret
zksInstance.sessionTracker.nextSessionId > zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.sessionTracker.nextSessionId > zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.sessionTracker.nextSessionId > zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.sessionTracker.nextSessionId > zksInstance.zkDb.commitLogBuffer
zksInstance.sessionTracker.nextSessionId > zksInstance.zkDb.commitLogCount
zksInstance.txnLogFactory.txnLog.lastZxidSeen >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
13157 * zksInstance.hzxid - 13157 * zksInstance.serverStats.count - 2002 * zksInstance.sessionTracker.currentTime + 5.27278752E10 == 0
6000 * zksInstance.hzxid - 6000 * zksInstance.serverStats.count - 1001 * zksInstance.sessionTracker.nextExpirationTime + 2.636634E10 == 0
13157 * zksInstance.hzxid - 13157 * zksInstance.serverStats.packetsReceived - 2002 * zksInstance.sessionTracker.currentTime + 5.2727901514E10 == 0
6000 * zksInstance.hzxid - 6000 * zksInstance.serverStats.packetsReceived - 1001 * zksInstance.sessionTracker.nextExpirationTime + 2.6366352E10 == 0
13157 * zksInstance.hzxid - 13157 * zksInstance.serverStats.packetsSent - 2002 * zksInstance.sessionTracker.currentTime + 5.2727888357E10 == 0
6000 * zksInstance.hzxid - 6000 * zksInstance.serverStats.packetsSent - 1001 * zksInstance.sessionTracker.nextExpirationTime + 2.6366346E10 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 44
zksInstance.serverStats.minLatency == 14 || zksInstance.serverStats.minLatency == 44 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 44 || zksInstance.serverStats.totalLatency == 58
zksInstance.sessionTracker.currentTime == 25097266
zksInstance.sessionTracker.nextExpirationTime == 25098000
zksInstance.sessionTracker.nextSessionId == 72059238812352513L
zksInstance.hzxid == zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.hzxid == zksInstance.serverStats.maxLatency
zksInstance.hzxid == zksInstance.serverStats.totalLatency
zksInstance.hzxid == zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.hzxid == zksInstance.txnLogFactory.txnLog.dbId
zksInstance.hzxid == zksInstance.zkDb.dataTree.scount
zksInstance.hzxid == daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.hzxid == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.hzxid == daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.hzxid == daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.hzxid == daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess == zksInstance.serverStats.packetsSent
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.packetsReceived == 2
zksInstance.sessionTracker.currentTime == 25097521
zksInstance.sessionTracker.nextSessionId == 72059238828998657L
daikon.Quant.eltsEqual(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.hzxid))
zksInstance.firstProcessor.failCreate == zksInstance.serverCnxnFactory.killed
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 63
zksInstance.serverStats.minLatency == 15 || zksInstance.serverStats.minLatency == 63 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 63 || zksInstance.serverStats.totalLatency == 78
zksInstance.sessionTracker.currentTime == 26321598
zksInstance.sessionTracker.nextExpirationTime == 26322000
zksInstance.sessionTracker.nextSessionId == 72059319050174465L
zksInstance.hzxid == zksInstance.requestsInProcess
zksInstance.hzxid == daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.hzxid == daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.maxSessionTimeout == daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.maxSessionTimeout == daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.pairwiseEqual(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsReceived == zksInstance.serverStats.packetsSent
zksInstance.txnLogFactory.txnLog.forceSync == zksInstance.zkDb.dataTree.$assertionsDisabled
zksInstance.txnLogFactory.txnLog.forceSync == zksInstance.zkDb.dataTree.initialized
zksInstance.txnLogFactory.txnLog.forceSync == zksInstance.zkDb.initialized
zksInstance.serverStats.packetsReceived == 1
zksInstance.tickTime == 3000
zksInstance.txnLogFactory.txnLog.forceSync == true
zksInstance.requestsInProcess == zksInstance.serverStats.count
zksInstance.requestsInProcess == zksInstance.serverStats.maxLatency
zksInstance.requestsInProcess == zksInstance.serverStats.totalLatency
zksInstance.requestsInProcess == zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.requestsInProcess == zksInstance.txnLogFactory.txnLog.dbId
zksInstance.requestsInProcess == zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.requestsInProcess == zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.requestsInProcess == zksInstance.zkDb.dataTree.scount
zksInstance.requestsInProcess == zksInstance.zkDb.maxCommittedLog
zksInstance.requestsInProcess == zksInstance.zkDb.minCommittedLog
zksInstance.requestsInProcess == daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 51
zksInstance.sessionTracker.nextSessionId == 72059288106696705L
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 1 || daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 2 || daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 3
zksInstance.serverStats.minLatency >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 30 || zksInstance.serverStats.maxLatency == 63
zksInstance.sessionTracker.currentTime == 25862813 || zksInstance.sessionTracker.currentTime == 25863000 || zksInstance.sessionTracker.currentTime == 25865382
zksInstance.sessionTracker.nextExpirationTime == 25863000 || zksInstance.sessionTracker.nextExpirationTime == 25866000
zksInstance.sessionTracker.nextSessionId == 72059288983175169L || zksInstance.sessionTracker.nextSessionId == 72059289151602689L
zksInstance.zkDb.minCommittedLog == 0 || zksInstance.zkDb.minCommittedLog == 1 || zksInstance.zkDb.minCommittedLog == 302
zksInstance.requestsInProcess <= zksInstance.serverStats.packetsReceived
zksInstance.requestsInProcess >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.count >= zksInstance.txnLogFactory.txnLog.dbId
zksInstance.serverStats.minLatency != zksInstance.serverStats.packetsReceived
zksInstance.serverStats.minLatency != zksInstance.zkDb.minCommittedLog
zksInstance.serverStats.minLatency > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsReceived >= zksInstance.zkDb.dataTree.scount
zksInstance.serverStats.packetsReceived >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsSent >= zksInstance.txnLogFactory.txnLog.dbId
zksInstance.serverStats.packetsSent >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.dbId <= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS > zksInstance.zkDb.dataTree.scount
zksInstance.zkDb.commitLogBuffer > zksInstance.zkDb.dataTree.scount
zksInstance.zkDb.commitLogCount > zksInstance.zkDb.dataTree.scount
zksInstance.hzxid - 403 * zksInstance.serverStats.count + 402 * zksInstance.serverStats.packetsReceived - 804 == 0
zksInstance.hzxid - 403 * zksInstance.serverStats.count + 402 * zksInstance.serverStats.packetsSent - 402 == 0
2569 * zksInstance.hzxid - 2569 * zksInstance.serverStats.count - 402 * zksInstance.sessionTracker.currentTime + 1.0396850826E10 == 0
500 * zksInstance.hzxid - 500 * zksInstance.serverStats.count - 67 * zksInstance.sessionTracker.nextExpirationTime + 1732821000 == 0
2569 * zksInstance.hzxid - 2569 * zksInstance.serverStats.packetsReceived - 403 * zksInstance.sessionTracker.currentTime + 1.0422718777E10 == 0
3000 * zksInstance.hzxid - 3000 * zksInstance.serverStats.packetsReceived - 403 * zksInstance.sessionTracker.nextExpirationTime + 1.0422795E10 == 0
2569 * zksInstance.hzxid - 2569 * zksInstance.serverStats.packetsSent - 403 * zksInstance.sessionTracker.currentTime + 1.0422716208E10 == 0
3000 * zksInstance.hzxid - 3000 * zksInstance.serverStats.packetsSent - 403 * zksInstance.sessionTracker.nextExpirationTime + 1.0422792E10 == 0
2569 * zksInstance.hzxid - 402 * zksInstance.sessionTracker.currentTime - 2569 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 1.0396850826E10 == 0
2569 * zksInstance.serverStats.count - 2569 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.currentTime + 25867951 == 0
3000 * zksInstance.serverStats.count - 3000 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextExpirationTime + 25869000 == 0
168427520 * zksInstance.serverStats.count - 168427520 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId + 7.2059289320030208E16 == 0
2569 * zksInstance.serverStats.count - 2569 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.currentTime + 25865382 == 0
3000 * zksInstance.serverStats.count - 3000 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextExpirationTime + 25866000 == 0
168427520 * zksInstance.serverStats.count - 168427520 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059289151602688E16 == 0
2569 * zksInstance.serverStats.count + 402 * zksInstance.sessionTracker.currentTime - 2569 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 1.0396850826E10 == 0
263106704 * zksInstance.serverStats.maxLatency + 3379728 * zksInstance.sessionTracker.currentTime - 161847 * zksInstance.txnLogFactory.txnLog.currentSize - 8.7409273254864E13 == 0
367 * zksInstance.serverStats.maxLatency + 2718 * zksInstance.sessionTracker.currentTime - 23121 * zksInstance.zkDb.minCommittedLog - 7.0295125734E10 == 0
168427520 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 168427520 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 7.2059289320030208E16 == 0
168427520 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 168427520 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 7.2059289151602688E16 == 0
302 * zksInstance.sessionTracker.currentTime - 2569 * zksInstance.zkDb.minCommittedLog - 53905 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 7.810515621E9 == 0
302 * zksInstance.sessionTracker.currentTime - 2569 * zksInstance.zkDb.minCommittedLog - 53905 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 7.810569526E9 == 0
zksInstance.requestsInProcess == 1 || zksInstance.requestsInProcess == 2 || zksInstance.requestsInProcess == 3
zksInstance.serverStats.minLatency >= 0
zksInstance.sessionTracker.nextSessionId == 72059289160253441L
zksInstance.requestsInProcess != zksInstance.serverStats.count
zksInstance.sessionTracker.nextExpirationTime % zksInstance.requestsInProcess == 0
zksInstance.requestsInProcess != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.requestsInProcess != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.requestsInProcess != zksInstance.zkDb.maxCommittedLog
zksInstance.serverStats.count < zksInstance.serverStats.packetsSent
zksInstance.serverStats.count != zksInstance.sessionTracker.expirationInterval
zksInstance.serverStats.count != zksInstance.zkDb.commitLogBuffer
zksInstance.serverStats.minLatency >= zksInstance.txnLogFactory.txnLog.dbId
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsSent != zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.serverStats.packetsSent != zksInstance.zkDb.commitLogCount
zksInstance.serverStats.packetsSent >= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.sessionTracker.currentTime > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.expirationInterval != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.sessionTracker.expirationInterval != zksInstance.zkDb.maxCommittedLog
zksInstance.sessionTracker.nextExpirationTime > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.dbId <= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.txnLogFactory.txnLog.dbId <= zksInstance.zkDb.maxCommittedLog
zksInstance.txnLogFactory.txnLog.lastZxidSeen != zksInstance.zkDb.commitLogBuffer
zksInstance.zkDb.commitLogBuffer != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.zkDb.commitLogBuffer != zksInstance.zkDb.maxCommittedLog
zksInstance.zkDb.commitLogBuffer != zksInstance.zkDb.minCommittedLog
zksInstance.zkDb.dataTree.lastProcessedZxid >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.finalProcessor.interrupted == zksInstance.firstProcessor.failCreate
zksInstance.finalProcessor.interrupted == zksInstance.firstProcessor.skipACL
zksInstance.finalProcessor.interrupted == zksInstance.sessionTracker.running
zksInstance.finalProcessor.interrupted == zksInstance.syncProcessor.nextProcessor.interrupted
zksInstance.finalProcessor.interrupted == zksInstance.txnLogFactory.snapLog.close
zksInstance.finalProcessor.interrupted == zksInstance.zkDb.dataTree.initialized
zksInstance.finalProcessor.interrupted == zksInstance.zkDb.initialized
zksInstance.hzxid == zksInstance.serverStats.packetsReceived
zksInstance.hzxid == zksInstance.serverStats.packetsSent
zksInstance.hzxid == zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.hzxid == zksInstance.syncProcessor.requestOfDeath.sessionId
zksInstance.hzxid == zksInstance.syncProcessor.requestOfDeath.type
zksInstance.hzxid == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.hzxid == daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.minSessionTimeout == zksInstance.sessionTracker.expirationInterval
zksInstance.minSessionTimeout == zksInstance.tickTime
zksInstance.requestsInProcess == zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.requestsInProcess == zksInstance.txnLogFactory.snapLog.dbId
zksInstance.requestsInProcess == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess == daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess == daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess == daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.maxLatency == zksInstance.serverStats.minLatency
zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE == zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE
zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE == zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE
zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE == zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE
daikon.Quant.pairwiseEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.pairwiseEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.pairwiseEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.running == zksInstance.txnLogFactory.txnLog.forceSync
zksInstance.syncProcessor.running == zksInstance.zkDb.dataTree.$assertionsDisabled
zksInstance.txnLogFactory.txnLog.lastZxidSeen == zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.finalProcessor.interrupted == false
zksInstance.maxSessionTimeout == 4000
zksInstance.minSessionTimeout == 2000
zksInstance.serverStats.count == 1
zksInstance.serverStats.maxLatency == 32
zksInstance.sessionTracker.currentTime == 25624533
zksInstance.sessionTracker.nextExpirationTime == 25626000
zksInstance.sessionTracker.nextSessionId == 72059273367257088L
zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE != null
zksInstance.syncProcessor.randRoll == 49578
zksInstance.syncProcessor.requestOfDeath.createTime == 25608979
zksInstance.syncProcessor.running == true
zksInstance.syncProcessor.snapCount == 100000
zksInstance.txnLogFactory.txnLog.currentSize == 102416
zksInstance.txnLogFactory.txnLog.lastZxidSeen == 12884901895L
zksInstance.firstProcessor.failCreate == zksInstance.sessionTracker.running
zksInstance.maxSessionTimeout == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.maxSessionTimeout == daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.killed == zksInstance.txnLogFactory.txnLog.forceSync
zksInstance.serverCnxnFactory.killed == zksInstance.zkDb.dataTree.$assertionsDisabled
zksInstance.serverCnxnFactory.killed == zksInstance.zkDb.dataTree.initialized
zksInstance.serverCnxnFactory.killed == zksInstance.zkDb.initialized
daikon.Quant.pairwiseEqual(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.killed == true
zksInstance.sessionTracker.currentTime == 25625197
zksInstance.sessionTracker.nextSessionId == 72059273410772992L
zksInstance.txnLogFactory.txnLog.dbId == zksInstance.zkDb.dataTree.scount
zksInstance.txnLogFactory.txnLog.dbId == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 45
zksInstance.serverStats.minLatency == 45 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26146899
zksInstance.sessionTracker.nextExpirationTime == 26148000
zksInstance.sessionTracker.nextSessionId == 72059307601035265L
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId))
zksInstance.serverStats.minLatency == 30 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.packetsReceived == 1 || zksInstance.serverStats.packetsReceived == 2
zksInstance.sessionTracker.currentTime == 26152409
zksInstance.sessionTracker.nextExpirationTime == 26154000
zksInstance.sessionTracker.nextSessionId == 72059307962138625L
zksInstance.commitProcessor.finished == zksInstance.firstProcessor.finished
zksInstance.commitProcessor.finished == zksInstance.self.authInitialized
zksInstance.commitProcessor.finished == zksInstance.self.electionAlg.stop
zksInstance.commitProcessor.finished == zksInstance.self.qcm.listenOnAllIPs
zksInstance.commitProcessor.finished == zksInstance.self.qcm.quorumSaslAuthEnabled
zksInstance.commitProcessor.finished == zksInstance.self.qcm.shutdown
zksInstance.commitProcessor.finished == zksInstance.self.qcm.tcpKeepAlive
zksInstance.commitProcessor.finished == zksInstance.self.quorumLearnerSaslAuthRequired
zksInstance.commitProcessor.finished == zksInstance.self.quorumListenOnAllIPs
zksInstance.commitProcessor.finished == zksInstance.self.quorumSaslEnableAuth
zksInstance.commitProcessor.finished == zksInstance.self.quorumServerSaslAuthRequired
zksInstance.commitProcessor.finished == zksInstance.txnLogFactory.snapLog.close
zksInstance.commitProcessor.finished == zksInstance.zkDb.dataTree.initialized
zksInstance.commitProcessor.matchSyncs == zksInstance.self.$assertionsDisabled
zksInstance.commitProcessor.matchSyncs == zksInstance.self.running
zksInstance.commitProcessor.matchSyncs == zksInstance.self.syncEnabled
zksInstance.commitProcessor.matchSyncs == zksInstance.self.zkDb.initialized
zksInstance.commitProcessor.matchSyncs == zksInstance.syncProcessor.running
zksInstance.commitProcessor.matchSyncs == zksInstance.txnLogFactory.txnLog.forceSync
zksInstance.commitProcessor.matchSyncs == zksInstance.zkDb.dataTree.$assertionsDisabled
zksInstance.commitProcessor.matchSyncs == zksInstance.zkDb.initialized
zksInstance.hzxid == zksInstance.self.bcVote.version
zksInstance.hzxid == zksInstance.self.bcVote.zxid
zksInstance.hzxid == zksInstance.self.currentVote.version
zksInstance.hzxid == zksInstance.self.currentVote.zxid
zksInstance.hzxid == zksInstance.self.end_fle
zksInstance.hzxid == zksInstance.self.qcm.connectionThreadCnt
zksInstance.hzxid == zksInstance.self.start_fle
zksInstance.hzxid == zksInstance.self.tick
zksInstance.hzxid == zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.hzxid == zksInstance.syncProcessor.zks.hzxid
zksInstance.maxSessionTimeout == zksInstance.self.maxSessionTimeout
zksInstance.maxSessionTimeout == zksInstance.self.minSessionTimeout
zksInstance.maxSessionTimeout == zksInstance.self.qcm.observerCounter
zksInstance.maxSessionTimeout == zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout
zksInstance.maxSessionTimeout == zksInstance.serverCnxnFactory.zkServer.minSessionTimeout
zksInstance.maxSessionTimeout == zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.maxSessionTimeout == zksInstance.syncProcessor.zks.maxSessionTimeout
zksInstance.maxSessionTimeout == zksInstance.syncProcessor.zks.minSessionTimeout
zksInstance.requestsInProcess == zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.requestsInProcess == zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE == zksInstance.self.quorumCnxnThreadsSize
zksInstance.self.acceptedEpoch == zksInstance.self.bcVote.electionEpoch
zksInstance.self.acceptedEpoch == zksInstance.self.currentEpoch
zksInstance.self.acceptedEpoch == zksInstance.self.currentVote.electionEpoch
zksInstance.self.acceptedEpoch == zksInstance.self.currentVote.peerEpoch
zksInstance.self.acceptedEpoch == zksInstance.self.electionAlg.logicalclock
zksInstance.self.acceptedEpoch == zksInstance.self.myid
zksInstance.self.acceptedEpoch == zksInstance.self.qcm.SEND_CAPACITY
zksInstance.self.acceptedEpoch == zksInstance.self.qcm.mySid
zksInstance.self.acceptedEpoch == zksInstance.self.quorumConfig.half
zksInstance.self.acceptedEpoch == zksInstance.sessionTracker.serverId
zksInstance.self.acceptedEpoch == daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.self.acceptedEpoch == daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)-1
zksInstance.self.acceptedEpoch == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.id == zksInstance.self.currentVote.id
zksInstance.self.bcVote.id == daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id == daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id == daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.id == daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.peerEpoch == zksInstance.self.electionAlg.proposedEpoch
zksInstance.self.cnxnFactory.maxClientCnxns == zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE == zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE
zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE == zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE
zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE == zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE
zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE == zksInstance.self.qcm.view_FOR_ENCLOSING_USE
zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE == zksInstance.self.quorumPeers_FOR_ENCLOSING_USE
zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE == zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE
zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE == zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE
zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE == zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE
zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE == zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE
zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE == zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE
daikon.Quant.pairwiseEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.electionType == daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.self.electionType == daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
daikon.Quant.pairwiseEqual(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
daikon.Quant.pairwiseEqual(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
daikon.Quant.pairwiseEqual(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.self.tickTime == zksInstance.serverCnxnFactory.zkServer.tickTime
zksInstance.self.tickTime == zksInstance.syncProcessor.zks.tickTime
zksInstance.self.tickTime == zksInstance.tickTime
zksInstance.self.zkDb.commitLogBuffer == zksInstance.zkDb.commitLogBuffer
zksInstance.self.zkDb.commitLogCount == zksInstance.zkDb.commitLogCount
zksInstance.self.zkDb.maxCommittedLog == zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.zkDb.maxCommittedLog == zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.zkDb.maxCommittedLog == zksInstance.zkDb.maxCommittedLog
zksInstance.self.zkDb.minCommittedLog == zksInstance.zkDb.minCommittedLog
daikon.Quant.pairwiseEqual(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.superSecret == zksInstance.superSecret
zksInstance.serverCnxnFactory.zkServer.superSecret == zksInstance.syncProcessor.zks.superSecret
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionType-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
zksInstance.commitProcessor.finished == false
zksInstance.commitProcessor.matchSyncs == true
zksInstance.hzxid == 0
zksInstance.requestsInProcess == 0 || zksInstance.requestsInProcess == 1
zksInstance.self.OBSERVER_ID == 9223372036854775807L
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE == 20
zksInstance.self.bcVote.peerEpoch == 0 || zksInstance.self.bcVote.peerEpoch == 1
zksInstance.self.cnxnFactory.maxClientCnxns == 60
zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE != null
zksInstance.self.electionAlg.finalizeWait == 200
zksInstance.self.electionAlg.maxNotificationInterval == 60000
zksInstance.self.electionAlg.proposedLeader == 1 || zksInstance.self.electionAlg.proposedLeader == 2
zksInstance.self.electionAlg.proposedZxid == 0 || zksInstance.self.electionAlg.proposedZxid == 4294967298L
zksInstance.self.electionTimeTaken == 1 || zksInstance.self.electionTimeTaken == 225
zksInstance.self.electionType == 3
zksInstance.self.initLimit == 10
zksInstance.self.qcm.PACKETMAXSIZE == 524288
zksInstance.self.qcm.RECV_CAPACITY == 100
zksInstance.self.qcm.cnxTO == 5000
zksInstance.self.qcm.maxBuffer == 2048
zksInstance.self.qcm.socketTimeout == 20000
zksInstance.self.qcm.threadCnt == 4
zksInstance.self.syncLimit == 5
zksInstance.self.tickTime == 4000
zksInstance.self.zkDb.commitLogBuffer == 700
zksInstance.self.zkDb.commitLogCount == 500
zksInstance.self.zkDb.minCommittedLog == 0 || zksInstance.self.zkDb.minCommittedLog == 4294967297L
zksInstance.serverCnxnFactory.zkServer.superSecret == 3007405056L
zksInstance.serverStats.count >= 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 20 || zksInstance.serverStats.maxLatency == 85
zksInstance.serverStats.totalLatency >= 0
zksInstance.sessionTracker.nextSessionId == 72059353615892481L || zksInstance.sessionTracker.nextSessionId == 72059353653837824L || zksInstance.sessionTracker.nextSessionId == 72059353653837825L
zksInstance.syncProcessor.randRoll == 3145 || zksInstance.syncProcessor.randRoll == 11476
zksInstance.syncProcessor.requestOfDeath.createTime == 26849070
zksInstance.txnLogFactory.txnLog.currentSize == 0 || zksInstance.txnLogFactory.txnLog.currentSize == 67108880
zksInstance.txnLogFactory.txnLog.preAllocSize == 67108864
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 1
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 1 || daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 2
daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) == 1 || daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) == 2
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == null
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) != null
zksInstance.hzxid <= zksInstance.requestsInProcess
zksInstance.hzxid <= zksInstance.self.bcVote.peerEpoch
zksInstance.hzxid < zksInstance.self.electionAlg.proposedLeader
zksInstance.hzxid <= zksInstance.self.electionAlg.proposedZxid
zksInstance.hzxid < zksInstance.self.electionTimeTaken
zksInstance.hzxid <= zksInstance.self.zkDb.maxCommittedLog
zksInstance.hzxid <= zksInstance.self.zkDb.minCommittedLog
zksInstance.hzxid <= zksInstance.serverStats.minLatency
zksInstance.hzxid < zksInstance.syncProcessor.randRoll
zksInstance.hzxid <= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.hzxid >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.hzxid <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.hzxid <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.hzxid <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.hzxid >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.maxSessionTimeout < zksInstance.requestsInProcess
zksInstance.maxSessionTimeout < zksInstance.self.bcVote.peerEpoch
zksInstance.maxSessionTimeout < zksInstance.self.electionAlg.proposedLeader
zksInstance.maxSessionTimeout < zksInstance.self.electionAlg.proposedZxid
zksInstance.maxSessionTimeout < zksInstance.self.electionTimeTaken
zksInstance.maxSessionTimeout < zksInstance.self.zkDb.maxCommittedLog
zksInstance.maxSessionTimeout < zksInstance.self.zkDb.minCommittedLog
zksInstance.maxSessionTimeout < zksInstance.serverStats.count
zksInstance.maxSessionTimeout < zksInstance.serverStats.maxLatency
zksInstance.maxSessionTimeout < zksInstance.serverStats.minLatency
zksInstance.maxSessionTimeout < zksInstance.serverStats.packetsReceived
zksInstance.maxSessionTimeout < zksInstance.serverStats.packetsSent
zksInstance.maxSessionTimeout < zksInstance.serverStats.totalLatency
zksInstance.maxSessionTimeout < zksInstance.sessionTracker.nextSessionId
zksInstance.maxSessionTimeout < zksInstance.syncProcessor.randRoll
zksInstance.maxSessionTimeout < zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.maxSessionTimeout <= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.maxSessionTimeout <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.maxSessionTimeout <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.maxSessionTimeout <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess < zksInstance.self.OBSERVER_ID
zksInstance.requestsInProcess < zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE
zksInstance.requestsInProcess <= zksInstance.self.acceptedEpoch
zksInstance.requestsInProcess < zksInstance.self.cnxnFactory.maxClientCnxns
zksInstance.requestsInProcess < zksInstance.self.electionAlg.finalizeWait
zksInstance.requestsInProcess < zksInstance.self.electionAlg.maxNotificationInterval
zksInstance.requestsInProcess <= zksInstance.self.electionAlg.proposedLeader
zksInstance.requestsInProcess != zksInstance.self.electionAlg.proposedZxid
zksInstance.requestsInProcess <= zksInstance.self.electionTimeTaken
zksInstance.requestsInProcess < zksInstance.self.initLimit
zksInstance.requestsInProcess < zksInstance.self.qcm.PACKETMAXSIZE
zksInstance.requestsInProcess < zksInstance.self.qcm.RECV_CAPACITY
zksInstance.requestsInProcess < zksInstance.self.qcm.cnxTO
zksInstance.requestsInProcess < zksInstance.self.qcm.maxBuffer
zksInstance.requestsInProcess < zksInstance.self.qcm.socketTimeout
zksInstance.requestsInProcess < zksInstance.self.qcm.threadCnt
zksInstance.requestsInProcess < zksInstance.self.syncLimit
zksInstance.requestsInProcess < zksInstance.self.tickTime
zksInstance.requestsInProcess < zksInstance.self.zkDb.commitLogBuffer
zksInstance.requestsInProcess < zksInstance.self.zkDb.commitLogCount
zksInstance.requestsInProcess != zksInstance.self.zkDb.maxCommittedLog
zksInstance.requestsInProcess != zksInstance.self.zkDb.minCommittedLog
zksInstance.requestsInProcess < zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.requestsInProcess != zksInstance.serverStats.minLatency
zksInstance.requestsInProcess < zksInstance.syncProcessor.randRoll
zksInstance.requestsInProcess < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.requestsInProcess < zksInstance.syncProcessor.snapCount
zksInstance.requestsInProcess <= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.requestsInProcess >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.requestsInProcess >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.self.OBSERVER_ID > zksInstance.self.bcVote.peerEpoch
zksInstance.self.OBSERVER_ID > zksInstance.self.electionAlg.proposedLeader
zksInstance.self.OBSERVER_ID > zksInstance.self.electionAlg.proposedZxid
zksInstance.self.OBSERVER_ID > zksInstance.self.electionTimeTaken
zksInstance.self.OBSERVER_ID > zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.OBSERVER_ID > zksInstance.self.zkDb.minCommittedLog
zksInstance.self.OBSERVER_ID > zksInstance.serverStats.count
zksInstance.self.OBSERVER_ID > zksInstance.serverStats.maxLatency
zksInstance.self.OBSERVER_ID >= zksInstance.serverStats.minLatency
zksInstance.self.OBSERVER_ID > zksInstance.serverStats.packetsReceived
zksInstance.self.OBSERVER_ID > zksInstance.serverStats.packetsSent
zksInstance.self.OBSERVER_ID > zksInstance.serverStats.totalLatency
zksInstance.self.OBSERVER_ID > zksInstance.sessionTracker.nextSessionId
zksInstance.self.OBSERVER_ID > zksInstance.syncProcessor.randRoll
zksInstance.self.OBSERVER_ID > zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.OBSERVER_ID > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.OBSERVER_ID > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.OBSERVER_ID > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.OBSERVER_ID > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > zksInstance.self.bcVote.peerEpoch
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > zksInstance.self.electionAlg.proposedLeader
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != zksInstance.self.electionAlg.proposedZxid
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != zksInstance.self.electionTimeTaken
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > zksInstance.serverStats.count
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != zksInstance.serverStats.minLatency
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > zksInstance.serverStats.packetsReceived
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > zksInstance.serverStats.packetsSent
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != zksInstance.serverStats.totalLatency
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE < zksInstance.sessionTracker.nextSessionId
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE < zksInstance.syncProcessor.randRoll
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.acceptedEpoch >= zksInstance.self.bcVote.peerEpoch
zksInstance.self.acceptedEpoch <= zksInstance.self.electionAlg.proposedLeader
zksInstance.self.acceptedEpoch != zksInstance.self.electionAlg.proposedZxid
zksInstance.self.acceptedEpoch <= zksInstance.self.electionTimeTaken
zksInstance.self.acceptedEpoch != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.acceptedEpoch != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.acceptedEpoch != zksInstance.serverStats.maxLatency
zksInstance.self.acceptedEpoch <= zksInstance.serverStats.packetsReceived
zksInstance.self.acceptedEpoch <= zksInstance.serverStats.packetsSent
zksInstance.self.acceptedEpoch != zksInstance.serverStats.totalLatency
zksInstance.self.acceptedEpoch != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.acceptedEpoch >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.acceptedEpoch >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.acceptedEpoch >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.self.acceptedEpoch >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id >= zksInstance.self.electionAlg.proposedLeader
zksInstance.self.bcVote.id != zksInstance.self.electionAlg.proposedZxid
zksInstance.self.bcVote.id != zksInstance.self.electionTimeTaken
zksInstance.self.bcVote.id != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.bcVote.id != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.bcVote.id != zksInstance.serverStats.maxLatency
zksInstance.self.bcVote.id != zksInstance.serverStats.minLatency
zksInstance.self.bcVote.id != zksInstance.serverStats.totalLatency
zksInstance.self.bcVote.id != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.bcVote.id >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.peerEpoch < zksInstance.self.cnxnFactory.maxClientCnxns
zksInstance.self.bcVote.peerEpoch < zksInstance.self.electionAlg.finalizeWait
zksInstance.self.bcVote.peerEpoch < zksInstance.self.electionAlg.maxNotificationInterval
zksInstance.self.bcVote.peerEpoch <= zksInstance.self.electionAlg.proposedLeader
zksInstance.self.bcVote.peerEpoch <= zksInstance.self.electionAlg.proposedZxid
zksInstance.self.bcVote.peerEpoch <= zksInstance.self.electionTimeTaken
zksInstance.self.bcVote.peerEpoch < zksInstance.self.initLimit
zksInstance.self.bcVote.peerEpoch < zksInstance.self.qcm.PACKETMAXSIZE
zksInstance.self.bcVote.peerEpoch < zksInstance.self.qcm.RECV_CAPACITY
zksInstance.self.bcVote.peerEpoch < zksInstance.self.qcm.cnxTO
zksInstance.self.bcVote.peerEpoch < zksInstance.self.qcm.maxBuffer
zksInstance.self.bcVote.peerEpoch < zksInstance.self.qcm.socketTimeout
zksInstance.self.bcVote.peerEpoch < zksInstance.self.qcm.threadCnt
zksInstance.self.bcVote.peerEpoch < zksInstance.self.syncLimit
zksInstance.self.bcVote.peerEpoch < zksInstance.self.tickTime
zksInstance.self.bcVote.peerEpoch < zksInstance.self.zkDb.commitLogBuffer
zksInstance.self.bcVote.peerEpoch < zksInstance.self.zkDb.commitLogCount
zksInstance.self.bcVote.peerEpoch <= zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.bcVote.peerEpoch <= zksInstance.self.zkDb.minCommittedLog
zksInstance.self.bcVote.peerEpoch < zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.self.bcVote.peerEpoch <= zksInstance.serverStats.packetsReceived
zksInstance.self.bcVote.peerEpoch <= zksInstance.serverStats.packetsSent
zksInstance.self.bcVote.peerEpoch < zksInstance.sessionTracker.nextSessionId
zksInstance.self.bcVote.peerEpoch < zksInstance.syncProcessor.randRoll
zksInstance.self.bcVote.peerEpoch < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.self.bcVote.peerEpoch < zksInstance.syncProcessor.snapCount
zksInstance.self.bcVote.peerEpoch < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.self.bcVote.peerEpoch <= zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.bcVote.peerEpoch < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.self.bcVote.peerEpoch < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.self.bcVote.peerEpoch >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.peerEpoch >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.peerEpoch >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.peerEpoch >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.self.cnxnFactory.maxClientCnxns > zksInstance.self.electionAlg.proposedLeader
zksInstance.self.cnxnFactory.maxClientCnxns != zksInstance.self.electionAlg.proposedZxid
zksInstance.self.cnxnFactory.maxClientCnxns != zksInstance.self.electionTimeTaken
zksInstance.self.cnxnFactory.maxClientCnxns != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.cnxnFactory.maxClientCnxns != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.cnxnFactory.maxClientCnxns > zksInstance.serverStats.count
zksInstance.self.cnxnFactory.maxClientCnxns != zksInstance.serverStats.maxLatency
zksInstance.self.cnxnFactory.maxClientCnxns != zksInstance.serverStats.minLatency
zksInstance.self.cnxnFactory.maxClientCnxns % zksInstance.serverStats.packetsReceived == 0
zksInstance.self.cnxnFactory.maxClientCnxns > zksInstance.serverStats.packetsReceived
zksInstance.self.cnxnFactory.maxClientCnxns > zksInstance.serverStats.packetsSent
zksInstance.self.cnxnFactory.maxClientCnxns != zksInstance.serverStats.totalLatency
zksInstance.self.cnxnFactory.maxClientCnxns < zksInstance.sessionTracker.nextSessionId
zksInstance.self.cnxnFactory.maxClientCnxns < zksInstance.syncProcessor.randRoll
zksInstance.self.cnxnFactory.maxClientCnxns != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.cnxnFactory.maxClientCnxns > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.cnxnFactory.maxClientCnxns > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.cnxnFactory.maxClientCnxns > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.cnxnFactory.maxClientCnxns > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.finalizeWait > zksInstance.self.electionAlg.proposedLeader
zksInstance.self.electionAlg.finalizeWait != zksInstance.self.electionAlg.proposedZxid
zksInstance.self.electionAlg.finalizeWait != zksInstance.self.electionTimeTaken
zksInstance.self.electionAlg.finalizeWait != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.electionAlg.finalizeWait != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.electionAlg.finalizeWait > zksInstance.serverStats.count
zksInstance.self.electionAlg.finalizeWait > zksInstance.serverStats.maxLatency
zksInstance.self.electionAlg.finalizeWait != zksInstance.serverStats.minLatency
zksInstance.self.electionAlg.finalizeWait > zksInstance.serverStats.packetsReceived
zksInstance.self.electionAlg.finalizeWait > zksInstance.serverStats.packetsSent
zksInstance.self.electionAlg.finalizeWait > zksInstance.serverStats.totalLatency
zksInstance.self.electionAlg.finalizeWait < zksInstance.sessionTracker.nextSessionId
zksInstance.self.electionAlg.finalizeWait < zksInstance.syncProcessor.randRoll
zksInstance.self.electionAlg.finalizeWait != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.electionAlg.finalizeWait > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.finalizeWait > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.finalizeWait > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.finalizeWait > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.maxNotificationInterval > zksInstance.self.electionAlg.proposedLeader
zksInstance.self.electionAlg.maxNotificationInterval != zksInstance.self.electionAlg.proposedZxid
zksInstance.self.electionAlg.maxNotificationInterval > zksInstance.self.electionTimeTaken
zksInstance.self.electionAlg.maxNotificationInterval != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.electionAlg.maxNotificationInterval != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.electionAlg.maxNotificationInterval > zksInstance.serverStats.count
zksInstance.self.electionAlg.maxNotificationInterval > zksInstance.serverStats.maxLatency
zksInstance.self.electionAlg.maxNotificationInterval != zksInstance.serverStats.minLatency
zksInstance.self.electionAlg.maxNotificationInterval % zksInstance.serverStats.packetsReceived == 0
zksInstance.self.electionAlg.maxNotificationInterval > zksInstance.serverStats.packetsReceived
zksInstance.self.electionAlg.maxNotificationInterval > zksInstance.serverStats.packetsSent
zksInstance.self.electionAlg.maxNotificationInterval > zksInstance.serverStats.totalLatency
zksInstance.self.electionAlg.maxNotificationInterval < zksInstance.sessionTracker.nextSessionId
zksInstance.self.electionAlg.maxNotificationInterval > zksInstance.syncProcessor.randRoll
zksInstance.self.electionAlg.maxNotificationInterval != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.electionAlg.maxNotificationInterval > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.maxNotificationInterval > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.maxNotificationInterval > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.maxNotificationInterval > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedLeader != zksInstance.self.electionAlg.proposedZxid
zksInstance.self.electionAlg.proposedLeader <= zksInstance.self.electionTimeTaken
zksInstance.self.electionAlg.proposedLeader < zksInstance.self.initLimit
zksInstance.self.electionAlg.proposedLeader < zksInstance.self.qcm.PACKETMAXSIZE
zksInstance.self.electionAlg.proposedLeader < zksInstance.self.qcm.RECV_CAPACITY
zksInstance.self.electionAlg.proposedLeader < zksInstance.self.qcm.cnxTO
zksInstance.self.electionAlg.proposedLeader < zksInstance.self.qcm.maxBuffer
zksInstance.self.electionAlg.proposedLeader < zksInstance.self.qcm.socketTimeout
zksInstance.self.electionAlg.proposedLeader < zksInstance.self.qcm.threadCnt
zksInstance.self.electionAlg.proposedLeader < zksInstance.self.syncLimit
zksInstance.self.electionAlg.proposedLeader < zksInstance.self.tickTime
zksInstance.self.electionAlg.proposedLeader < zksInstance.self.zkDb.commitLogBuffer
zksInstance.self.electionAlg.proposedLeader < zksInstance.self.zkDb.commitLogCount
zksInstance.self.electionAlg.proposedLeader != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.electionAlg.proposedLeader != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.electionAlg.proposedLeader < zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.self.electionAlg.proposedLeader != zksInstance.serverStats.maxLatency
zksInstance.self.electionAlg.proposedLeader <= zksInstance.serverStats.packetsReceived
zksInstance.self.electionAlg.proposedLeader != zksInstance.serverStats.totalLatency
zksInstance.self.electionAlg.proposedLeader < zksInstance.sessionTracker.nextSessionId
zksInstance.self.electionAlg.proposedLeader < zksInstance.syncProcessor.randRoll
zksInstance.self.electionAlg.proposedLeader < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.self.electionAlg.proposedLeader < zksInstance.syncProcessor.snapCount
zksInstance.self.electionAlg.proposedLeader < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.self.electionAlg.proposedLeader != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.electionAlg.proposedLeader < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.self.electionAlg.proposedLeader < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.self.electionAlg.proposedLeader >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedLeader >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 % zksInstance.self.electionAlg.proposedLeader == 0
zksInstance.self.electionAlg.proposedLeader >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.self.electionAlg.proposedLeader >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedZxid != zksInstance.self.electionTimeTaken
zksInstance.self.electionAlg.proposedZxid != zksInstance.self.electionType
zksInstance.self.electionAlg.proposedZxid != zksInstance.self.initLimit
zksInstance.self.electionAlg.proposedZxid != zksInstance.self.qcm.PACKETMAXSIZE
zksInstance.self.electionAlg.proposedZxid != zksInstance.self.qcm.RECV_CAPACITY
zksInstance.self.electionAlg.proposedZxid != zksInstance.self.qcm.cnxTO
zksInstance.self.electionAlg.proposedZxid != zksInstance.self.qcm.maxBuffer
zksInstance.self.electionAlg.proposedZxid != zksInstance.self.qcm.socketTimeout
zksInstance.self.electionAlg.proposedZxid != zksInstance.self.qcm.threadCnt
zksInstance.self.electionAlg.proposedZxid != zksInstance.self.syncLimit
zksInstance.self.electionAlg.proposedZxid != zksInstance.self.tickTime
zksInstance.self.electionAlg.proposedZxid != zksInstance.self.zkDb.commitLogBuffer
zksInstance.self.electionAlg.proposedZxid != zksInstance.self.zkDb.commitLogCount
zksInstance.self.electionAlg.proposedZxid <= zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.electionAlg.proposedZxid != zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.self.electionAlg.proposedZxid != zksInstance.serverStats.minLatency
zksInstance.self.electionAlg.proposedZxid != zksInstance.serverStats.packetsReceived
zksInstance.self.electionAlg.proposedZxid != zksInstance.serverStats.packetsSent
zksInstance.self.electionAlg.proposedZxid < zksInstance.sessionTracker.nextSessionId
zksInstance.self.electionAlg.proposedZxid != zksInstance.syncProcessor.randRoll
zksInstance.self.electionAlg.proposedZxid != zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.self.electionAlg.proposedZxid != zksInstance.syncProcessor.snapCount
zksInstance.self.electionAlg.proposedZxid != zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.self.electionAlg.proposedZxid != zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.self.electionAlg.proposedZxid != zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.self.electionAlg.proposedZxid != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedZxid >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.electionAlg.proposedZxid >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.electionAlg.proposedZxid != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedZxid >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.self.electionAlg.proposedZxid >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.self.electionTimeTaken != zksInstance.self.electionType
zksInstance.self.electionTimeTaken != zksInstance.self.initLimit
zksInstance.self.electionTimeTaken < zksInstance.self.qcm.PACKETMAXSIZE
zksInstance.self.electionTimeTaken != zksInstance.self.qcm.RECV_CAPACITY
zksInstance.self.electionTimeTaken < zksInstance.self.qcm.cnxTO
zksInstance.self.electionTimeTaken < zksInstance.self.qcm.maxBuffer
zksInstance.self.electionTimeTaken < zksInstance.self.qcm.socketTimeout
zksInstance.self.electionTimeTaken != zksInstance.self.qcm.threadCnt
zksInstance.self.electionTimeTaken != zksInstance.self.syncLimit
zksInstance.self.electionTimeTaken < zksInstance.self.tickTime
zksInstance.self.electionTimeTaken < zksInstance.self.zkDb.commitLogBuffer
zksInstance.self.electionTimeTaken < zksInstance.self.zkDb.commitLogCount
zksInstance.self.electionTimeTaken != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.electionTimeTaken != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.electionTimeTaken < zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.self.electionTimeTaken != zksInstance.serverStats.count
zksInstance.self.electionTimeTaken != zksInstance.serverStats.maxLatency
zksInstance.self.electionTimeTaken != zksInstance.serverStats.totalLatency
zksInstance.self.electionTimeTaken < zksInstance.sessionTracker.nextSessionId
zksInstance.self.electionTimeTaken < zksInstance.syncProcessor.randRoll
zksInstance.self.electionTimeTaken < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.self.electionTimeTaken < zksInstance.syncProcessor.snapCount
zksInstance.self.electionTimeTaken < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.self.electionTimeTaken != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.electionTimeTaken < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.self.electionTimeTaken < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.self.electionTimeTaken >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.electionTimeTaken >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 % zksInstance.self.electionTimeTaken == 0
zksInstance.self.electionTimeTaken >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.self.electionTimeTaken >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.electionType != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.electionType != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.electionType >= zksInstance.serverStats.count
zksInstance.self.electionType != zksInstance.serverStats.maxLatency
zksInstance.self.electionType != zksInstance.serverStats.minLatency
zksInstance.self.electionType != zksInstance.serverStats.totalLatency
zksInstance.self.electionType < zksInstance.sessionTracker.nextSessionId
zksInstance.self.electionType < zksInstance.syncProcessor.randRoll
zksInstance.self.electionType != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.initLimit != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.initLimit != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.initLimit > zksInstance.serverStats.count
zksInstance.self.initLimit != zksInstance.serverStats.maxLatency
zksInstance.self.initLimit != zksInstance.serverStats.minLatency
zksInstance.self.initLimit > zksInstance.serverStats.packetsReceived
zksInstance.self.initLimit > zksInstance.serverStats.packetsSent
zksInstance.self.initLimit != zksInstance.serverStats.totalLatency
zksInstance.self.initLimit < zksInstance.sessionTracker.nextSessionId
zksInstance.self.initLimit < zksInstance.syncProcessor.randRoll
zksInstance.self.initLimit != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.initLimit > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.initLimit > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.initLimit > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.initLimit > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.qcm.PACKETMAXSIZE != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.qcm.PACKETMAXSIZE != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.qcm.PACKETMAXSIZE > zksInstance.serverStats.count
zksInstance.self.qcm.PACKETMAXSIZE > zksInstance.serverStats.maxLatency
zksInstance.self.qcm.PACKETMAXSIZE != zksInstance.serverStats.minLatency
zksInstance.self.qcm.PACKETMAXSIZE > zksInstance.serverStats.packetsReceived
zksInstance.self.qcm.PACKETMAXSIZE > zksInstance.serverStats.packetsSent
zksInstance.self.qcm.PACKETMAXSIZE > zksInstance.serverStats.totalLatency
zksInstance.self.qcm.PACKETMAXSIZE < zksInstance.sessionTracker.nextSessionId
zksInstance.self.qcm.PACKETMAXSIZE > zksInstance.syncProcessor.randRoll
zksInstance.self.qcm.PACKETMAXSIZE != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.qcm.PACKETMAXSIZE > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.PACKETMAXSIZE > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.qcm.PACKETMAXSIZE > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.qcm.PACKETMAXSIZE > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.qcm.RECV_CAPACITY != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.qcm.RECV_CAPACITY != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.qcm.RECV_CAPACITY > zksInstance.serverStats.count
zksInstance.self.qcm.RECV_CAPACITY > zksInstance.serverStats.maxLatency
zksInstance.self.qcm.RECV_CAPACITY != zksInstance.serverStats.minLatency
zksInstance.self.qcm.RECV_CAPACITY > zksInstance.serverStats.packetsReceived
zksInstance.self.qcm.RECV_CAPACITY > zksInstance.serverStats.packetsSent
zksInstance.self.qcm.RECV_CAPACITY != zksInstance.serverStats.totalLatency
zksInstance.self.qcm.RECV_CAPACITY < zksInstance.sessionTracker.nextSessionId
zksInstance.self.qcm.RECV_CAPACITY < zksInstance.syncProcessor.randRoll
zksInstance.self.qcm.RECV_CAPACITY != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.qcm.RECV_CAPACITY > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.RECV_CAPACITY > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.qcm.RECV_CAPACITY > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.qcm.RECV_CAPACITY > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.qcm.cnxTO != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.qcm.cnxTO != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.qcm.cnxTO > zksInstance.serverStats.count
zksInstance.self.qcm.cnxTO > zksInstance.serverStats.maxLatency
zksInstance.self.qcm.cnxTO != zksInstance.serverStats.minLatency
zksInstance.self.qcm.cnxTO > zksInstance.serverStats.packetsReceived
zksInstance.self.qcm.cnxTO > zksInstance.serverStats.packetsSent
zksInstance.self.qcm.cnxTO > zksInstance.serverStats.totalLatency
zksInstance.self.qcm.cnxTO < zksInstance.sessionTracker.nextSessionId
zksInstance.self.qcm.cnxTO != zksInstance.syncProcessor.randRoll
zksInstance.self.qcm.cnxTO != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.qcm.cnxTO > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.cnxTO > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.qcm.cnxTO > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.qcm.cnxTO > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.self.qcm.maxBuffer != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.qcm.maxBuffer != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.qcm.maxBuffer > zksInstance.serverStats.count
zksInstance.self.qcm.maxBuffer > zksInstance.serverStats.maxLatency
zksInstance.self.qcm.maxBuffer != zksInstance.serverStats.minLatency
zksInstance.self.qcm.maxBuffer > zksInstance.serverStats.packetsReceived
zksInstance.self.qcm.maxBuffer > zksInstance.serverStats.packetsSent
zksInstance.self.qcm.maxBuffer > zksInstance.serverStats.totalLatency
zksInstance.self.qcm.maxBuffer < zksInstance.sessionTracker.nextSessionId
zksInstance.self.qcm.maxBuffer < zksInstance.syncProcessor.randRoll
zksInstance.self.qcm.maxBuffer != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.qcm.maxBuffer > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.maxBuffer > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.qcm.maxBuffer > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.qcm.maxBuffer > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.qcm.socketTimeout != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.qcm.socketTimeout != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.qcm.socketTimeout > zksInstance.serverStats.count
zksInstance.self.qcm.socketTimeout > zksInstance.serverStats.maxLatency
zksInstance.self.qcm.socketTimeout != zksInstance.serverStats.minLatency
zksInstance.self.qcm.socketTimeout > zksInstance.serverStats.packetsReceived
zksInstance.self.qcm.socketTimeout > zksInstance.serverStats.packetsSent
zksInstance.self.qcm.socketTimeout > zksInstance.serverStats.totalLatency
zksInstance.self.qcm.socketTimeout < zksInstance.sessionTracker.nextSessionId
zksInstance.self.qcm.socketTimeout > zksInstance.syncProcessor.randRoll
zksInstance.self.qcm.socketTimeout != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.qcm.socketTimeout > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.socketTimeout > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.qcm.socketTimeout > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.qcm.socketTimeout > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.qcm.threadCnt != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.qcm.threadCnt > zksInstance.serverStats.count
zksInstance.self.qcm.threadCnt != zksInstance.serverStats.maxLatency
zksInstance.self.qcm.threadCnt != zksInstance.serverStats.minLatency
zksInstance.self.qcm.threadCnt >= zksInstance.serverStats.packetsSent
zksInstance.self.qcm.threadCnt != zksInstance.serverStats.totalLatency
zksInstance.self.qcm.threadCnt < zksInstance.sessionTracker.nextSessionId
zksInstance.self.qcm.threadCnt < zksInstance.syncProcessor.randRoll
zksInstance.self.qcm.threadCnt != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.qcm.threadCnt > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.syncLimit != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.syncLimit != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.syncLimit > zksInstance.serverStats.count
zksInstance.self.syncLimit != zksInstance.serverStats.maxLatency
zksInstance.self.syncLimit != zksInstance.serverStats.minLatency
zksInstance.self.syncLimit >= zksInstance.serverStats.packetsReceived
zksInstance.self.syncLimit > zksInstance.serverStats.packetsSent
zksInstance.self.syncLimit != zksInstance.serverStats.totalLatency
zksInstance.self.syncLimit < zksInstance.sessionTracker.nextSessionId
zksInstance.self.syncLimit < zksInstance.syncProcessor.randRoll
zksInstance.self.syncLimit != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.syncLimit > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.syncLimit > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.syncLimit > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.syncLimit > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.tickTime != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.tickTime != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.tickTime > zksInstance.serverStats.count
zksInstance.self.tickTime > zksInstance.serverStats.maxLatency
zksInstance.self.tickTime != zksInstance.serverStats.minLatency
zksInstance.self.tickTime > zksInstance.serverStats.packetsReceived
zksInstance.self.tickTime > zksInstance.serverStats.packetsSent
zksInstance.self.tickTime > zksInstance.serverStats.totalLatency
zksInstance.self.tickTime < zksInstance.sessionTracker.nextSessionId
zksInstance.self.tickTime != zksInstance.syncProcessor.randRoll
zksInstance.self.tickTime != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.tickTime > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.tickTime > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.tickTime > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.tickTime > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.commitLogBuffer != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.zkDb.commitLogBuffer != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.zkDb.commitLogBuffer > zksInstance.serverStats.count
zksInstance.self.zkDb.commitLogBuffer > zksInstance.serverStats.maxLatency
zksInstance.self.zkDb.commitLogBuffer != zksInstance.serverStats.minLatency
zksInstance.self.zkDb.commitLogBuffer > zksInstance.serverStats.packetsReceived
zksInstance.self.zkDb.commitLogBuffer > zksInstance.serverStats.packetsSent
zksInstance.self.zkDb.commitLogBuffer > zksInstance.serverStats.totalLatency
zksInstance.self.zkDb.commitLogBuffer < zksInstance.sessionTracker.nextSessionId
zksInstance.self.zkDb.commitLogBuffer < zksInstance.syncProcessor.randRoll
zksInstance.self.zkDb.commitLogBuffer != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.zkDb.commitLogBuffer > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.commitLogBuffer > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.commitLogBuffer > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.commitLogBuffer > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.commitLogCount != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.zkDb.commitLogCount != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.zkDb.commitLogCount > zksInstance.serverStats.count
zksInstance.self.zkDb.commitLogCount > zksInstance.serverStats.maxLatency
zksInstance.self.zkDb.commitLogCount != zksInstance.serverStats.minLatency
zksInstance.self.zkDb.commitLogCount > zksInstance.serverStats.packetsReceived
zksInstance.self.zkDb.commitLogCount > zksInstance.serverStats.packetsSent
zksInstance.self.zkDb.commitLogCount > zksInstance.serverStats.totalLatency
zksInstance.self.zkDb.commitLogCount < zksInstance.sessionTracker.nextSessionId
zksInstance.self.zkDb.commitLogCount < zksInstance.syncProcessor.randRoll
zksInstance.self.zkDb.commitLogCount != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.zkDb.commitLogCount > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.commitLogCount > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.commitLogCount > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.commitLogCount > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog >= zksInstance.self.zkDb.minCommittedLog
zksInstance.self.zkDb.maxCommittedLog != zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.self.zkDb.maxCommittedLog >= zksInstance.serverStats.count
zksInstance.self.zkDb.maxCommittedLog >= zksInstance.serverStats.maxLatency
zksInstance.self.zkDb.maxCommittedLog != zksInstance.serverStats.minLatency
zksInstance.self.zkDb.maxCommittedLog != zksInstance.serverStats.packetsReceived
zksInstance.self.zkDb.maxCommittedLog != zksInstance.serverStats.packetsSent
zksInstance.self.zkDb.maxCommittedLog >= zksInstance.serverStats.totalLatency
zksInstance.self.zkDb.maxCommittedLog < zksInstance.sessionTracker.nextSessionId
zksInstance.self.zkDb.maxCommittedLog != zksInstance.syncProcessor.randRoll
zksInstance.self.zkDb.maxCommittedLog != zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.self.zkDb.maxCommittedLog != zksInstance.syncProcessor.snapCount
zksInstance.self.zkDb.maxCommittedLog != zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.self.zkDb.maxCommittedLog >= zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.zkDb.maxCommittedLog != zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.self.zkDb.maxCommittedLog != zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog != zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.self.zkDb.minCommittedLog >= zksInstance.serverStats.count
zksInstance.self.zkDb.minCommittedLog >= zksInstance.serverStats.maxLatency
zksInstance.self.zkDb.minCommittedLog != zksInstance.serverStats.minLatency
zksInstance.self.zkDb.minCommittedLog != zksInstance.serverStats.packetsReceived
zksInstance.self.zkDb.minCommittedLog != zksInstance.serverStats.packetsSent
zksInstance.self.zkDb.minCommittedLog >= zksInstance.serverStats.totalLatency
zksInstance.self.zkDb.minCommittedLog < zksInstance.sessionTracker.nextSessionId
zksInstance.self.zkDb.minCommittedLog != zksInstance.syncProcessor.randRoll
zksInstance.self.zkDb.minCommittedLog != zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.self.zkDb.minCommittedLog != zksInstance.syncProcessor.snapCount
zksInstance.self.zkDb.minCommittedLog != zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.self.zkDb.minCommittedLog >= zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.zkDb.minCommittedLog != zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.self.zkDb.minCommittedLog != zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.superSecret > zksInstance.serverStats.count
zksInstance.serverCnxnFactory.zkServer.superSecret > zksInstance.serverStats.maxLatency
zksInstance.serverCnxnFactory.zkServer.superSecret != zksInstance.serverStats.minLatency
zksInstance.serverCnxnFactory.zkServer.superSecret > zksInstance.serverStats.packetsReceived
zksInstance.serverCnxnFactory.zkServer.superSecret > zksInstance.serverStats.packetsSent
zksInstance.serverCnxnFactory.zkServer.superSecret > zksInstance.serverStats.totalLatency
zksInstance.serverCnxnFactory.zkServer.superSecret < zksInstance.sessionTracker.nextSessionId
zksInstance.serverCnxnFactory.zkServer.superSecret > zksInstance.syncProcessor.randRoll
zksInstance.serverCnxnFactory.zkServer.superSecret > zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.serverCnxnFactory.zkServer.superSecret > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.superSecret > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.superSecret > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.superSecret > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.serverStats.count < zksInstance.syncProcessor.randRoll
zksInstance.serverStats.count < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.serverStats.count < zksInstance.syncProcessor.snapCount
zksInstance.serverStats.count >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.count >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.count >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.serverStats.maxLatency < zksInstance.syncProcessor.randRoll
zksInstance.serverStats.maxLatency < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.serverStats.maxLatency < zksInstance.syncProcessor.snapCount
zksInstance.serverStats.maxLatency >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.maxLatency >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.maxLatency >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.serverStats.minLatency != zksInstance.serverStats.packetsSent
zksInstance.serverStats.minLatency != zksInstance.syncProcessor.randRoll
zksInstance.serverStats.minLatency != zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.serverStats.minLatency != zksInstance.syncProcessor.snapCount
zksInstance.serverStats.minLatency >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.minLatency >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.serverStats.minLatency >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.minLatency >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsReceived >= zksInstance.serverStats.packetsSent
zksInstance.serverStats.packetsReceived < zksInstance.syncProcessor.randRoll
zksInstance.serverStats.packetsReceived < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.serverStats.packetsReceived < zksInstance.syncProcessor.snapCount
zksInstance.serverStats.packetsReceived > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 % zksInstance.serverStats.packetsReceived == 0
zksInstance.serverStats.packetsReceived >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsReceived >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsReceived > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsSent < zksInstance.syncProcessor.randRoll
zksInstance.serverStats.packetsSent < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.serverStats.packetsSent < zksInstance.syncProcessor.snapCount
zksInstance.serverStats.packetsSent >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 % zksInstance.serverStats.packetsSent == 0
zksInstance.serverStats.packetsSent >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsSent >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.packetsSent > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.serverStats.totalLatency < zksInstance.syncProcessor.randRoll
zksInstance.serverStats.totalLatency < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.serverStats.totalLatency < zksInstance.syncProcessor.snapCount
zksInstance.serverStats.totalLatency >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.totalLatency >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.totalLatency >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextSessionId > zksInstance.syncProcessor.randRoll
zksInstance.sessionTracker.nextSessionId > zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.sessionTracker.nextSessionId > zksInstance.syncProcessor.snapCount
zksInstance.sessionTracker.nextSessionId > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextSessionId > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextSessionId > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextSessionId > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.randRoll < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.syncProcessor.randRoll < zksInstance.syncProcessor.snapCount
zksInstance.syncProcessor.randRoll < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.syncProcessor.randRoll != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.syncProcessor.randRoll > zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.syncProcessor.randRoll < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.syncProcessor.randRoll > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.randRoll > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.randRoll > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.randRoll > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.requestOfDeath.createTime != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.syncProcessor.requestOfDeath.createTime > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.requestOfDeath.createTime > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.requestOfDeath.createTime > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.requestOfDeath.createTime > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.snapCount != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.syncProcessor.snapCount > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.snapCount > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.snapCount > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.snapCount > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.currentSize >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.currentSize >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.preAllocSize > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.preAllocSize > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.preAllocSize > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.preAllocSize > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess + zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + 1 == 0
zksInstance.requestsInProcess - zksInstance.serverStats.packetsReceived + zksInstance.serverStats.packetsSent == 0
75890687 * zksInstance.requestsInProcess + zksInstance.sessionTracker.nextSessionId - 37945344 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 7.2059353653837824E16 == 0
75890687 * zksInstance.requestsInProcess + zksInstance.sessionTracker.nextSessionId - 37945344 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 7.2059353691783168E16 == 0
75890687 * zksInstance.self.bcVote.peerEpoch - 2 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) + 1.4411870723178496E17 == 0
75890687 * zksInstance.self.bcVote.peerEpoch - 2 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 + 1.4411870723178496E17 == 0
75890687 * zksInstance.self.electionAlg.proposedLeader + 2 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 1.44118707383566336E17 == 0
75890687 * zksInstance.self.electionAlg.proposedLeader + 2 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 1.44118707383566336E17 == 0
37945344 * zksInstance.serverStats.maxLatency + 85 * zksInstance.sessionTracker.nextSessionId - 3.22535424E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 6.1250450573508608E18 == 0
37945344 * zksInstance.serverStats.maxLatency + 85 * zksInstance.sessionTracker.nextSessionId - 3.22535424E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 6.125045060576215E18 == 0
37945343 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 75890686 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 7.2059353691783168E16 == 0
37945343 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 75890686 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 7.2059353767673856E16 == 0
zksInstance.sessionTracker.nextSessionId + 75890687 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 37945344 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 7.2059353653837824E16 == 0
zksInstance.sessionTracker.nextSessionId + 75890687 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 37945344 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 7.2059353691783168E16 == 0
zksInstance.sessionTracker.nextSessionId + 75890687 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 37945344 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 7.2059353577947136E16 == 0
zksInstance.sessionTracker.nextSessionId + 75890687 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 37945344 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 7.205935361589248E16 == 0
zksInstance.sessionTracker.nextSessionId - 75890687 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 37945343 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 7.2059353653837824E16 == 0
zksInstance.sessionTracker.nextSessionId - 75890687 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 37945343 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 7.205935361589248E16 == 0
zksInstance.sessionTracker.nextSessionId - 75890687 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 37945343 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 7.2059353729728512E16 == 0
zksInstance.sessionTracker.nextSessionId - 75890687 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 37945343 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 7.2059353691783168E16 == 0
2 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) + 75890687 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 1.44118707307675648E17 == 0
2 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) + 75890687 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 - 1.4411870723178496E17 == 0
2 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 + 75890687 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 1.44118707307675648E17 == 0
2 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 + 75890687 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 - 1.4411870723178496E17 == 0
zksInstance.hzxid == zksInstance.self.bcVote.peerEpoch
zksInstance.hzxid == zksInstance.self.electionAlg.proposedEpoch
zksInstance.hzxid == zksInstance.self.electionAlg.proposedZxid
zksInstance.hzxid == daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.hzxid == daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.hzxid == daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)-1
zksInstance.hzxid == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.hzxid == daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess == zksInstance.self.acceptedEpoch
zksInstance.requestsInProcess == zksInstance.self.bcVote.electionEpoch
zksInstance.requestsInProcess == zksInstance.self.currentEpoch
zksInstance.requestsInProcess == zksInstance.self.currentVote.electionEpoch
zksInstance.requestsInProcess == zksInstance.self.currentVote.peerEpoch
zksInstance.requestsInProcess == zksInstance.self.electionAlg.logicalclock
zksInstance.requestsInProcess == zksInstance.self.myid
zksInstance.requestsInProcess == zksInstance.self.qcm.SEND_CAPACITY
zksInstance.requestsInProcess == zksInstance.self.qcm.mySid
zksInstance.requestsInProcess == zksInstance.self.quorumConfig.half
zksInstance.requestsInProcess == zksInstance.sessionTracker.serverId
zksInstance.requestsInProcess == daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.requestsInProcess == daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.requestsInProcess == daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.requestsInProcess == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.requestsInProcess == daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess == daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess == daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id == zksInstance.self.electionAlg.proposedLeader
zksInstance.self.bcVote.id == zksInstance.self.qcm.threadCnt
zksInstance.self.bcVote.id == daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id == daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
daikon.Quant.pairwiseEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.threadCnt-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.threadCnt-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
zksInstance.self.bcVote.id == 2
daikon.Quant.eltsNotEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, null)
zksInstance.self.electionTimeTaken == 203
daikon.Quant.eltsNotEqual(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, null)
zksInstance.self.zkDb.maxCommittedLog == 0 || zksInstance.self.zkDb.maxCommittedLog == 4294967297L || zksInstance.self.zkDb.maxCommittedLog == 4294967298L
daikon.Quant.eltsNotEqual(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, null)
zksInstance.serverStats.count == 0 || zksInstance.serverStats.count == 1 || zksInstance.serverStats.count == 3
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 26
zksInstance.serverStats.minLatency == 0 || zksInstance.serverStats.minLatency == 26 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.packetsReceived == 2 || zksInstance.serverStats.packetsReceived == 3 || zksInstance.serverStats.packetsReceived == 5
zksInstance.serverStats.packetsSent == 1 || zksInstance.serverStats.packetsSent == 2 || zksInstance.serverStats.packetsSent == 4
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 26 || zksInstance.serverStats.totalLatency == 46
zksInstance.sessionTracker.nextSessionId == 72059337446719489L
zksInstance.syncProcessor.randRoll == 5836
zksInstance.syncProcessor.requestOfDeath.createTime == 26425559
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 1
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) != null
daikon.Quant.subsetOf(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid))
daikon.Quant.subsetOf(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid))
daikon.Quant.subsetOf(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid))
zksInstance.commitProcessor.finished == zksInstance.firstProcessor.failCreate
zksInstance.commitProcessor.matchSyncs == zksInstance.firstProcessor.failCreate
zksInstance.firstProcessor.finished == zksInstance.zkDb.dataTree.initialized
zksInstance.firstProcessor.zks.hzxid == zksInstance.hzxid
zksInstance.firstProcessor.zks.hzxid == zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.firstProcessor.zks.maxSessionTimeout == zksInstance.firstProcessor.zks.minSessionTimeout
zksInstance.firstProcessor.zks.maxSessionTimeout == zksInstance.maxSessionTimeout
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.requestsInProcess
zksInstance.firstProcessor.zks.superSecret == zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.firstProcessor.zks.tickTime == zksInstance.self.tickTime
zksInstance.firstProcessor.zks.tickTime == zksInstance.sessionTracker.expirationInterval
zksInstance.hzxid == zksInstance.sessionTracker.serverId
zksInstance.maxSessionTimeout == daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.self.$assertionsDisabled == zksInstance.self.running
zksInstance.self.$assertionsDisabled == zksInstance.self.syncEnabled
zksInstance.self.$assertionsDisabled == zksInstance.self.zkDb.initialized
zksInstance.self.$assertionsDisabled == zksInstance.sessionTracker.running
zksInstance.self.$assertionsDisabled == zksInstance.syncProcessor.running
zksInstance.self.$assertionsDisabled == zksInstance.txnLogFactory.txnLog.forceSync
zksInstance.self.$assertionsDisabled == zksInstance.zkDb.dataTree.$assertionsDisabled
zksInstance.self.$assertionsDisabled == zksInstance.zkDb.initialized
zksInstance.self.bcVote.electionEpoch == zksInstance.self.currentVote.electionEpoch
zksInstance.self.bcVote.electionEpoch == zksInstance.self.electionAlg.logicalclock
zksInstance.self.bcVote.electionEpoch == zksInstance.self.qcm.SEND_CAPACITY
zksInstance.self.bcVote.electionEpoch == zksInstance.self.quorumConfig.half
zksInstance.self.bcVote.electionEpoch == zksInstance.serverStats.packetsReceived
zksInstance.self.bcVote.electionEpoch == daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.electionEpoch == daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.electionEpoch == daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.electionEpoch == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.electionEpoch == daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.version == zksInstance.self.currentVote.version
zksInstance.self.bcVote.version == zksInstance.self.end_fle
zksInstance.self.bcVote.version == zksInstance.self.qcm.connectionThreadCnt
zksInstance.self.bcVote.version == zksInstance.self.start_fle
zksInstance.self.bcVote.version == zksInstance.sessionTracker.serverId
zksInstance.self.bcVote.version == zksInstance.txnLogFactory.txnLog.dbId
zksInstance.self.bcVote.version == zksInstance.zkDb.dataTree.scount
zksInstance.self.bcVote.version == daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.version == daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.version == daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.version == daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.zxid == zksInstance.self.currentVote.zxid
zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE == zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE
zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE == zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE
zksInstance.self.electionAlg.proposedLeader == zksInstance.self.myid
zksInstance.self.electionAlg.proposedLeader == zksInstance.self.qcm.mySid
zksInstance.self.electionAlg.proposedLeader == zksInstance.sessionTracker.serverId
zksInstance.self.tick == zksInstance.sessionTracker.serverId
zksInstance.self.zkDb.maxCommittedLog == zksInstance.sessionTracker.serverId
zksInstance.self.zkDb.minCommittedLog == zksInstance.sessionTracker.serverId
zksInstance.serverStats.count == zksInstance.sessionTracker.serverId
zksInstance.serverStats.maxLatency == zksInstance.sessionTracker.serverId
zksInstance.sessionTracker.serverId == zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.sessionTracker.serverId == zksInstance.syncProcessor.requestOfDeath.sessionId
zksInstance.sessionTracker.serverId == zksInstance.syncProcessor.requestOfDeath.type
zksInstance.sessionTracker.serverId == zksInstance.syncProcessor.zks.hzxid
zksInstance.sessionTracker.serverId == zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.sessionTracker.serverId == zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.sessionTracker.serverId == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.serverId == daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.pairwiseEqual(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.requestOfDeath.zxid == zksInstance.syncProcessor.zks.maxSessionTimeout
zksInstance.syncProcessor.requestOfDeath.zxid == zksInstance.syncProcessor.zks.minSessionTimeout
zksInstance.syncProcessor.requestOfDeath.zxid == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.requestOfDeath.zxid == daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionType-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
zksInstance.firstProcessor.finished == false
zksInstance.firstProcessor.zks.maxSessionTimeout == -1
zksInstance.firstProcessor.zks.requestsInProcess == 0 || zksInstance.firstProcessor.zks.requestsInProcess == 1
zksInstance.firstProcessor.zks.superSecret == 3007405056L
zksInstance.firstProcessor.zks.tickTime == 4000
zksInstance.self.$assertionsDisabled == true
zksInstance.self.acceptedEpoch == 1 || zksInstance.self.acceptedEpoch == 2
zksInstance.self.bcVote.peerEpoch == 0 || zksInstance.self.bcVote.peerEpoch == 2
zksInstance.self.bcVote.zxid == 0 || zksInstance.self.bcVote.zxid == 4294967301L
zksInstance.self.electionAlg.proposedLeader == 0 || zksInstance.self.electionAlg.proposedLeader == 2
zksInstance.self.electionAlg.proposedZxid == 0 || zksInstance.self.electionAlg.proposedZxid == 8589934592L
zksInstance.self.electionTimeTaken == 3 || zksInstance.self.electionTimeTaken == 206
zksInstance.self.tick == 0 || zksInstance.self.tick == 1
zksInstance.serverStats.count == 0 || zksInstance.serverStats.count == 1
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 42
zksInstance.serverStats.minLatency == 42 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.packetsSent == 0 || zksInstance.serverStats.packetsSent == 1
zksInstance.sessionTracker.currentTime == 26605796 || zksInstance.sessionTracker.currentTime == 26608000
zksInstance.sessionTracker.nextExpirationTime == 26608000 || zksInstance.sessionTracker.nextExpirationTime == 26612000
zksInstance.sessionTracker.nextSessionId == 1744443146240L || zksInstance.sessionTracker.nextSessionId == 144116931713302529L
zksInstance.sessionTracker.serverId == 0
zksInstance.syncProcessor.randRoll == 28087
zksInstance.syncProcessor.requestOfDeath.zxid == -1
zksInstance.syncProcessor.zks.superSecret == 3007405056L
zksInstance.syncProcessor.zks.tickTime == 4000
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 1 || daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 2 || daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 3
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 1
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == null
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) != null
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) == null
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) != null
zksInstance.firstProcessor.zks.hzxid % zksInstance.self.acceptedEpoch == 0
zksInstance.self.bcVote.peerEpoch % zksInstance.firstProcessor.zks.hzxid == 0
zksInstance.self.bcVote.zxid % zksInstance.firstProcessor.zks.hzxid == 0
zksInstance.self.electionAlg.proposedZxid % zksInstance.firstProcessor.zks.hzxid == 0
zksInstance.self.zkDb.maxCommittedLog % zksInstance.firstProcessor.zks.hzxid == 0
zksInstance.firstProcessor.zks.hzxid % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 0
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 % zksInstance.firstProcessor.zks.hzxid == 0
zksInstance.firstProcessor.zks.requestsInProcess % daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 0
zksInstance.firstProcessor.zks.requestsInProcess % daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) == 0
zksInstance.hzxid % zksInstance.self.acceptedEpoch == 0
zksInstance.hzxid % zksInstance.zkDb.dataTree.lastProcessedZxid == 0
zksInstance.requestsInProcess % daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 0
zksInstance.self.zkDb.maxCommittedLog % zksInstance.self.acceptedEpoch == 0
zksInstance.zkDb.dataTree.lastProcessedZxid % zksInstance.self.acceptedEpoch == 0
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 % zksInstance.self.acceptedEpoch == 0
daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) % zksInstance.self.acceptedEpoch == 0
zksInstance.self.bcVote.zxid % daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 0
daikon.Quant.subsetOf(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version))
daikon.Quant.eltsEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId))
zksInstance.self.electionAlg.proposedZxid % zksInstance.zkDb.dataTree.lastProcessedZxid == 0
daikon.Quant.subsetOf(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
daikon.Quant.memberOf(daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) , zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE )
daikon.Quant.subsetOf(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog % zksInstance.zkDb.dataTree.lastProcessedZxid == 0
daikon.Quant.subsetOf(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.maxLatency % daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 0
daikon.Quant.subsetOf(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId))
daikon.Quant.subsetOf(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId))
daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) % daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 0
zksInstance.firstProcessor.zks.hzxid + zksInstance.firstProcessor.zks.requestsInProcess - 3 * zksInstance.self.tick - 4.294967297E9 == 0
zksInstance.firstProcessor.zks.hzxid - 4.294967296E9 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.self.zkDb.maxCommittedLog == 0
1102 * zksInstance.firstProcessor.zks.hzxid + 2204 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.sessionTracker.currentTime - 4.7330273566E12 == 0
2000 * zksInstance.firstProcessor.zks.hzxid + 4000 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.sessionTracker.nextExpirationTime - 8.589907988E12 == 0
2 * zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.firstProcessor.zks.requestsInProcess - 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 8.589934591E9 == 0
2 * zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.firstProcessor.zks.requestsInProcess - 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 8.589934594E9 == 0
2 * zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.firstProcessor.zks.requestsInProcess - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 8.589934591E9 == 0
2 * zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.firstProcessor.zks.requestsInProcess - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 8.589934594E9 == 0
zksInstance.firstProcessor.zks.hzxid + zksInstance.requestsInProcess - 3 * zksInstance.self.tick - 4.294967297E9 == 0
zksInstance.firstProcessor.zks.hzxid - 4.294967296E9 * zksInstance.requestsInProcess - zksInstance.self.zkDb.maxCommittedLog == 0
1102 * zksInstance.firstProcessor.zks.hzxid + 2204 * zksInstance.requestsInProcess - zksInstance.sessionTracker.currentTime - 4.7330273566E12 == 0
2000 * zksInstance.firstProcessor.zks.hzxid + 4000 * zksInstance.requestsInProcess - zksInstance.sessionTracker.nextExpirationTime - 8.589907988E12 == 0
2 * zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.requestsInProcess - 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 8.589934591E9 == 0
2 * zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.requestsInProcess - 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 8.589934594E9 == 0
2 * zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.requestsInProcess - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 8.589934591E9 == 0
2 * zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.requestsInProcess - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 8.589934594E9 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.self.tick - zksInstance.serverStats.count - 4.294967296E9 == 0
42 * zksInstance.firstProcessor.zks.hzxid - 126 * zksInstance.self.tick - zksInstance.serverStats.maxLatency - 1.80388626432E11 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.self.tick - zksInstance.serverStats.packetsSent - 4.294967296E9 == 0
102416 * zksInstance.firstProcessor.zks.hzxid - 307248 * zksInstance.self.tick - zksInstance.txnLogFactory.txnLog.currentSize - 4.39873370587136E14 == 0
zksInstance.firstProcessor.zks.hzxid - zksInstance.self.zkDb.maxCommittedLog + 4.294967296E9 * zksInstance.serverStats.count - 4.294967296E9 == 0
21 * zksInstance.firstProcessor.zks.hzxid - 21 * zksInstance.self.zkDb.maxCommittedLog + 2.147483648E9 * zksInstance.serverStats.maxLatency - 9.0194313216E10 == 0
zksInstance.firstProcessor.zks.hzxid - zksInstance.self.zkDb.maxCommittedLog + 4.294967296E9 * zksInstance.serverStats.packetsSent - 4.294967296E9 == 0
6401 * zksInstance.firstProcessor.zks.hzxid - 6401 * zksInstance.self.zkDb.maxCommittedLog + 268435456 * zksInstance.txnLogFactory.txnLog.currentSize - 2.7492085661696E13 == 0
1102 * zksInstance.firstProcessor.zks.hzxid - 2204 * zksInstance.serverStats.count - zksInstance.sessionTracker.currentTime - 4.733027354396E12 == 0
2000 * zksInstance.firstProcessor.zks.hzxid - 4000 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextExpirationTime - 8.589907984E12 == 0
2 * zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverStats.count - 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 8.589934589E9 == 0
2 * zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverStats.count - 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 8.589934592E9 == 0
2 * zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverStats.count - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 8.589934589E9 == 0
2 * zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverStats.count - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 8.589934592E9 == 0
23142 * zksInstance.firstProcessor.zks.hzxid - 1102 * zksInstance.serverStats.maxLatency - 21 * zksInstance.sessionTracker.currentTime - 9.9393574442316E13 == 0
42000 * zksInstance.firstProcessor.zks.hzxid - 2000 * zksInstance.serverStats.maxLatency - 21 * zksInstance.sessionTracker.nextExpirationTime - 1.80388067664E14 == 0
42 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.maxLatency - 63 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.80388626369E11 == 0
42 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.maxLatency - 63 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.80388626432E11 == 0
42 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.maxLatency - 63 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 1.80388626369E11 == 0
42 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.maxLatency - 63 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 1.80388626432E11 == 0
1102 * zksInstance.firstProcessor.zks.hzxid - 2204 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.currentTime - 4.733027354396E12 == 0
2000 * zksInstance.firstProcessor.zks.hzxid - 4000 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextExpirationTime - 8.589907984E12 == 0
2 * zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverStats.packetsSent - 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 8.589934589E9 == 0
2 * zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverStats.packetsSent - 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 8.589934592E9 == 0
2 * zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverStats.packetsSent - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 8.589934589E9 == 0
2 * zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverStats.packetsSent - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 8.589934592E9 == 0
56431216 * zksInstance.firstProcessor.zks.hzxid - 76812 * zksInstance.sessionTracker.currentTime - 551 * zksInstance.txnLogFactory.txnLog.currentSize - 2.42368183549109568E17 == 0
25604000 * zksInstance.firstProcessor.zks.hzxid - 19203 * zksInstance.sessionTracker.nextExpirationTime - 250 * zksInstance.txnLogFactory.txnLog.currentSize - 1.0996783169336E17 == 0
102416 * zksInstance.firstProcessor.zks.hzxid - zksInstance.txnLogFactory.txnLog.currentSize - 153624 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 4.39873370433512E14 == 0
102416 * zksInstance.firstProcessor.zks.hzxid - zksInstance.txnLogFactory.txnLog.currentSize - 153624 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.39873370587136E14 == 0
102416 * zksInstance.firstProcessor.zks.hzxid - zksInstance.txnLogFactory.txnLog.currentSize - 153624 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 4.39873370433512E14 == 0
102416 * zksInstance.firstProcessor.zks.hzxid - zksInstance.txnLogFactory.txnLog.currentSize - 153624 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 4.39873370587136E14 == 0
zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.hzxid - 3 * zksInstance.self.tick - 4.294967297E9 == 0
4.294967296E9 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.hzxid + zksInstance.self.zkDb.maxCommittedLog == 0
2204 * zksInstance.firstProcessor.zks.requestsInProcess + 1102 * zksInstance.hzxid - zksInstance.sessionTracker.currentTime - 4.7330273566E12 == 0
4000 * zksInstance.firstProcessor.zks.requestsInProcess + 2000 * zksInstance.hzxid - zksInstance.sessionTracker.nextExpirationTime - 8.589907988E12 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + 2 * zksInstance.hzxid - 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 8.589934591E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + 2 * zksInstance.hzxid - 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 8.589934594E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + 2 * zksInstance.hzxid - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 8.589934591E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + 2 * zksInstance.hzxid - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 8.589934594E9 == 0
4.294967298E9 * zksInstance.firstProcessor.zks.requestsInProcess - 2 * zksInstance.self.tick + zksInstance.self.zkDb.maxCommittedLog - 4.294967298E9 == 0
zksInstance.firstProcessor.zks.requestsInProcess - 3 * zksInstance.self.tick + zksInstance.zkDb.dataTree.lastProcessedZxid - 4.294967297E9 == 0
8.589934596E12 * zksInstance.firstProcessor.zks.requestsInProcess + 2000 * zksInstance.self.zkDb.maxCommittedLog - zksInstance.sessionTracker.nextExpirationTime - 8.589907988E12 == 0
4.294967296E9 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.self.zkDb.maxCommittedLog - zksInstance.zkDb.dataTree.lastProcessedZxid == 0
8.589934594E9 * zksInstance.firstProcessor.zks.requestsInProcess + 2 * zksInstance.self.zkDb.maxCommittedLog - 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 8.589934591E9 == 0
8.589934594E9 * zksInstance.firstProcessor.zks.requestsInProcess + 2 * zksInstance.self.zkDb.maxCommittedLog - 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 8.589934594E9 == 0
8.589934594E9 * zksInstance.firstProcessor.zks.requestsInProcess + 2 * zksInstance.self.zkDb.maxCommittedLog - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 8.589934591E9 == 0
8.589934594E9 * zksInstance.firstProcessor.zks.requestsInProcess + 2 * zksInstance.self.zkDb.maxCommittedLog - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 8.589934594E9 == 0
2204 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.sessionTracker.currentTime + 1102 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4.7330273566E12 == 0
4000 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.sessionTracker.nextExpirationTime + 2000 * zksInstance.zkDb.dataTree.lastProcessedZxid - 8.589907988E12 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + 2 * zksInstance.zkDb.dataTree.lastProcessedZxid - 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 8.589934591E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + 2 * zksInstance.zkDb.dataTree.lastProcessedZxid - 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 8.589934594E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + 2 * zksInstance.zkDb.dataTree.lastProcessedZxid - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 8.589934591E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + 2 * zksInstance.zkDb.dataTree.lastProcessedZxid - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 8.589934594E9 == 0
zksInstance.hzxid - 4.294967296E9 * zksInstance.requestsInProcess - zksInstance.self.zkDb.maxCommittedLog == 0
1102 * zksInstance.hzxid + 2204 * zksInstance.requestsInProcess - zksInstance.sessionTracker.currentTime - 4.7330273566E12 == 0
2000 * zksInstance.hzxid + 4000 * zksInstance.requestsInProcess - zksInstance.sessionTracker.nextExpirationTime - 8.589907988E12 == 0
zksInstance.hzxid + 8.589934592E9 * zksInstance.self.acceptedEpoch - zksInstance.zkDb.dataTree.lastProcessedZxid - 8.589934592E9 == 0
zksInstance.hzxid + 4.294967296E9 * zksInstance.self.bcVote.peerEpoch - zksInstance.zkDb.dataTree.lastProcessedZxid == 0
4.294967301E9 * zksInstance.hzxid + 8.589934592E9 * zksInstance.self.bcVote.zxid - 4.294967301E9 * zksInstance.zkDb.dataTree.lastProcessedZxid == 0
zksInstance.hzxid - 4.294967296E9 * zksInstance.self.electionAlg.proposedLeader - zksInstance.zkDb.dataTree.lastProcessedZxid + 8.589934592E9 == 0
zksInstance.hzxid + zksInstance.self.electionAlg.proposedZxid - zksInstance.zkDb.dataTree.lastProcessedZxid == 0
203 * zksInstance.hzxid - 8.589934592E9 * zksInstance.self.electionTimeTaken - 203 * zksInstance.zkDb.dataTree.lastProcessedZxid + 1.769526525952E12 == 0
zksInstance.hzxid - zksInstance.self.zkDb.maxCommittedLog + 4.294967296E9 * zksInstance.serverStats.packetsSent - 4.294967296E9 == 0
1102 * zksInstance.hzxid - 2204 * zksInstance.serverStats.count - zksInstance.sessionTracker.currentTime - 4.733027354396E12 == 0
2000 * zksInstance.hzxid - 4000 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextExpirationTime - 8.589907984E12 == 0
23142 * zksInstance.hzxid - 1102 * zksInstance.serverStats.maxLatency - 21 * zksInstance.sessionTracker.currentTime - 9.9393574442316E13 == 0
42000 * zksInstance.hzxid - 2000 * zksInstance.serverStats.maxLatency - 21 * zksInstance.sessionTracker.nextExpirationTime - 1.80388067664E14 == 0
1102 * zksInstance.hzxid - 2204 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.currentTime - 4.733027354396E12 == 0
2000 * zksInstance.hzxid - 4000 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextExpirationTime - 8.589907984E12 == 0
56431216 * zksInstance.hzxid - 76812 * zksInstance.sessionTracker.currentTime - 551 * zksInstance.txnLogFactory.txnLog.currentSize - 2.42368183549109568E17 == 0
25604000 * zksInstance.hzxid - 19203 * zksInstance.sessionTracker.nextExpirationTime - 250 * zksInstance.txnLogFactory.txnLog.currentSize - 1.0996783169336E17 == 0
zksInstance.hzxid - zksInstance.zkDb.dataTree.lastProcessedZxid - 8.589934592E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 8.589934592E9 == 0
zksInstance.hzxid - zksInstance.zkDb.dataTree.lastProcessedZxid - 8.589934592E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 == 0
8.589934596E12 * zksInstance.requestsInProcess + 2000 * zksInstance.self.zkDb.maxCommittedLog - zksInstance.sessionTracker.nextExpirationTime - 8.589907988E12 == 0
2204 * zksInstance.requestsInProcess - zksInstance.sessionTracker.currentTime + 1102 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4.7330273566E12 == 0
4000 * zksInstance.requestsInProcess - zksInstance.sessionTracker.nextExpirationTime + 2000 * zksInstance.zkDb.dataTree.lastProcessedZxid - 8.589907988E12 == 0
8.589934594E12 * zksInstance.self.zkDb.maxCommittedLog - 8.589934596E12 * zksInstance.self.zkDb.minCommittedLog - 4.294967297E9 * zksInstance.sessionTracker.nextExpirationTime + 1.14280489838576E17 == 0
2000 * zksInstance.self.zkDb.maxCommittedLog - 8.589934596E12 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextExpirationTime + 26608000 == 0
14000 * zksInstance.self.zkDb.maxCommittedLog - 1.431655766E12 * zksInstance.serverStats.maxLatency - 7 * zksInstance.sessionTracker.nextExpirationTime + 186256000 == 0
2000 * zksInstance.self.zkDb.maxCommittedLog - 8.589934596E12 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextExpirationTime + 26608000 == 0
551 * zksInstance.self.zkDb.maxCommittedLog + 1073741824 * zksInstance.sessionTracker.currentTime - 2.366526981198E12 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 2.8565389399030704E16 == 0
551 * zksInstance.self.zkDb.maxCommittedLog + 1073741824 * zksInstance.sessionTracker.currentTime - 2.366526981198E12 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2.8567755926011904E16 == 0
551 * zksInstance.self.zkDb.maxCommittedLog + 1073741824 * zksInstance.sessionTracker.currentTime - 2.366526981198E12 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 2.8565389399030704E16 == 0
551 * zksInstance.self.zkDb.maxCommittedLog + 1073741824 * zksInstance.sessionTracker.currentTime - 2.366526981198E12 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 2.8567755926011904E16 == 0
12802000 * zksInstance.self.zkDb.maxCommittedLog - 6401 * zksInstance.sessionTracker.nextExpirationTime - 5.3687091225E11 * zksInstance.txnLogFactory.txnLog.currentSize + 1.70317808E11 == 0
2204 * zksInstance.serverStats.count + zksInstance.sessionTracker.currentTime - 1102 * zksInstance.zkDb.dataTree.lastProcessedZxid + 4.733027354396E12 == 0
4000 * zksInstance.serverStats.count + zksInstance.sessionTracker.nextExpirationTime - 2000 * zksInstance.zkDb.dataTree.lastProcessedZxid + 8.589907984E12 == 0
1102 * zksInstance.serverStats.maxLatency + 21 * zksInstance.sessionTracker.currentTime - 23142 * zksInstance.zkDb.dataTree.lastProcessedZxid + 9.9393574442316E13 == 0
2000 * zksInstance.serverStats.maxLatency + 21 * zksInstance.sessionTracker.nextExpirationTime - 42000 * zksInstance.zkDb.dataTree.lastProcessedZxid + 1.80388067664E14 == 0
2204 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.currentTime - 1102 * zksInstance.zkDb.dataTree.lastProcessedZxid + 4.733027354396E12 == 0
4000 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextExpirationTime - 2000 * zksInstance.zkDb.dataTree.lastProcessedZxid + 8.589907984E12 == 0
76812 * zksInstance.sessionTracker.currentTime + 551 * zksInstance.txnLogFactory.txnLog.currentSize - 56431216 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2.42368183549109568E17 == 0
19203 * zksInstance.sessionTracker.nextExpirationTime + 250 * zksInstance.txnLogFactory.txnLog.currentSize - 25604000 * zksInstance.zkDb.dataTree.lastProcessedZxid + 1.0996783169336E17 == 0
zksInstance.commitProcessor.finished == zksInstance.commitProcessor.matchSyncs
zksInstance.commitProcessor.finished == zksInstance.firstProcessor.skipACL
zksInstance.firstProcessor.zks.hzxid == zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.firstProcessor.zks.maxSessionTimeout == zksInstance.minSessionTimeout
zksInstance.firstProcessor.zks.maxSessionTimeout == zksInstance.self.maxSessionTimeout
zksInstance.firstProcessor.zks.maxSessionTimeout == zksInstance.self.minSessionTimeout
zksInstance.firstProcessor.zks.maxSessionTimeout == zksInstance.self.qcm.observerCounter
zksInstance.firstProcessor.zks.maxSessionTimeout == zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout
zksInstance.firstProcessor.zks.maxSessionTimeout == zksInstance.serverCnxnFactory.zkServer.minSessionTimeout
zksInstance.firstProcessor.zks.maxSessionTimeout == zksInstance.txnLogFactory.snapLog.dbId
zksInstance.firstProcessor.zks.maxSessionTimeout == daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.firstProcessor.zks.requestsInProcess == daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.requestsInProcess == daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.superSecret == zksInstance.superSecret
zksInstance.firstProcessor.zks.tickTime == zksInstance.serverCnxnFactory.zkServer.tickTime
zksInstance.firstProcessor.zks.tickTime == zksInstance.tickTime
zksInstance.self.$assertionsDisabled == zksInstance.zkDb.dataTree.initialized
zksInstance.self.acceptedEpoch == daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.self.acceptedEpoch == daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.self.acceptedEpoch == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.acceptedEpoch == daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.self.acceptedEpoch == daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.id == zksInstance.self.myid
zksInstance.self.bcVote.id == zksInstance.self.qcm.mySid
zksInstance.self.bcVote.peerEpoch == zksInstance.self.bcVote.version
zksInstance.self.bcVote.peerEpoch == zksInstance.self.bcVote.zxid
zksInstance.self.bcVote.peerEpoch == zksInstance.self.currentVote.version
zksInstance.self.bcVote.peerEpoch == zksInstance.self.currentVote.zxid
zksInstance.self.bcVote.peerEpoch == zksInstance.self.electionAlg.proposedZxid
zksInstance.self.bcVote.peerEpoch == zksInstance.self.end_fle
zksInstance.self.bcVote.peerEpoch == zksInstance.self.qcm.connectionThreadCnt
zksInstance.self.bcVote.peerEpoch == zksInstance.self.start_fle
zksInstance.self.bcVote.peerEpoch == zksInstance.self.tick
zksInstance.self.bcVote.peerEpoch == zksInstance.txnLogFactory.txnLog.dbId
zksInstance.self.bcVote.peerEpoch == zksInstance.zkDb.dataTree.scount
zksInstance.self.bcVote.peerEpoch == daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.peerEpoch == daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.peerEpoch == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.peerEpoch == daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.pairwiseEqual(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.threadCnt-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.threadCnt-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
zksInstance.self.electionTimeTaken == 204
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 9 || zksInstance.serverStats.maxLatency == 12
zksInstance.serverStats.minLatency == 2 || zksInstance.serverStats.minLatency == 9 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.packetsReceived >= 1
zksInstance.serverStats.packetsSent >= 1
zksInstance.sessionTracker.currentTime == 26632425
zksInstance.sessionTracker.nextExpirationTime == 26636000
zksInstance.sessionTracker.nextSessionId == 144116933458395136L || zksInstance.sessionTracker.nextSessionId == 144116933458395137L
zksInstance.firstProcessor.zks.hzxid > zksInstance.firstProcessor.zks.requestsInProcess
zksInstance.firstProcessor.zks.hzxid > zksInstance.firstProcessor.zks.superSecret
zksInstance.firstProcessor.zks.hzxid > zksInstance.firstProcessor.zks.tickTime
zksInstance.firstProcessor.zks.hzxid < zksInstance.self.OBSERVER_ID
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.bcVote.id
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.cnxnFactory.maxClientCnxns
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.electionAlg.finalizeWait
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.electionAlg.maxNotificationInterval
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.electionTimeTaken
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.electionType
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.initLimit
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.qcm.PACKETMAXSIZE
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.qcm.RECV_CAPACITY
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.qcm.cnxTO
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.qcm.maxBuffer
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.qcm.socketTimeout
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.syncLimit
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.zkDb.commitLogBuffer
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.zkDb.commitLogCount
zksInstance.firstProcessor.zks.hzxid >= zksInstance.self.zkDb.maxCommittedLog
zksInstance.firstProcessor.zks.hzxid >= zksInstance.self.zkDb.minCommittedLog
zksInstance.firstProcessor.zks.hzxid > zksInstance.serverStats.count
zksInstance.firstProcessor.zks.hzxid > zksInstance.serverStats.maxLatency
zksInstance.firstProcessor.zks.hzxid != zksInstance.serverStats.minLatency
zksInstance.firstProcessor.zks.hzxid > zksInstance.serverStats.packetsReceived
zksInstance.firstProcessor.zks.hzxid > zksInstance.serverStats.packetsSent
zksInstance.firstProcessor.zks.hzxid > zksInstance.serverStats.totalLatency
zksInstance.firstProcessor.zks.hzxid > zksInstance.sessionTracker.currentTime
zksInstance.firstProcessor.zks.hzxid > zksInstance.sessionTracker.nextExpirationTime
zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.firstProcessor.zks.hzxid < zksInstance.sessionTracker.nextSessionId
zksInstance.firstProcessor.zks.hzxid > zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.firstProcessor.zks.hzxid > zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.firstProcessor.zks.hzxid > zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.firstProcessor.zks.hzxid > zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.firstProcessor.zks.hzxid > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.maxSessionTimeout <= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.maxSessionTimeout <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.firstProcessor.zks.superSecret
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.firstProcessor.zks.tickTime
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.OBSERVER_ID
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE
zksInstance.firstProcessor.zks.requestsInProcess <= zksInstance.self.acceptedEpoch
zksInstance.firstProcessor.zks.requestsInProcess >= zksInstance.self.bcVote.peerEpoch
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.cnxnFactory.maxClientCnxns
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.electionAlg.finalizeWait
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.electionAlg.maxNotificationInterval
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.electionTimeTaken
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.electionType
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.initLimit
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.qcm.PACKETMAXSIZE
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.qcm.RECV_CAPACITY
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.qcm.cnxTO
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.qcm.maxBuffer
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.qcm.socketTimeout
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.syncLimit
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.zkDb.commitLogBuffer
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.zkDb.commitLogCount
zksInstance.firstProcessor.zks.requestsInProcess <= zksInstance.self.zkDb.maxCommittedLog
zksInstance.firstProcessor.zks.requestsInProcess <= zksInstance.self.zkDb.minCommittedLog
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.serverStats.minLatency
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.serverStats.packetsReceived
zksInstance.firstProcessor.zks.requestsInProcess <= zksInstance.serverStats.packetsSent
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.sessionTracker.currentTime
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.sessionTracker.nextExpirationTime
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.sessionTracker.nextSessionId
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.firstProcessor.zks.requestsInProcess <= zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.firstProcessor.zks.requestsInProcess <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.requestsInProcess >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.superSecret != zksInstance.self.zkDb.maxCommittedLog
zksInstance.firstProcessor.zks.superSecret != zksInstance.self.zkDb.minCommittedLog
zksInstance.firstProcessor.zks.superSecret > zksInstance.serverStats.count
zksInstance.firstProcessor.zks.superSecret > zksInstance.serverStats.maxLatency
zksInstance.firstProcessor.zks.superSecret != zksInstance.serverStats.minLatency
zksInstance.firstProcessor.zks.superSecret > zksInstance.serverStats.packetsReceived
zksInstance.firstProcessor.zks.superSecret > zksInstance.serverStats.packetsSent
zksInstance.firstProcessor.zks.superSecret > zksInstance.serverStats.totalLatency
zksInstance.firstProcessor.zks.superSecret < zksInstance.sessionTracker.nextSessionId
zksInstance.firstProcessor.zks.superSecret > zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.firstProcessor.zks.superSecret > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.tickTime != zksInstance.self.zkDb.maxCommittedLog
zksInstance.firstProcessor.zks.tickTime != zksInstance.self.zkDb.minCommittedLog
zksInstance.firstProcessor.zks.tickTime > zksInstance.serverStats.count
zksInstance.firstProcessor.zks.tickTime > zksInstance.serverStats.maxLatency
zksInstance.firstProcessor.zks.tickTime != zksInstance.serverStats.minLatency
zksInstance.firstProcessor.zks.tickTime > zksInstance.serverStats.packetsReceived
zksInstance.firstProcessor.zks.tickTime > zksInstance.serverStats.packetsSent
zksInstance.firstProcessor.zks.tickTime > zksInstance.serverStats.totalLatency
zksInstance.firstProcessor.zks.tickTime < zksInstance.sessionTracker.nextSessionId
zksInstance.firstProcessor.zks.tickTime != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.firstProcessor.zks.tickTime > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > zksInstance.serverStats.maxLatency
zksInstance.self.acceptedEpoch >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id <= zksInstance.serverStats.minLatency
zksInstance.self.bcVote.id < zksInstance.sessionTracker.nextSessionId
zksInstance.self.bcVote.peerEpoch <= zksInstance.serverStats.count
zksInstance.self.bcVote.peerEpoch <= zksInstance.serverStats.maxLatency
zksInstance.self.bcVote.peerEpoch <= zksInstance.serverStats.totalLatency
zksInstance.self.bcVote.peerEpoch <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.cnxnFactory.maxClientCnxns > zksInstance.serverStats.maxLatency
zksInstance.self.cnxnFactory.maxClientCnxns > zksInstance.serverStats.totalLatency
zksInstance.self.electionTimeTaken > zksInstance.serverStats.count
zksInstance.self.electionTimeTaken > zksInstance.serverStats.maxLatency
zksInstance.self.electionTimeTaken != zksInstance.serverStats.minLatency
zksInstance.self.electionTimeTaken > zksInstance.serverStats.packetsReceived
zksInstance.self.electionTimeTaken > zksInstance.serverStats.packetsSent
zksInstance.self.electionTimeTaken > zksInstance.serverStats.totalLatency
zksInstance.self.electionTimeTaken > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.electionType > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.qcm.PACKETMAXSIZE > zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.qcm.RECV_CAPACITY > zksInstance.serverStats.totalLatency
daikon.Quant.eltsEqual(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch))
zksInstance.self.zkDb.maxCommittedLog != zksInstance.sessionTracker.currentTime
zksInstance.self.zkDb.maxCommittedLog != zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.zkDb.minCommittedLog != zksInstance.sessionTracker.currentTime
zksInstance.self.zkDb.minCommittedLog != zksInstance.sessionTracker.nextExpirationTime
zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.serverStats.maxLatency - 12 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.serverStats.minLatency > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 % zksInstance.serverStats.packetsReceived == 0
zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 % zksInstance.serverStats.packetsSent == 0
zksInstance.serverStats.totalLatency - 21 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.sessionTracker.currentTime > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextExpirationTime > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
102416 * zksInstance.firstProcessor.zks.hzxid - 307248 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.txnLogFactory.txnLog.currentSize - 4.39873370587136E14 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.firstProcessor.zks.requestsInProcess - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.firstProcessor.zks.requestsInProcess - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.294967297E9 == 0
zksInstance.firstProcessor.zks.hzxid - zksInstance.self.zkDb.maxCommittedLog + 4.294967296E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid - zksInstance.self.zkDb.maxCommittedLog + 4.294967296E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 == 0
zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 4.3235079608021811E17 == 0
9 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.maxLatency - 27 * zksInstance.sessionTracker.nextSessionId + 3.891157164721963E18 == 0
102416 * zksInstance.firstProcessor.zks.hzxid - 153624 * zksInstance.serverStats.packetsReceived - zksInstance.txnLogFactory.txnLog.currentSize - 4.39873370433512E14 == 0
zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.packetsReceived - 2 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 4.294967295E9 == 0
zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.packetsReceived - 2 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.294967297E9 == 0
zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 4.3235079608021811E17 == 0
9 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.totalLatency - 27 * zksInstance.sessionTracker.nextSessionId + 3.891157164721963E18 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 4.3235079608021811E17 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 4.3235079608021811E17 == 0
102416 * zksInstance.firstProcessor.zks.hzxid - zksInstance.txnLogFactory.txnLog.currentSize - 307248 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.39873370894384E14 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 4.294967299E9 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.self.zkDb.maxCommittedLog + 4.294967298E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 4.294967298E9 == 0
zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + 1 == 0
zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.serverStats.packetsReceived + zksInstance.serverStats.packetsSent == 0
zksInstance.self.zkDb.maxCommittedLog - zksInstance.serverStats.packetsReceived - 4.294967298E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.294967297E9 == 0
zksInstance.self.zkDb.maxCommittedLog - 2 * zksInstance.sessionTracker.nextSessionId - 4.294967298E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 2.8823386691679027E17 == 0
zksInstance.self.zkDb.maxCommittedLog - 2 * zksInstance.sessionTracker.nextSessionId - 4.294967298E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 2.8823386262182298E17 == 0
zksInstance.self.zkDb.maxCommittedLog - 2 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.294967298E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 1.44116933458395136E17 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2 == 0
zksInstance.serverStats.maxLatency - 4 * zksInstance.serverStats.packetsReceived + 4 * zksInstance.sessionTracker.nextSessionId - 5.7646773383358054E17 == 0
zksInstance.serverStats.packetsReceived - zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 1.44116933458395136E17 == 0
zksInstance.serverStats.packetsReceived - zksInstance.serverStats.packetsSent - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 1 == 0
23 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.totalLatency - 23 * zksInstance.sessionTracker.nextSessionId + 3.3146894695430881E18 == 0
zksInstance.hzxid == zksInstance.self.zkDb.maxCommittedLog
zksInstance.hzxid == zksInstance.self.zkDb.minCommittedLog
zksInstance.hzxid == daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.maxSessionTimeout == daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess == zksInstance.serverStats.packetsReceived
zksInstance.requestsInProcess == daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess == daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.self.OBSERVER_ID == zksInstance.serverStats.minLatency
daikon.Quant.pairwiseEqual(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.maxLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.totalLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.lastProcessedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.maxLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.totalLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.lastProcessedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionType-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
zksInstance.self.electionTimeTaken == 236
zksInstance.sessionTracker.nextSessionId == 72059325860675585L
zksInstance.syncProcessor.randRoll == 31611
zksInstance.txnLogFactory.txnLog.lastZxidSeen == 0 || zksInstance.txnLogFactory.txnLog.lastZxidSeen == 4294967297L
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) != null
daikon.Quant.subsetOf(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.commitProcessor.finished == zksInstance.self.authLearner.quorumRequireSasl
zksInstance.commitProcessor.finished == zksInstance.self.authServer.quorumRequireSasl
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.acceptedEpoch
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.bcVote.electionEpoch
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.bcVote.id
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.currentEpoch
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.currentVote.electionEpoch
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.currentVote.id
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.currentVote.peerEpoch
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.electionAlg.logicalclock
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.electionAlg.proposedLeader
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.myid
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.qcm.SEND_CAPACITY
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.qcm.mySid
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.quorumConfig.half
zksInstance.firstProcessor.zks.requestsInProcess == daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.requestsInProcess == daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.requestsInProcess == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.requestsInProcess == daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.requestsInProcess == daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.requestsInProcess == daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.requestsInProcess == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.requestsInProcess == daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.requestsInProcess == daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.$assertionsDisabled == zksInstance.self.authInitialized
zksInstance.self.$assertionsDisabled == zksInstance.self.qcm.quorumSaslAuthEnabled
zksInstance.self.$assertionsDisabled == zksInstance.self.quorumSaslEnableAuth
zksInstance.self.authServer.MAX_RETRIES == zksInstance.self.syncLimit
zksInstance.self.bcVote.peerEpoch == daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.peerEpoch == daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.peerEpoch == daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.peerEpoch == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.peerEpoch == daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.peerEpoch == daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.pairwiseEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.pairwiseEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.pairwiseEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.qcm.connectionThreadCnt == zksInstance.self.qcm.threadCnt
zksInstance.self.qcm.connectionThreadCnt == daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.self.qcm.connectionThreadCnt == daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.threadCnt-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.threadCnt-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
zksInstance.firstProcessor.zks.hzxid == 4294967296L || zksInstance.firstProcessor.zks.hzxid == 4294967297L || zksInstance.firstProcessor.zks.hzxid == 4294967298L
zksInstance.self.authServer.MAX_RETRIES == 5
zksInstance.self.electionTimeTaken == 206
zksInstance.self.qcm.connectionThreadCnt == 2
daikon.Quant.eltsEqual(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, null)
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 38
zksInstance.serverStats.minLatency == 14 || zksInstance.serverStats.minLatency == 38 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 38 || zksInstance.serverStats.totalLatency == 52
zksInstance.sessionTracker.currentTime == 26412782
zksInstance.sessionTracker.nextExpirationTime == 26416000
zksInstance.sessionTracker.nextSessionId == 72059325025943553L
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) != null
daikon.Quant.eltsEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch))
zksInstance.firstProcessor.zks.maxSessionTimeout == daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.maxSessionTimeout == daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.bcVote.peerEpoch
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.bcVote.version
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.bcVote.zxid
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.currentVote.version
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.currentVote.zxid
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.electionAlg.proposedEpoch
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.electionAlg.proposedZxid
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.end_fle
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.qcm.connectionThreadCnt
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.start_fle
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.self.tick
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.serverStats.count
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.serverStats.maxLatency
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.serverStats.totalLatency
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.txnLogFactory.txnLog.dbId
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.zkDb.dataTree.scount
zksInstance.firstProcessor.zks.requestsInProcess == daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.requestsInProcess == daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.requestsInProcess == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.requestsInProcess == daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.acceptedEpoch == zksInstance.self.bcVote.id
zksInstance.self.acceptedEpoch == zksInstance.self.currentVote.id
zksInstance.self.acceptedEpoch == zksInstance.self.electionAlg.proposedLeader
zksInstance.self.acceptedEpoch == zksInstance.serverStats.packetsReceived
zksInstance.self.acceptedEpoch == zksInstance.serverStats.packetsSent
daikon.Quant.pairwiseEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt == daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt == daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.maxLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.totalLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.maxLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.totalLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
zksInstance.self.electionTimeTaken == 225
zksInstance.self.qcm.threadCnt == 2
zksInstance.sessionTracker.currentTime == 26386397
zksInstance.sessionTracker.nextExpirationTime == 26388000
zksInstance.sessionTracker.nextSessionId == 72059323296776192L
daikon.Quant.subsetOf(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess))
zksInstance.self.$assertionsDisabled == zksInstance.self.authLearner.quorumRequireSasl
zksInstance.self.$assertionsDisabled == zksInstance.self.authServer.quorumRequireSasl
zksInstance.self.$assertionsDisabled == zksInstance.self.quorumLearnerSaslAuthRequired
zksInstance.self.$assertionsDisabled == zksInstance.self.quorumServerSaslAuthRequired
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt-1)
zksInstance.self.electionTimeTaken == 210
zksInstance.sessionTracker.currentTime == 26415110
zksInstance.sessionTracker.nextSessionId == 72059325178511360L
zksInstance.self.electionTimeTaken == 202
zksInstance.sessionTracker.currentTime == 26410425
zksInstance.sessionTracker.nextExpirationTime == 26412000
zksInstance.sessionTracker.nextSessionId == 72059324871540736L
zksInstance.firstProcessor.failCreate == zksInstance.self.authServer.quorumRequireSasl
zksInstance.firstProcessor.failCreate == zksInstance.self.quorumServerSaslAuthRequired
zksInstance.requestsInProcess == zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.authInitialized == zksInstance.self.qcm.quorumSaslAuthEnabled
zksInstance.self.authInitialized == zksInstance.self.quorumSaslEnableAuth
zksInstance.self.authInitialized == zksInstance.syncProcessor.running
zksInstance.self.authLearner.quorumRequireSasl == zksInstance.self.quorumLearnerSaslAuthRequired
zksInstance.self.authServer.quorumRequireSasl == zksInstance.self.quorumServerSaslAuthRequired
zksInstance.self.bcVote.version == zksInstance.self.tick
zksInstance.self.bcVote.version == zksInstance.serverStats.count
zksInstance.self.bcVote.version == zksInstance.serverStats.maxLatency
zksInstance.self.bcVote.version == zksInstance.serverStats.totalLatency
zksInstance.self.bcVote.version == zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.myid == zksInstance.self.qcm.mySid
zksInstance.self.myid == zksInstance.sessionTracker.serverId
zksInstance.self.qcm.SEND_CAPACITY == zksInstance.self.quorumConfig.half
zksInstance.self.qcm.SEND_CAPACITY == zksInstance.serverStats.packetsSent
zksInstance.self.qcm.SEND_CAPACITY == daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.self.qcm.SEND_CAPACITY == daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)-1
zksInstance.self.qcm.SEND_CAPACITY == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.maxCommittedLog == zksInstance.self.zkDb.minCommittedLog
zksInstance.self.zkDb.maxCommittedLog == zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.zkDb.maxCommittedLog == zksInstance.zkDb.minCommittedLog
zksInstance.syncProcessor.requestOfDeath.cxid == zksInstance.syncProcessor.requestOfDeath.sessionId
zksInstance.syncProcessor.requestOfDeath.cxid == zksInstance.syncProcessor.requestOfDeath.type
zksInstance.syncProcessor.requestOfDeath.cxid == zksInstance.syncProcessor.zks.hzxid
zksInstance.syncProcessor.requestOfDeath.cxid == zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.syncProcessor.requestOfDeath.cxid == zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.syncProcessor.requestOfDeath.cxid == daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.requestOfDeath.cxid == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.requestOfDeath.zxid == daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE) == daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE) == daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
zksInstance.hzxid >= 0
zksInstance.self.bcVote.id == 1 || zksInstance.self.bcVote.id == 2
zksInstance.self.bcVote.zxid >= 0
zksInstance.self.electionAlg.proposedEpoch >= 0
zksInstance.self.electionAlg.proposedZxid >= 0
zksInstance.self.myid == 0 || zksInstance.self.myid == 1 || zksInstance.self.myid == 2
zksInstance.self.zkDb.maxCommittedLog >= 0
zksInstance.sessionTracker.currentTime == 26388857 || zksInstance.sessionTracker.currentTime == 26394133 || zksInstance.sessionTracker.currentTime == 26395039
zksInstance.sessionTracker.nextExpirationTime == 26392000 || zksInstance.sessionTracker.nextExpirationTime == 26396000
zksInstance.sessionTracker.serverId == 0 || zksInstance.sessionTracker.serverId == 2
daikon.Quant.eltsNotEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, null)
zksInstance.syncProcessor.requestOfDeath.createTime == 26386406
zksInstance.syncProcessor.requestOfDeath.cxid == 0
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType-1) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == null
zksInstance.hzxid >= zksInstance.requestsInProcess
zksInstance.hzxid < zksInstance.self.OBSERVER_ID
zksInstance.hzxid != zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE
zksInstance.hzxid != zksInstance.self.acceptedEpoch
zksInstance.hzxid != zksInstance.self.authServer.MAX_RETRIES
zksInstance.hzxid != zksInstance.self.bcVote.id
zksInstance.hzxid != zksInstance.self.bcVote.peerEpoch
zksInstance.hzxid >= zksInstance.self.bcVote.version
zksInstance.hzxid != zksInstance.self.cnxnFactory.maxClientCnxns
zksInstance.hzxid != zksInstance.self.electionAlg.finalizeWait
zksInstance.hzxid != zksInstance.self.electionAlg.maxNotificationInterval
zksInstance.hzxid != zksInstance.self.electionAlg.proposedLeader
zksInstance.hzxid != zksInstance.self.electionTimeTaken
zksInstance.hzxid != zksInstance.self.electionType
zksInstance.hzxid != zksInstance.self.initLimit
zksInstance.hzxid != zksInstance.self.qcm.PACKETMAXSIZE
zksInstance.hzxid != zksInstance.self.qcm.RECV_CAPACITY
zksInstance.hzxid != zksInstance.self.qcm.SEND_CAPACITY
zksInstance.hzxid != zksInstance.self.qcm.cnxTO
zksInstance.hzxid != zksInstance.self.qcm.connectionThreadCnt
zksInstance.hzxid != zksInstance.self.qcm.maxBuffer
zksInstance.hzxid != zksInstance.self.qcm.socketTimeout
zksInstance.hzxid != zksInstance.self.qcm.threadCnt
zksInstance.hzxid != zksInstance.self.syncLimit
zksInstance.hzxid != zksInstance.self.tickTime
zksInstance.hzxid != zksInstance.self.zkDb.commitLogBuffer
zksInstance.hzxid != zksInstance.self.zkDb.commitLogCount
zksInstance.hzxid >= zksInstance.self.zkDb.maxCommittedLog
zksInstance.hzxid != zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.hzxid % zksInstance.serverStats.packetsReceived == 0
zksInstance.hzxid <= zksInstance.sessionTracker.serverId
zksInstance.hzxid % zksInstance.syncProcessor.randRoll == 0
zksInstance.hzxid % zksInstance.syncProcessor.requestOfDeath.createTime == 0
zksInstance.hzxid < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.hzxid == zksInstance.syncProcessor.requestOfDeath.cxid*zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.syncProcessor.requestOfDeath.cxid == zksInstance.hzxid*zksInstance.hzxid
zksInstance.hzxid > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.hzxid % zksInstance.syncProcessor.snapCount == 0
zksInstance.hzxid < zksInstance.syncProcessor.snapCount
zksInstance.hzxid % zksInstance.syncProcessor.zks.superSecret == 0
zksInstance.hzxid < zksInstance.syncProcessor.zks.superSecret
zksInstance.hzxid % zksInstance.syncProcessor.zks.tickTime == 0
zksInstance.hzxid < zksInstance.syncProcessor.zks.tickTime
zksInstance.hzxid != zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.hzxid >= zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.hzxid != zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.hzxid != zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.hzxid <= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.hzxid != zksInstance.zkDb.dataTree.scount
zksInstance.hzxid != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.hzxid != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.hzxid >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.hzxid >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.maxSessionTimeout <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess < zksInstance.self.acceptedEpoch
zksInstance.requestsInProcess < zksInstance.self.authServer.MAX_RETRIES
zksInstance.requestsInProcess <= zksInstance.self.bcVote.id
zksInstance.requestsInProcess <= zksInstance.self.bcVote.peerEpoch
zksInstance.requestsInProcess >= zksInstance.self.bcVote.version
zksInstance.requestsInProcess <= zksInstance.self.bcVote.zxid
zksInstance.requestsInProcess <= zksInstance.self.electionAlg.proposedEpoch
zksInstance.requestsInProcess <= zksInstance.self.electionAlg.proposedZxid
zksInstance.requestsInProcess < zksInstance.self.electionTimeTaken
zksInstance.requestsInProcess <= zksInstance.self.myid
zksInstance.requestsInProcess <= zksInstance.self.qcm.SEND_CAPACITY
zksInstance.requestsInProcess <= zksInstance.self.qcm.connectionThreadCnt
zksInstance.requestsInProcess <= zksInstance.self.zkDb.maxCommittedLog
zksInstance.requestsInProcess <= zksInstance.sessionTracker.serverId
zksInstance.requestsInProcess % zksInstance.syncProcessor.randRoll == 0
zksInstance.requestsInProcess < zksInstance.syncProcessor.zks.superSecret
zksInstance.requestsInProcess < zksInstance.syncProcessor.zks.tickTime
zksInstance.requestsInProcess <= zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.requestsInProcess < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.requestsInProcess <= zksInstance.zkDb.dataTree.scount
zksInstance.requestsInProcess <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.requestsInProcess >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.OBSERVER_ID > zksInstance.self.acceptedEpoch
zksInstance.self.OBSERVER_ID > zksInstance.self.bcVote.id
zksInstance.self.OBSERVER_ID > zksInstance.self.bcVote.zxid
zksInstance.self.OBSERVER_ID > zksInstance.self.electionAlg.proposedEpoch
zksInstance.self.OBSERVER_ID > zksInstance.self.myid
zksInstance.self.OBSERVER_ID > zksInstance.self.qcm.connectionThreadCnt
zksInstance.self.OBSERVER_ID > zksInstance.sessionTracker.serverId
zksInstance.self.OBSERVER_ID > zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.OBSERVER_ID > zksInstance.zkDb.dataTree.scount
zksInstance.self.OBSERVER_ID > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > zksInstance.self.acceptedEpoch
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > zksInstance.self.bcVote.id
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != zksInstance.self.bcVote.zxid
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > zksInstance.self.electionAlg.proposedEpoch
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > zksInstance.self.myid
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > zksInstance.self.qcm.connectionThreadCnt
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > zksInstance.sessionTracker.serverId
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > zksInstance.zkDb.dataTree.scount
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.acceptedEpoch < zksInstance.self.authServer.MAX_RETRIES
zksInstance.self.acceptedEpoch != zksInstance.self.bcVote.id
zksInstance.self.acceptedEpoch > zksInstance.self.bcVote.version
zksInstance.self.acceptedEpoch != zksInstance.self.bcVote.zxid
zksInstance.self.acceptedEpoch < zksInstance.self.cnxnFactory.maxClientCnxns
zksInstance.self.acceptedEpoch < zksInstance.self.electionAlg.finalizeWait
zksInstance.self.acceptedEpoch < zksInstance.self.electionAlg.maxNotificationInterval
zksInstance.self.acceptedEpoch > zksInstance.self.electionAlg.proposedEpoch
zksInstance.self.acceptedEpoch != zksInstance.self.electionAlg.proposedLeader
zksInstance.self.acceptedEpoch < zksInstance.self.electionTimeTaken
zksInstance.self.acceptedEpoch < zksInstance.self.initLimit
zksInstance.self.acceptedEpoch < zksInstance.self.qcm.PACKETMAXSIZE
zksInstance.self.acceptedEpoch < zksInstance.self.qcm.RECV_CAPACITY
zksInstance.self.acceptedEpoch >= zksInstance.self.qcm.SEND_CAPACITY
zksInstance.self.acceptedEpoch < zksInstance.self.qcm.cnxTO
zksInstance.self.acceptedEpoch < zksInstance.self.qcm.maxBuffer
zksInstance.self.acceptedEpoch < zksInstance.self.qcm.socketTimeout
zksInstance.self.acceptedEpoch <= zksInstance.self.qcm.threadCnt
zksInstance.self.acceptedEpoch < zksInstance.self.syncLimit
zksInstance.self.acceptedEpoch < zksInstance.self.tickTime
zksInstance.self.acceptedEpoch < zksInstance.self.zkDb.commitLogBuffer
zksInstance.self.acceptedEpoch < zksInstance.self.zkDb.commitLogCount
zksInstance.self.acceptedEpoch < zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.self.acceptedEpoch >= zksInstance.serverStats.packetsReceived
zksInstance.self.acceptedEpoch < zksInstance.sessionTracker.nextSessionId
zksInstance.sessionTracker.nextSessionId % zksInstance.self.acceptedEpoch == 0
zksInstance.self.acceptedEpoch >= zksInstance.sessionTracker.serverId
zksInstance.self.acceptedEpoch < zksInstance.syncProcessor.randRoll
zksInstance.self.acceptedEpoch < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.self.acceptedEpoch > zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.acceptedEpoch > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.self.acceptedEpoch < zksInstance.syncProcessor.snapCount
zksInstance.self.acceptedEpoch < zksInstance.syncProcessor.zks.superSecret
zksInstance.self.acceptedEpoch < zksInstance.syncProcessor.zks.tickTime
zksInstance.self.acceptedEpoch < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.self.acceptedEpoch < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.self.acceptedEpoch < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.self.acceptedEpoch < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.acceptedEpoch != zksInstance.zkDb.dataTree.scount
zksInstance.self.acceptedEpoch >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.authServer.MAX_RETRIES > zksInstance.self.bcVote.id
zksInstance.self.authServer.MAX_RETRIES > zksInstance.self.bcVote.peerEpoch
zksInstance.self.authServer.MAX_RETRIES != zksInstance.self.bcVote.zxid
zksInstance.self.authServer.MAX_RETRIES > zksInstance.self.electionAlg.proposedEpoch
zksInstance.self.authServer.MAX_RETRIES > zksInstance.self.electionAlg.proposedLeader
zksInstance.self.authServer.MAX_RETRIES != zksInstance.self.electionAlg.proposedZxid
zksInstance.self.authServer.MAX_RETRIES < zksInstance.self.electionTimeTaken
zksInstance.self.authServer.MAX_RETRIES > zksInstance.self.myid
zksInstance.self.authServer.MAX_RETRIES >= zksInstance.self.qcm.connectionThreadCnt
zksInstance.self.authServer.MAX_RETRIES != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.authServer.MAX_RETRIES > zksInstance.serverStats.packetsReceived
zksInstance.self.authServer.MAX_RETRIES < zksInstance.sessionTracker.nextSessionId
zksInstance.self.authServer.MAX_RETRIES > zksInstance.sessionTracker.serverId
zksInstance.self.authServer.MAX_RETRIES < zksInstance.syncProcessor.randRoll
zksInstance.self.authServer.MAX_RETRIES != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.authServer.MAX_RETRIES < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.authServer.MAX_RETRIES > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.authServer.MAX_RETRIES > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id > zksInstance.self.bcVote.version
zksInstance.self.bcVote.id != zksInstance.self.bcVote.zxid
zksInstance.self.bcVote.zxid % zksInstance.self.bcVote.id == 0
zksInstance.self.bcVote.id < zksInstance.self.cnxnFactory.maxClientCnxns
zksInstance.self.bcVote.id < zksInstance.self.electionAlg.finalizeWait
zksInstance.self.bcVote.id < zksInstance.self.electionAlg.maxNotificationInterval
zksInstance.self.electionAlg.proposedEpoch % zksInstance.self.bcVote.id == 0
zksInstance.self.bcVote.id <= zksInstance.self.electionAlg.proposedLeader
zksInstance.self.electionAlg.proposedZxid % zksInstance.self.bcVote.id == 0
zksInstance.self.bcVote.id < zksInstance.self.electionTimeTaken
zksInstance.self.bcVote.id < zksInstance.self.initLimit
zksInstance.self.myid % zksInstance.self.bcVote.id == 0
zksInstance.self.bcVote.id < zksInstance.self.qcm.PACKETMAXSIZE
zksInstance.self.bcVote.id < zksInstance.self.qcm.RECV_CAPACITY
zksInstance.self.bcVote.id >= zksInstance.self.qcm.SEND_CAPACITY
zksInstance.self.bcVote.id < zksInstance.self.qcm.cnxTO
zksInstance.self.bcVote.id != zksInstance.self.qcm.connectionThreadCnt
zksInstance.self.qcm.connectionThreadCnt % zksInstance.self.bcVote.id == 0
zksInstance.self.bcVote.id < zksInstance.self.qcm.maxBuffer
zksInstance.self.bcVote.id < zksInstance.self.qcm.socketTimeout
zksInstance.self.bcVote.id < zksInstance.self.qcm.threadCnt
zksInstance.self.bcVote.id < zksInstance.self.syncLimit
zksInstance.self.bcVote.id < zksInstance.self.tickTime
zksInstance.self.bcVote.id < zksInstance.self.zkDb.commitLogBuffer
zksInstance.self.bcVote.id < zksInstance.self.zkDb.commitLogCount
zksInstance.self.bcVote.id < zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.sessionTracker.nextSessionId % zksInstance.self.bcVote.id == 0
zksInstance.self.bcVote.id != zksInstance.sessionTracker.serverId
zksInstance.self.bcVote.id < zksInstance.syncProcessor.randRoll
zksInstance.self.bcVote.id < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.self.bcVote.id > zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.bcVote.id > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.self.bcVote.id < zksInstance.syncProcessor.snapCount
zksInstance.self.bcVote.id < zksInstance.syncProcessor.zks.superSecret
zksInstance.self.bcVote.id < zksInstance.syncProcessor.zks.tickTime
zksInstance.self.bcVote.id < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.self.bcVote.id < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.self.bcVote.id < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.self.bcVote.id < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.bcVote.id != zksInstance.zkDb.dataTree.scount
zksInstance.self.bcVote.id <= daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.peerEpoch >= zksInstance.self.bcVote.version
zksInstance.self.bcVote.peerEpoch >= zksInstance.self.electionAlg.proposedEpoch
zksInstance.self.bcVote.peerEpoch < zksInstance.self.electionTimeTaken
zksInstance.self.bcVote.peerEpoch <= zksInstance.self.qcm.threadCnt
zksInstance.self.bcVote.peerEpoch > zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.syncProcessor.requestOfDeath.cxid % zksInstance.self.bcVote.peerEpoch == 0
zksInstance.self.bcVote.peerEpoch > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.syncProcessor.snapCount % zksInstance.self.bcVote.peerEpoch == 0
zksInstance.self.bcVote.peerEpoch < zksInstance.syncProcessor.zks.superSecret
zksInstance.syncProcessor.zks.superSecret % zksInstance.self.bcVote.peerEpoch == 0
zksInstance.self.bcVote.peerEpoch < zksInstance.syncProcessor.zks.tickTime
zksInstance.syncProcessor.zks.tickTime % zksInstance.self.bcVote.peerEpoch == 0
zksInstance.self.bcVote.peerEpoch < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.bcVote.peerEpoch <= zksInstance.zkDb.dataTree.scount
zksInstance.self.bcVote.peerEpoch >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.version <= zksInstance.self.bcVote.zxid
zksInstance.self.bcVote.version <= zksInstance.self.electionAlg.proposedEpoch
zksInstance.self.bcVote.version < zksInstance.self.electionAlg.proposedLeader
zksInstance.self.bcVote.version <= zksInstance.self.electionAlg.proposedZxid
zksInstance.self.bcVote.version < zksInstance.self.electionTimeTaken
zksInstance.self.bcVote.version <= zksInstance.self.myid
zksInstance.self.bcVote.version <= zksInstance.self.qcm.connectionThreadCnt
zksInstance.self.bcVote.version <= zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.bcVote.version < zksInstance.serverStats.packetsReceived
zksInstance.self.bcVote.version < zksInstance.sessionTracker.nextSessionId
zksInstance.self.bcVote.version <= zksInstance.sessionTracker.serverId
zksInstance.self.bcVote.version < zksInstance.syncProcessor.randRoll
zksInstance.self.bcVote.version <= zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.bcVote.version < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.bcVote.version <= zksInstance.zkDb.dataTree.scount
zksInstance.self.bcVote.version >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.version <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.version >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.version <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.version >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.zxid != zksInstance.self.cnxnFactory.maxClientCnxns
zksInstance.self.bcVote.zxid != zksInstance.self.electionAlg.finalizeWait
zksInstance.self.bcVote.zxid != zksInstance.self.electionAlg.maxNotificationInterval
zksInstance.self.bcVote.zxid >= zksInstance.self.electionAlg.proposedEpoch
zksInstance.self.bcVote.zxid != zksInstance.self.electionAlg.proposedLeader
zksInstance.self.bcVote.zxid >= zksInstance.self.electionAlg.proposedZxid
zksInstance.self.bcVote.zxid != zksInstance.self.electionTimeTaken
zksInstance.self.bcVote.zxid != zksInstance.self.electionType
zksInstance.self.bcVote.zxid != zksInstance.self.initLimit
zksInstance.self.bcVote.zxid != zksInstance.self.qcm.PACKETMAXSIZE
zksInstance.self.bcVote.zxid != zksInstance.self.qcm.RECV_CAPACITY
zksInstance.self.bcVote.zxid != zksInstance.self.qcm.SEND_CAPACITY
zksInstance.self.bcVote.zxid != zksInstance.self.qcm.cnxTO
zksInstance.self.bcVote.zxid != zksInstance.self.qcm.maxBuffer
zksInstance.self.bcVote.zxid != zksInstance.self.qcm.socketTimeout
zksInstance.self.bcVote.zxid != zksInstance.self.qcm.threadCnt
zksInstance.self.bcVote.zxid != zksInstance.self.syncLimit
zksInstance.self.bcVote.zxid != zksInstance.self.tickTime
zksInstance.self.bcVote.zxid != zksInstance.self.zkDb.commitLogBuffer
zksInstance.self.bcVote.zxid != zksInstance.self.zkDb.commitLogCount
zksInstance.self.bcVote.zxid != zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.self.bcVote.zxid != zksInstance.serverStats.packetsReceived
zksInstance.self.bcVote.zxid < zksInstance.sessionTracker.nextSessionId
zksInstance.self.bcVote.zxid >= zksInstance.sessionTracker.serverId
zksInstance.self.bcVote.zxid != zksInstance.syncProcessor.randRoll
zksInstance.self.bcVote.zxid != zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.self.bcVote.zxid >= zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.bcVote.zxid > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.self.bcVote.zxid != zksInstance.syncProcessor.snapCount
zksInstance.self.bcVote.zxid != zksInstance.syncProcessor.zks.superSecret
zksInstance.self.bcVote.zxid != zksInstance.syncProcessor.zks.tickTime
zksInstance.self.bcVote.zxid != zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.self.bcVote.zxid != zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.self.bcVote.zxid != zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.self.bcVote.zxid <= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.bcVote.zxid != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.zxid >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.zxid >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.self.cnxnFactory.maxClientCnxns > zksInstance.self.electionAlg.proposedEpoch
zksInstance.self.cnxnFactory.maxClientCnxns > zksInstance.self.myid
zksInstance.self.cnxnFactory.maxClientCnxns > zksInstance.self.qcm.connectionThreadCnt
zksInstance.self.cnxnFactory.maxClientCnxns > zksInstance.sessionTracker.serverId
zksInstance.self.cnxnFactory.maxClientCnxns < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.cnxnFactory.maxClientCnxns > zksInstance.zkDb.dataTree.scount
zksInstance.self.cnxnFactory.maxClientCnxns > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid))
daikon.Quant.eltsEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId))
daikon.Quant.eltsEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid))
daikon.Quant.eltsEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid))
zksInstance.self.electionAlg.finalizeWait > zksInstance.self.electionAlg.proposedEpoch
zksInstance.self.electionAlg.finalizeWait > zksInstance.self.myid
zksInstance.self.electionAlg.finalizeWait > zksInstance.self.qcm.connectionThreadCnt
zksInstance.self.electionAlg.finalizeWait > zksInstance.sessionTracker.serverId
zksInstance.self.electionAlg.finalizeWait < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.electionAlg.finalizeWait > zksInstance.zkDb.dataTree.scount
zksInstance.self.electionAlg.finalizeWait > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.maxNotificationInterval > zksInstance.self.electionAlg.proposedEpoch
zksInstance.self.electionAlg.maxNotificationInterval > zksInstance.self.myid
zksInstance.self.electionAlg.maxNotificationInterval > zksInstance.self.qcm.connectionThreadCnt
zksInstance.self.electionAlg.maxNotificationInterval > zksInstance.sessionTracker.serverId
zksInstance.self.electionAlg.maxNotificationInterval < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.electionAlg.maxNotificationInterval > zksInstance.zkDb.dataTree.scount
zksInstance.self.electionAlg.maxNotificationInterval > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedEpoch % zksInstance.self.electionAlg.proposedLeader == 0
zksInstance.self.electionAlg.proposedEpoch <= zksInstance.self.electionAlg.proposedZxid
zksInstance.self.electionAlg.proposedEpoch < zksInstance.self.electionTimeTaken
zksInstance.self.electionAlg.proposedEpoch <= zksInstance.self.electionType
zksInstance.self.electionAlg.proposedEpoch < zksInstance.self.initLimit
zksInstance.self.electionAlg.proposedEpoch < zksInstance.self.qcm.PACKETMAXSIZE
zksInstance.self.electionAlg.proposedEpoch < zksInstance.self.qcm.RECV_CAPACITY
zksInstance.self.electionAlg.proposedEpoch < zksInstance.self.qcm.cnxTO
zksInstance.self.electionAlg.proposedEpoch < zksInstance.self.qcm.maxBuffer
zksInstance.self.electionAlg.proposedEpoch < zksInstance.self.qcm.socketTimeout
zksInstance.self.electionAlg.proposedEpoch < zksInstance.self.qcm.threadCnt
zksInstance.self.electionAlg.proposedEpoch < zksInstance.self.syncLimit
zksInstance.self.electionAlg.proposedEpoch < zksInstance.self.tickTime
zksInstance.self.electionAlg.proposedEpoch < zksInstance.self.zkDb.commitLogBuffer
zksInstance.self.electionAlg.proposedEpoch < zksInstance.self.zkDb.commitLogCount
zksInstance.self.electionAlg.proposedEpoch < zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.self.electionAlg.proposedEpoch < zksInstance.sessionTracker.nextSessionId
zksInstance.self.electionAlg.proposedEpoch < zksInstance.syncProcessor.randRoll
zksInstance.self.electionAlg.proposedEpoch < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.self.electionAlg.proposedEpoch >= zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.electionAlg.proposedEpoch > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.self.electionAlg.proposedEpoch < zksInstance.syncProcessor.snapCount
zksInstance.self.electionAlg.proposedEpoch < zksInstance.syncProcessor.zks.superSecret
zksInstance.self.electionAlg.proposedEpoch < zksInstance.syncProcessor.zks.tickTime
zksInstance.self.electionAlg.proposedEpoch < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.self.electionAlg.proposedEpoch < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.self.electionAlg.proposedEpoch < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.self.electionAlg.proposedEpoch < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.electionAlg.proposedEpoch <= zksInstance.zkDb.dataTree.scount
zksInstance.self.electionAlg.proposedEpoch >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.electionAlg.proposedEpoch >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.self.electionAlg.proposedZxid % zksInstance.self.electionAlg.proposedLeader == 0
zksInstance.self.electionAlg.proposedLeader < zksInstance.self.electionTimeTaken
zksInstance.self.myid % zksInstance.self.electionAlg.proposedLeader == 0
zksInstance.self.electionAlg.proposedLeader >= zksInstance.self.qcm.SEND_CAPACITY
zksInstance.self.qcm.connectionThreadCnt % zksInstance.self.electionAlg.proposedLeader == 0
zksInstance.sessionTracker.nextSessionId % zksInstance.self.electionAlg.proposedLeader == 0
zksInstance.self.electionAlg.proposedLeader > zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.electionAlg.proposedLeader > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.self.electionAlg.proposedLeader < zksInstance.syncProcessor.zks.superSecret
zksInstance.self.electionAlg.proposedLeader < zksInstance.syncProcessor.zks.tickTime
zksInstance.self.electionAlg.proposedLeader < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.electionAlg.proposedLeader != zksInstance.zkDb.dataTree.scount
zksInstance.self.electionAlg.proposedLeader <= daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedLeader >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedLeader >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedZxid != zksInstance.self.qcm.SEND_CAPACITY
zksInstance.self.electionAlg.proposedZxid >= zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.electionAlg.proposedZxid > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.self.electionAlg.proposedZxid != zksInstance.syncProcessor.zks.superSecret
zksInstance.self.electionAlg.proposedZxid != zksInstance.syncProcessor.zks.tickTime
zksInstance.self.electionAlg.proposedZxid <= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.electionAlg.proposedZxid != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedZxid >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.self.electionTimeTaken > zksInstance.self.electionType
zksInstance.self.electionTimeTaken > zksInstance.self.myid
zksInstance.self.electionTimeTaken > zksInstance.self.qcm.connectionThreadCnt
zksInstance.self.electionTimeTaken > zksInstance.self.qcm.threadCnt
zksInstance.self.electionTimeTaken > zksInstance.self.syncLimit
zksInstance.self.electionTimeTaken % zksInstance.serverStats.packetsReceived == 0
zksInstance.self.electionTimeTaken > zksInstance.sessionTracker.serverId
zksInstance.self.electionTimeTaken > zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.electionTimeTaken > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.self.electionTimeTaken < zksInstance.syncProcessor.zks.superSecret
zksInstance.self.electionTimeTaken < zksInstance.syncProcessor.zks.tickTime
zksInstance.self.electionTimeTaken < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.electionTimeTaken > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.electionType != zksInstance.self.qcm.connectionThreadCnt
zksInstance.self.electionType < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.electionType != zksInstance.zkDb.dataTree.scount
zksInstance.self.initLimit > zksInstance.self.myid
zksInstance.self.initLimit > zksInstance.self.qcm.connectionThreadCnt
zksInstance.self.initLimit > zksInstance.sessionTracker.serverId
zksInstance.self.initLimit < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.initLimit > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.myid < zksInstance.self.qcm.PACKETMAXSIZE
zksInstance.self.myid < zksInstance.self.qcm.RECV_CAPACITY
zksInstance.self.myid < zksInstance.self.qcm.cnxTO
zksInstance.self.myid < zksInstance.self.qcm.maxBuffer
zksInstance.self.myid < zksInstance.self.qcm.socketTimeout
zksInstance.self.myid < zksInstance.self.qcm.threadCnt
zksInstance.self.myid < zksInstance.self.syncLimit
zksInstance.self.myid < zksInstance.self.tickTime
zksInstance.self.myid < zksInstance.self.zkDb.commitLogBuffer
zksInstance.self.myid < zksInstance.self.zkDb.commitLogCount
zksInstance.self.myid < zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.self.myid < zksInstance.sessionTracker.nextSessionId
zksInstance.self.myid < zksInstance.syncProcessor.randRoll
zksInstance.self.myid < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.self.myid >= zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.myid > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.self.myid < zksInstance.syncProcessor.snapCount
zksInstance.self.myid < zksInstance.syncProcessor.zks.superSecret
zksInstance.self.myid < zksInstance.syncProcessor.zks.tickTime
zksInstance.self.myid < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.self.myid < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.self.myid < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.self.myid < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.myid != zksInstance.zkDb.dataTree.scount
zksInstance.self.myid <= daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.self.myid >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.myid >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.qcm.PACKETMAXSIZE > zksInstance.self.qcm.connectionThreadCnt
zksInstance.self.qcm.PACKETMAXSIZE > zksInstance.sessionTracker.serverId
zksInstance.self.qcm.PACKETMAXSIZE < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.qcm.PACKETMAXSIZE > zksInstance.zkDb.dataTree.scount
zksInstance.self.qcm.PACKETMAXSIZE > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.qcm.RECV_CAPACITY > zksInstance.self.qcm.connectionThreadCnt
zksInstance.self.qcm.RECV_CAPACITY > zksInstance.sessionTracker.serverId
zksInstance.self.qcm.RECV_CAPACITY < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.qcm.RECV_CAPACITY > zksInstance.zkDb.dataTree.scount
zksInstance.self.qcm.RECV_CAPACITY > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.qcm.SEND_CAPACITY != zksInstance.self.qcm.connectionThreadCnt
zksInstance.self.qcm.SEND_CAPACITY != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.qcm.SEND_CAPACITY <= zksInstance.serverStats.packetsReceived
zksInstance.self.qcm.SEND_CAPACITY != zksInstance.sessionTracker.serverId
zksInstance.self.qcm.SEND_CAPACITY != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.qcm.SEND_CAPACITY != zksInstance.zkDb.dataTree.scount
zksInstance.self.qcm.SEND_CAPACITY >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.qcm.SEND_CAPACITY >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.qcm.cnxTO > zksInstance.self.qcm.connectionThreadCnt
zksInstance.self.qcm.cnxTO > zksInstance.sessionTracker.serverId
zksInstance.self.qcm.cnxTO < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.qcm.cnxTO > zksInstance.zkDb.dataTree.scount
zksInstance.self.qcm.cnxTO > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.qcm.connectionThreadCnt < zksInstance.self.qcm.maxBuffer
zksInstance.self.qcm.connectionThreadCnt < zksInstance.self.qcm.socketTimeout
zksInstance.self.qcm.connectionThreadCnt <= zksInstance.self.syncLimit
zksInstance.self.qcm.connectionThreadCnt < zksInstance.self.tickTime
zksInstance.self.qcm.connectionThreadCnt < zksInstance.self.zkDb.commitLogBuffer
zksInstance.self.qcm.connectionThreadCnt < zksInstance.self.zkDb.commitLogCount
zksInstance.self.qcm.connectionThreadCnt < zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.self.qcm.connectionThreadCnt != zksInstance.serverStats.packetsReceived
zksInstance.self.qcm.connectionThreadCnt < zksInstance.sessionTracker.nextSessionId
zksInstance.self.qcm.connectionThreadCnt >= zksInstance.sessionTracker.serverId
zksInstance.sessionTracker.serverId % zksInstance.self.qcm.connectionThreadCnt == 0
zksInstance.self.qcm.connectionThreadCnt < zksInstance.syncProcessor.randRoll
zksInstance.self.qcm.connectionThreadCnt < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.self.qcm.connectionThreadCnt > zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.qcm.connectionThreadCnt > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.self.qcm.connectionThreadCnt < zksInstance.syncProcessor.snapCount
zksInstance.self.qcm.connectionThreadCnt < zksInstance.syncProcessor.zks.superSecret
zksInstance.self.qcm.connectionThreadCnt < zksInstance.syncProcessor.zks.tickTime
zksInstance.self.qcm.connectionThreadCnt < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.self.qcm.connectionThreadCnt < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.self.qcm.connectionThreadCnt < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.self.qcm.connectionThreadCnt < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.qcm.connectionThreadCnt <= zksInstance.zkDb.dataTree.scount
zksInstance.self.qcm.connectionThreadCnt >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.qcm.connectionThreadCnt >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.nextSessionId % zksInstance.self.qcm.maxBuffer == 0
zksInstance.self.qcm.maxBuffer > zksInstance.sessionTracker.serverId
zksInstance.self.qcm.maxBuffer < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.qcm.maxBuffer > zksInstance.zkDb.dataTree.scount
zksInstance.self.qcm.maxBuffer > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.qcm.socketTimeout > zksInstance.sessionTracker.serverId
zksInstance.self.qcm.socketTimeout != zksInstance.syncProcessor.randRoll
zksInstance.self.qcm.socketTimeout < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.qcm.socketTimeout > zksInstance.zkDb.dataTree.scount
zksInstance.self.qcm.socketTimeout > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt > zksInstance.serverStats.packetsReceived
zksInstance.sessionTracker.nextSessionId % zksInstance.self.qcm.threadCnt == 0
zksInstance.self.qcm.threadCnt > zksInstance.sessionTracker.serverId
zksInstance.self.qcm.threadCnt < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.qcm.threadCnt > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.syncLimit > zksInstance.serverStats.packetsReceived
zksInstance.self.syncLimit > zksInstance.sessionTracker.serverId
zksInstance.self.syncLimit < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.syncLimit > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.tickTime > zksInstance.sessionTracker.serverId
zksInstance.self.tickTime < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.tickTime > zksInstance.zkDb.dataTree.scount
zksInstance.self.tickTime > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.commitLogBuffer > zksInstance.sessionTracker.serverId
zksInstance.self.zkDb.commitLogBuffer < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.zkDb.commitLogBuffer > zksInstance.zkDb.dataTree.scount
zksInstance.self.zkDb.commitLogBuffer > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.commitLogCount > zksInstance.sessionTracker.serverId
zksInstance.self.zkDb.commitLogCount < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.zkDb.commitLogCount > zksInstance.zkDb.dataTree.scount
zksInstance.self.zkDb.commitLogCount > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog <= zksInstance.sessionTracker.serverId
zksInstance.self.zkDb.maxCommittedLog % zksInstance.syncProcessor.randRoll == 0
zksInstance.self.zkDb.maxCommittedLog < zksInstance.syncProcessor.randRoll
zksInstance.self.zkDb.maxCommittedLog < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.self.zkDb.maxCommittedLog > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.self.zkDb.maxCommittedLog < zksInstance.syncProcessor.snapCount
zksInstance.self.zkDb.maxCommittedLog < zksInstance.syncProcessor.zks.superSecret
zksInstance.self.zkDb.maxCommittedLog < zksInstance.syncProcessor.zks.tickTime
zksInstance.self.zkDb.maxCommittedLog <= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid))
zksInstance.serverCnxnFactory.zkServer.superSecret > zksInstance.sessionTracker.serverId
zksInstance.serverCnxnFactory.zkServer.superSecret < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverCnxnFactory.zkServer.superSecret > zksInstance.zkDb.dataTree.scount
zksInstance.serverCnxnFactory.zkServer.superSecret > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextSessionId % zksInstance.serverStats.packetsReceived == 0
zksInstance.serverStats.packetsReceived != zksInstance.sessionTracker.serverId
zksInstance.syncProcessor.randRoll % zksInstance.serverStats.packetsReceived == 0
zksInstance.serverStats.packetsReceived > zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.serverStats.packetsReceived > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.serverStats.packetsReceived < zksInstance.syncProcessor.zks.superSecret
zksInstance.serverStats.packetsReceived < zksInstance.syncProcessor.zks.tickTime
zksInstance.serverStats.packetsReceived < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.zkDb.dataTree.lastProcessedZxid % zksInstance.serverStats.packetsReceived == 0
zksInstance.serverStats.packetsReceived != zksInstance.zkDb.dataTree.scount
zksInstance.serverStats.packetsReceived <= daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextSessionId > zksInstance.sessionTracker.serverId
zksInstance.sessionTracker.nextSessionId > zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.sessionTracker.nextSessionId > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.sessionTracker.nextSessionId > zksInstance.syncProcessor.zks.superSecret
zksInstance.sessionTracker.nextSessionId > zksInstance.syncProcessor.zks.tickTime
zksInstance.sessionTracker.nextSessionId % daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE) == 0
zksInstance.sessionTracker.serverId < zksInstance.syncProcessor.randRoll
zksInstance.sessionTracker.serverId < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.sessionTracker.serverId >= zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.sessionTracker.serverId > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.sessionTracker.serverId < zksInstance.syncProcessor.snapCount
zksInstance.sessionTracker.serverId < zksInstance.syncProcessor.zks.superSecret
zksInstance.sessionTracker.serverId < zksInstance.syncProcessor.zks.tickTime
zksInstance.sessionTracker.serverId < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.sessionTracker.serverId >= zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.sessionTracker.serverId < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.sessionTracker.serverId < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.sessionTracker.serverId < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.sessionTracker.serverId < zksInstance.zkDb.dataTree.scount
zksInstance.sessionTracker.serverId <= daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.serverId != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.serverId >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.serverId >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid))
zksInstance.syncProcessor.randRoll > zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.syncProcessor.randRoll > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.syncProcessor.randRoll < zksInstance.syncProcessor.zks.superSecret
zksInstance.syncProcessor.randRoll != zksInstance.syncProcessor.zks.tickTime
zksInstance.syncProcessor.randRoll > zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.txnLogFactory.txnLog.currentSize % zksInstance.syncProcessor.randRoll == 0
zksInstance.syncProcessor.randRoll < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.syncProcessor.randRoll > zksInstance.zkDb.dataTree.scount
zksInstance.syncProcessor.randRoll % daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 == 0
zksInstance.syncProcessor.randRoll % daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 0
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 % zksInstance.syncProcessor.randRoll == 0
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) % zksInstance.syncProcessor.randRoll == 0
zksInstance.syncProcessor.randRoll > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.randRoll % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 == 0
zksInstance.syncProcessor.requestOfDeath.createTime > zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.syncProcessor.requestOfDeath.createTime < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.syncProcessor.requestOfDeath.createTime > zksInstance.zkDb.dataTree.scount
zksInstance.syncProcessor.requestOfDeath.createTime > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.requestOfDeath.cxid < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.syncProcessor.requestOfDeath.cxid % zksInstance.zkDb.dataTree.scount == 0
zksInstance.syncProcessor.requestOfDeath.cxid < zksInstance.zkDb.dataTree.scount
zksInstance.syncProcessor.requestOfDeath.zxid < zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.syncProcessor.requestOfDeath.zxid < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.syncProcessor.requestOfDeath.zxid < zksInstance.zkDb.dataTree.scount
zksInstance.syncProcessor.requestOfDeath.zxid < daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.snapCount > zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.syncProcessor.snapCount < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.syncProcessor.snapCount > zksInstance.zkDb.dataTree.scount
zksInstance.syncProcessor.snapCount > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.superSecret > zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.syncProcessor.zks.superSecret < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.syncProcessor.zks.superSecret > zksInstance.zkDb.dataTree.scount
zksInstance.syncProcessor.zks.superSecret > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.superSecret > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.tickTime > zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.syncProcessor.zks.tickTime < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.syncProcessor.zks.tickTime > zksInstance.zkDb.dataTree.scount
zksInstance.syncProcessor.zks.tickTime > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.tickTime > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.txnLogFactory.txnLog.currentSize < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.currentSize >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.txnLogFactory.txnLog.preAllocSize < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.zkDb.dataTree.lastProcessedZxid > zksInstance.zkDb.dataTree.scount
zksInstance.zkDb.dataTree.lastProcessedZxid > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.scount != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.scount >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.nextSessionId - 7.2057594007977984E16 * zksInstance.sessionTracker.serverId - 92995584 * zksInstance.zkDb.dataTree.scount - 1.729184989184E12 == 0
zksInstance.commitProcessor.matchSyncs == zksInstance.self.authInitialized
zksInstance.commitProcessor.matchSyncs == zksInstance.self.authLearner.quorumRequireSasl
zksInstance.commitProcessor.matchSyncs == zksInstance.self.authServer.quorumRequireSasl
zksInstance.commitProcessor.matchSyncs == zksInstance.self.qcm.quorumSaslAuthEnabled
zksInstance.commitProcessor.matchSyncs == zksInstance.self.quorumLearnerSaslAuthRequired
zksInstance.commitProcessor.matchSyncs == zksInstance.self.quorumSaslEnableAuth
zksInstance.commitProcessor.matchSyncs == zksInstance.self.quorumServerSaslAuthRequired
zksInstance.hzxid == zksInstance.self.myid
zksInstance.hzxid == zksInstance.self.qcm.mySid
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
zksInstance.self.electionTimeTaken == 218
zksInstance.self.qcm.connectionThreadCnt == 4 || zksInstance.self.qcm.connectionThreadCnt == 9
zksInstance.serverStats.minLatency == 23 || zksInstance.serverStats.minLatency == 44 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 44 || zksInstance.serverStats.totalLatency == 67
zksInstance.sessionTracker.nextSessionId == 1676123242497L
zksInstance.syncProcessor.randRoll == 8031
zksInstance.syncProcessor.requestOfDeath.createTime == 25543979
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == null
zksInstance.commitProcessor.matchSyncs == zksInstance.serverCnxnFactory.zkServer.syncRequestProcessorEnabled
zksInstance.commitProcessor.matchSyncs == zksInstance.syncProcessor.zks.syncRequestProcessorEnabled
zksInstance.commitProcessor.matchSyncs == zksInstance.syncRequestProcessorEnabled
zksInstance.hzxid == zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.hzxid == zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.hzxid == daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.maxSessionTimeout == zksInstance.self.electionTimeTaken
zksInstance.maxSessionTimeout == daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.authServer.MAX_RETRIES == daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.self.authServer.MAX_RETRIES == daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.self.electionType == daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.self.electionType == daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.self.electionType == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
daikon.Quant.pairwiseEqual(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionType-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.authServer.MAX_RETRIES-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.authServer.MAX_RETRIES-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionType-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.electionType-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
zksInstance.self.acceptedEpoch == 1
zksInstance.self.qcm.connectionThreadCnt == 8
zksInstance.self.qcm.threadCnt == 6
zksInstance.self.start_fle == 25548197
zksInstance.self.zkDb.maxCommittedLog == -1 || zksInstance.self.zkDb.maxCommittedLog == 0
zksInstance.sessionTracker.nextSessionId == 72059268387569664L
zksInstance.syncProcessor.randRoll == 29797
zksInstance.requestsInProcess == zksInstance.self.bcVote.version
zksInstance.requestsInProcess == zksInstance.self.currentVote.version
zksInstance.requestsInProcess == zksInstance.self.end_fle
zksInstance.requestsInProcess == zksInstance.self.start_fle
zksInstance.requestsInProcess == zksInstance.self.tick
zksInstance.self.bcVote.zxid == zksInstance.self.electionAlg.proposedZxid
zksInstance.serverStats.packetsReceived == zksInstance.sessionTracker.serverId
zksInstance.serverStats.packetsReceived == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.serverId == daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverStats.maxLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverStats.totalLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.lastZxidSeen)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.lastProcessedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.lastZxidSeen)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.lastProcessedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
zksInstance.firstProcessor.zks.hzxid == 4294967296L || zksInstance.firstProcessor.zks.hzxid == 4294967297L
zksInstance.firstProcessor.zks.requestsInProcess == 0
zksInstance.hzxid == 0 || zksInstance.hzxid == 4294967296L || zksInstance.hzxid == 4294967297L
zksInstance.self.bcVote.zxid == 0 || zksInstance.self.bcVote.zxid == 4294967298L
zksInstance.self.electionTimeTaken == 201 || zksInstance.self.electionTimeTaken == 206
zksInstance.self.myid == 0 || zksInstance.self.myid == 2
zksInstance.self.qcm.connectionThreadCnt == 2 || zksInstance.self.qcm.connectionThreadCnt == 4
zksInstance.self.qcm.threadCnt == 2 || zksInstance.self.qcm.threadCnt == 4
zksInstance.sessionTracker.currentTime == 25572660
zksInstance.sessionTracker.nextExpirationTime == 25576000
zksInstance.sessionTracker.nextSessionId == 1675961303040L || zksInstance.sessionTracker.nextSessionId == 144116864005636096L
zksInstance.syncProcessor.randRoll == 8228
zksInstance.zkDb.dataTree.lastProcessedZxid == 4294967296L || zksInstance.zkDb.dataTree.lastProcessedZxid == 4294967297L || zksInstance.zkDb.dataTree.lastProcessedZxid == 4294967298L
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == null
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == null
daikon.Quant.subsetOf(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId))
daikon.Quant.eltsEqual(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId))
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader)
zksInstance.self.electionTimeTaken == 223
zksInstance.sessionTracker.nextSessionId == 1674047389696L
zksInstance.syncProcessor.randRoll == 30756
zksInstance.self.electionTimeTaken == 217
zksInstance.self.qcm.connectionThreadCnt == 4
zksInstance.sessionTracker.nextSessionId == 1675630149632L
zksInstance.syncProcessor.randRoll == 30655
zksInstance.self.authServer.MAX_RETRIES != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.qcm.connectionThreadCnt != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.qcm.connectionThreadCnt != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.qcm.connectionThreadCnt != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.qcm.connectionThreadCnt > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 56
zksInstance.serverStats.minLatency == 15 || zksInstance.serverStats.minLatency == 56 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 25505693
zksInstance.sessionTracker.nextExpirationTime == 25506000
zksInstance.sessionTracker.nextSessionId == 72059265579024385L
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 60
zksInstance.sessionTracker.currentTime == 26767340
zksInstance.sessionTracker.nextExpirationTime == 26769000
zksInstance.serverStats.maxLatency - 30 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.serverStats.minLatency > zksInstance.zkDb.minCommittedLog
zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.minCommittedLog - -2147483648 == 0
49 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178044786966528E17 == 0
49 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 32 || zksInstance.serverStats.maxLatency == 167
zksInstance.sessionTracker.currentTime == 25884242 || zksInstance.sessionTracker.currentTime == 25887001
zksInstance.sessionTracker.nextExpirationTime == 25887000 || zksInstance.sessionTracker.nextExpirationTime == 25890000
zksInstance.sessionTracker.nextSessionId == 72059290387611649L || zksInstance.sessionTracker.nextSessionId == 72059290492600320L
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId) != null
zksInstance.serverStats.maxLatency % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 0
zksInstance.zkDb.minCommittedLog <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.hzxid + 200 * zksInstance.serverStats.count - 201 * zksInstance.serverStats.packetsReceived + 402 == 0
zksInstance.hzxid + 200 * zksInstance.serverStats.count - 201 * zksInstance.serverStats.packetsSent + 201 == 0
2759 * zksInstance.hzxid - 2759 * zksInstance.serverStats.count - 201 * zksInstance.sessionTracker.currentTime + 5.202732642E9 == 0
1000 * zksInstance.hzxid - 1000 * zksInstance.serverStats.count - 67 * zksInstance.sessionTracker.nextExpirationTime + 1734429000 == 0
zksInstance.hzxid - zksInstance.serverStats.count - 201 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 201 == 0
zksInstance.hzxid - zksInstance.serverStats.count - 201 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 == 0
2759 * zksInstance.hzxid - 2759 * zksInstance.serverStats.packetsReceived - 200 * zksInstance.sessionTracker.currentTime + 5.176853918E9 == 0
15 * zksInstance.hzxid - 15 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextExpirationTime + 25887030 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived - 200 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 202 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived - 200 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2 == 0
2759 * zksInstance.hzxid - 2759 * zksInstance.serverStats.packetsSent - 200 * zksInstance.sessionTracker.currentTime + 5.176851159E9 == 0
15 * zksInstance.hzxid - 15 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextExpirationTime + 25887015 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent - 200 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 201 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent - 200 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 1 == 0
2759 * zksInstance.serverStats.count - 2759 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.currentTime - 25878724 == 0
3000 * zksInstance.serverStats.count - 3000 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextExpirationTime - 25881000 == 0
104988671 * zksInstance.serverStats.count - 104988671 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059290177634304E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 1 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2 == 0
2759 * zksInstance.serverStats.count - 2759 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.currentTime - 25881483 == 0
3000 * zksInstance.serverStats.count - 3000 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextExpirationTime - 25884000 == 0
104988671 * zksInstance.serverStats.count - 104988671 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059290282622976E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 1 == 0
104988671 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId - 104988671 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.2059290177634304E16 == 0
104988671 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId - 104988671 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.2059290282622976E16 == 0
zksInstance.sessionTracker.currentTime == 26154000 || zksInstance.sessionTracker.currentTime == 26155525
zksInstance.sessionTracker.nextExpirationTime == 26157000
zksInstance.sessionTracker.nextSessionId == 72059308062474241L || zksInstance.sessionTracker.nextSessionId == 72059308166348800L
1525 * zksInstance.hzxid - 1525 * zksInstance.serverStats.count - 201 * zksInstance.sessionTracker.currentTime + 5.256954E9 == 0
61 * zksInstance.hzxid - 61 * zksInstance.serverStats.packetsReceived - 8 * zksInstance.sessionTracker.currentTime + 209232122 == 0
61 * zksInstance.hzxid - 61 * zksInstance.serverStats.packetsSent - 8 * zksInstance.sessionTracker.currentTime + 209232061 == 0
1525 * zksInstance.hzxid - 201 * zksInstance.sessionTracker.currentTime - 1525 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 5.256954E9 == 0
1525 * zksInstance.serverStats.count - 1525 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.currentTime - 26150950 == 0
103874559 * zksInstance.serverStats.count - 103874559 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.205930785472512E16 == 0
1525 * zksInstance.serverStats.count - 1525 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.currentTime - 26152475 == 0
103874559 * zksInstance.serverStats.count - 103874559 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.205930795859968E16 == 0
1525 * zksInstance.serverStats.count + 201 * zksInstance.sessionTracker.currentTime - 1525 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 5.256954E9 == 0
103874559 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId - 103874559 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.205930785472512E16 == 0
103874559 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId - 103874559 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.205930795859968E16 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 37
zksInstance.serverStats.minLatency == 8 || zksInstance.serverStats.minLatency == 37 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 37 || zksInstance.serverStats.totalLatency == 45
zksInstance.sessionTracker.currentTime == 25887795
zksInstance.sessionTracker.nextExpirationTime == 25890000
zksInstance.sessionTracker.nextSessionId == 72059290620461057L
zksInstance.serverStats.packetsReceived == 2 || zksInstance.serverStats.packetsReceived == 4 || zksInstance.serverStats.packetsReceived == 5
zksInstance.serverStats.packetsSent == 1 || zksInstance.serverStats.packetsSent == 3 || zksInstance.serverStats.packetsSent == 4
zksInstance.sessionTracker.currentTime == 26157068
zksInstance.sessionTracker.nextExpirationTime == 26160000
zksInstance.sessionTracker.nextSessionId == 72059308267536385L
zksInstance.firstProcessor.zks.maxSessionTimeout == daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.maxSessionTimeout == zksInstance.self.cnxnFactory.maxClientCnxns
zksInstance.self.bcVote.peerEpoch == zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.bcVote.zxid == zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.electionType == zksInstance.self.initLimit
zksInstance.self.electionType == zksInstance.self.syncLimit
zksInstance.self.electionType == zksInstance.sessionTracker.serverId
zksInstance.self.electionType == daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.self.electionType == daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)-1
zksInstance.self.electionType == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.self.tick == zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.syncProcessor.requestOfDeath.cxid == daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionType-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.electionType-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionType-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
zksInstance.firstProcessor.zks.tickTime == 2000
zksInstance.requestsInProcess >= 0
zksInstance.self.bcVote.electionEpoch == 1
zksInstance.self.bcVote.id == 5
zksInstance.self.bcVote.zxid == 0 || zksInstance.self.bcVote.zxid == 4294976583L
zksInstance.self.electionTimeTaken == 211 || zksInstance.self.electionTimeTaken == 284
zksInstance.self.myid == 3 || zksInstance.self.myid == 5
zksInstance.self.qcm.socketTimeout == 6000
zksInstance.self.qcm.threadCnt == 8
daikon.Quant.eltsNotEqual(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, null)
zksInstance.self.quorumConfig.half == 2
zksInstance.self.tick == 0 || zksInstance.self.tick == 5
zksInstance.self.tickTime == 2000
zksInstance.self.zkDb.minCommittedLog >= 0
zksInstance.serverCnxnFactory.zkServer.requestsInProcess >= 0
zksInstance.serverStats.maxLatency >= 0
zksInstance.sessionTracker.currentTime == 25797314 || zksInstance.sessionTracker.currentTime == 25806000 || zksInstance.sessionTracker.currentTime == 25808000
zksInstance.sessionTracker.nextExpirationTime == 25798000 || zksInstance.sessionTracker.nextExpirationTime == 25808000 || zksInstance.sessionTracker.nextExpirationTime == 25810000
zksInstance.sessionTracker.serverId == 3
daikon.Quant.eltsNotEqual(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, null)
zksInstance.syncProcessor.randRoll == 19875
zksInstance.syncProcessor.requestOfDeath.createTime == 25771622
zksInstance.syncProcessor.zks.requestsInProcess >= 0
zksInstance.syncProcessor.zks.tickTime == 2000
zksInstance.txnLogFactory.txnLog.currentSize >= 0
zksInstance.zkDb.dataTree.lastProcessedZxid >= 0
zksInstance.zkDb.maxCommittedLog >= 0
zksInstance.zkDb.minCommittedLog >= 0
daikon.Quant.eltsNotEqual(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, null)
daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) == 1
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1) != null
zksInstance.firstProcessor.zks.hzxid > zksInstance.firstProcessor.zks.maxSessionTimeout
zksInstance.firstProcessor.zks.hzxid > zksInstance.requestsInProcess
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.acceptedEpoch
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.bcVote.electionEpoch
zksInstance.firstProcessor.zks.hzxid % zksInstance.self.bcVote.peerEpoch == 0
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.bcVote.peerEpoch
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.bcVote.version
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.bcVote.zxid
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.myid
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.qcm.threadCnt
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.quorumConfig.half
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.tick
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.tickTime
zksInstance.firstProcessor.zks.hzxid - zksInstance.self.zkDb.minCommittedLog - -2147483648 == 0
zksInstance.firstProcessor.zks.hzxid > zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.firstProcessor.zks.hzxid > zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.firstProcessor.zks.hzxid >= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.txnLogFactory.txnLog.lastZxidSeen % zksInstance.firstProcessor.zks.hzxid == 0
zksInstance.firstProcessor.zks.hzxid >= zksInstance.zkDb.maxCommittedLog
zksInstance.firstProcessor.zks.hzxid - zksInstance.zkDb.minCommittedLog - -2147483648 == 0
zksInstance.firstProcessor.zks.hzxid > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.hzxid > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.hzxid > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.hzxid > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) % zksInstance.firstProcessor.zks.hzxid == 0
zksInstance.firstProcessor.zks.hzxid > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.hzxid % daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 == 0
zksInstance.firstProcessor.zks.hzxid > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.firstProcessor.zks.requestsInProcess
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.hzxid
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.requestsInProcess
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.self.acceptedEpoch
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.self.bcVote.peerEpoch
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.self.bcVote.zxid
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.self.electionTimeTaken
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.self.myid
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.self.tick
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.self.zkDb.maxCommittedLog
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.self.zkDb.minCommittedLog
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.serverStats.count
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.serverStats.maxLatency
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.serverStats.minLatency
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.serverStats.packetsReceived
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.serverStats.packetsSent
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.serverStats.totalLatency
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.sessionTracker.currentTime
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.sessionTracker.nextExpirationTime
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.sessionTracker.nextSessionId
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.zkDb.maxCommittedLog
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.zkDb.minCommittedLog
zksInstance.firstProcessor.zks.maxSessionTimeout <= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.maxSessionTimeout <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.maxSessionTimeout <= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.maxSessionTimeout <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.hzxid
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.requestsInProcess*zksInstance.requestsInProcess
zksInstance.requestsInProcess == zksInstance.firstProcessor.zks.requestsInProcess*zksInstance.firstProcessor.zks.requestsInProcess
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.acceptedEpoch
zksInstance.firstProcessor.zks.requestsInProcess <= zksInstance.self.bcVote.electionEpoch
zksInstance.firstProcessor.zks.requestsInProcess <= zksInstance.self.bcVote.peerEpoch
zksInstance.firstProcessor.zks.requestsInProcess >= zksInstance.self.bcVote.version
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.bcVote.zxid
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.myid
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.qcm.threadCnt
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.quorumConfig.half
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.tickTime
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.zkDb.maxCommittedLog
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.self.zkDb.minCommittedLog
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.serverCnxnFactory.zkServer.requestsInProcess*zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.serverCnxnFactory.zkServer.requestsInProcess == zksInstance.firstProcessor.zks.requestsInProcess*zksInstance.firstProcessor.zks.requestsInProcess
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.serverCnxnFactory.zkServer.superSecret
2 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.firstProcessor.zks.requestsInProcess <= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.zkDb.maxCommittedLog
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.zkDb.minCommittedLog
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) == zksInstance.firstProcessor.zks.requestsInProcess*zksInstance.firstProcessor.zks.requestsInProcess
zksInstance.firstProcessor.zks.requestsInProcess == daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)*daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == zksInstance.firstProcessor.zks.requestsInProcess*zksInstance.firstProcessor.zks.requestsInProcess
zksInstance.firstProcessor.zks.requestsInProcess == daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)*daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.requestsInProcess <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.requestsInProcess <= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.requestsInProcess >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.requestsInProcess >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.requestsInProcess % daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 == 0
zksInstance.firstProcessor.zks.requestsInProcess <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.requestsInProcess >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.superSecret < zksInstance.hzxid
zksInstance.firstProcessor.zks.superSecret > zksInstance.requestsInProcess
zksInstance.firstProcessor.zks.superSecret > zksInstance.self.acceptedEpoch
zksInstance.firstProcessor.zks.superSecret > zksInstance.self.bcVote.peerEpoch
zksInstance.firstProcessor.zks.superSecret < zksInstance.self.bcVote.zxid
zksInstance.firstProcessor.zks.superSecret > zksInstance.self.electionTimeTaken
zksInstance.firstProcessor.zks.superSecret > zksInstance.self.myid
zksInstance.firstProcessor.zks.superSecret > zksInstance.self.tick
zksInstance.firstProcessor.zks.superSecret < zksInstance.self.zkDb.maxCommittedLog
zksInstance.firstProcessor.zks.superSecret < zksInstance.self.zkDb.minCommittedLog
zksInstance.firstProcessor.zks.superSecret > zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.firstProcessor.zks.superSecret > zksInstance.sessionTracker.currentTime
zksInstance.firstProcessor.zks.superSecret > zksInstance.sessionTracker.nextExpirationTime
zksInstance.firstProcessor.zks.superSecret != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.firstProcessor.zks.superSecret < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.firstProcessor.zks.superSecret < zksInstance.zkDb.maxCommittedLog
zksInstance.firstProcessor.zks.superSecret < zksInstance.zkDb.minCommittedLog
zksInstance.firstProcessor.zks.superSecret > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.superSecret > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.superSecret > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.superSecret > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) % zksInstance.firstProcessor.zks.superSecret == 0
zksInstance.firstProcessor.zks.superSecret > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.superSecret % daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 == 0
zksInstance.firstProcessor.zks.superSecret > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.tickTime < zksInstance.hzxid
zksInstance.firstProcessor.zks.tickTime > zksInstance.requestsInProcess
zksInstance.firstProcessor.zks.tickTime > zksInstance.self.acceptedEpoch
zksInstance.firstProcessor.zks.tickTime > zksInstance.self.bcVote.peerEpoch
zksInstance.firstProcessor.zks.tickTime < zksInstance.self.bcVote.zxid
zksInstance.firstProcessor.zks.tickTime > zksInstance.self.electionTimeTaken
zksInstance.firstProcessor.zks.tickTime > zksInstance.self.myid
zksInstance.firstProcessor.zks.tickTime > zksInstance.self.tick
zksInstance.firstProcessor.zks.tickTime < zksInstance.self.zkDb.maxCommittedLog
zksInstance.firstProcessor.zks.tickTime < zksInstance.self.zkDb.minCommittedLog
zksInstance.firstProcessor.zks.tickTime > zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.firstProcessor.zks.tickTime < zksInstance.sessionTracker.currentTime
zksInstance.firstProcessor.zks.tickTime < zksInstance.sessionTracker.nextExpirationTime
zksInstance.firstProcessor.zks.tickTime != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.firstProcessor.zks.tickTime < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.firstProcessor.zks.tickTime < zksInstance.zkDb.maxCommittedLog
zksInstance.firstProcessor.zks.tickTime < zksInstance.zkDb.minCommittedLog
zksInstance.firstProcessor.zks.tickTime > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.tickTime > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.tickTime > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.tickTime > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) % zksInstance.firstProcessor.zks.tickTime == 0
zksInstance.firstProcessor.zks.tickTime > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.tickTime % daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 == 0
zksInstance.firstProcessor.zks.tickTime > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.hzxid != zksInstance.self.bcVote.electionEpoch
zksInstance.hzxid >= zksInstance.self.bcVote.peerEpoch
zksInstance.hzxid >= zksInstance.self.bcVote.zxid
zksInstance.hzxid != zksInstance.self.myid
zksInstance.hzxid != zksInstance.self.quorumConfig.half
zksInstance.hzxid >= zksInstance.self.tick
zksInstance.hzxid > zksInstance.sessionTracker.currentTime
zksInstance.hzxid > zksInstance.sessionTracker.nextExpirationTime
zksInstance.hzxid % zksInstance.sessionTracker.serverId == 0
zksInstance.hzxid < zksInstance.sessionTracker.serverId
zksInstance.hzxid <= zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.hzxid >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.maxSessionTimeout <= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.maxSessionTimeout <= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.maxSessionTimeout <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess != zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE
zksInstance.requestsInProcess != zksInstance.self.bcVote.id
zksInstance.requestsInProcess != zksInstance.self.electionAlg.finalizeWait
zksInstance.requestsInProcess != zksInstance.self.electionType
zksInstance.requestsInProcess != zksInstance.self.myid
zksInstance.requestsInProcess != zksInstance.self.qcm.RECV_CAPACITY
zksInstance.requestsInProcess != zksInstance.self.qcm.threadCnt
zksInstance.requestsInProcess != zksInstance.self.quorumConfig.half
zksInstance.requestsInProcess != zksInstance.sessionTracker.serverId
zksInstance.requestsInProcess >= zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.requestsInProcess > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.requestsInProcess != zksInstance.zkDb.minCommittedLog
zksInstance.requestsInProcess != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.requestsInProcess != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.self.OBSERVER_ID > zksInstance.self.tick
zksInstance.self.OBSERVER_ID > zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.OBSERVER_ID > zksInstance.sessionTracker.currentTime
zksInstance.self.OBSERVER_ID > zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.OBSERVER_ID > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.OBSERVER_ID > zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.OBSERVER_ID > zksInstance.zkDb.maxCommittedLog
zksInstance.self.OBSERVER_ID > zksInstance.zkDb.minCommittedLog
zksInstance.self.OBSERVER_ID > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.OBSERVER_ID > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.OBSERVER_ID > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE < zksInstance.self.electionTimeTaken
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > zksInstance.self.tick
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != zksInstance.serverStats.maxLatency
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != zksInstance.serverStats.packetsReceived
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE < zksInstance.sessionTracker.currentTime
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != zksInstance.zkDb.maxCommittedLog
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != zksInstance.zkDb.minCommittedLog
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.acceptedEpoch >= zksInstance.self.bcVote.electionEpoch
zksInstance.self.acceptedEpoch > zksInstance.self.bcVote.peerEpoch
zksInstance.self.acceptedEpoch < zksInstance.self.electionType
zksInstance.self.acceptedEpoch < zksInstance.self.myid
zksInstance.self.acceptedEpoch < zksInstance.self.qcm.threadCnt
zksInstance.self.acceptedEpoch <= zksInstance.self.quorumConfig.half
zksInstance.self.acceptedEpoch != zksInstance.self.tick
zksInstance.serverStats.maxLatency % zksInstance.self.acceptedEpoch == 0
zksInstance.self.acceptedEpoch != zksInstance.serverStats.minLatency
zksInstance.self.acceptedEpoch < zksInstance.sessionTracker.currentTime
zksInstance.sessionTracker.currentTime % zksInstance.self.acceptedEpoch == 0
zksInstance.self.acceptedEpoch < zksInstance.sessionTracker.nextExpirationTime
zksInstance.sessionTracker.nextExpirationTime % zksInstance.self.acceptedEpoch == 0
zksInstance.self.acceptedEpoch < zksInstance.sessionTracker.serverId
zksInstance.syncProcessor.zks.requestsInProcess % zksInstance.self.acceptedEpoch == 0
zksInstance.txnLogFactory.txnLog.currentSize % zksInstance.self.acceptedEpoch == 0
zksInstance.self.acceptedEpoch != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.acceptedEpoch != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.acceptedEpoch != zksInstance.zkDb.maxCommittedLog
zksInstance.self.acceptedEpoch != zksInstance.zkDb.minCommittedLog
zksInstance.self.acceptedEpoch >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.self.acceptedEpoch > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) % zksInstance.self.acceptedEpoch == 0
zksInstance.self.bcVote.electionEpoch >= zksInstance.self.bcVote.peerEpoch
zksInstance.self.bcVote.electionEpoch != zksInstance.self.bcVote.zxid
zksInstance.self.bcVote.electionEpoch < zksInstance.self.electionTimeTaken
zksInstance.self.bcVote.electionEpoch < zksInstance.self.myid
zksInstance.self.bcVote.electionEpoch != zksInstance.self.tick
zksInstance.self.bcVote.electionEpoch != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.bcVote.electionEpoch != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.bcVote.electionEpoch != zksInstance.serverStats.maxLatency
zksInstance.self.bcVote.electionEpoch != zksInstance.serverStats.minLatency
zksInstance.self.bcVote.electionEpoch <= zksInstance.serverStats.packetsReceived
zksInstance.self.bcVote.electionEpoch <= zksInstance.serverStats.packetsSent
zksInstance.self.bcVote.electionEpoch != zksInstance.serverStats.totalLatency
zksInstance.self.bcVote.electionEpoch < zksInstance.sessionTracker.currentTime
zksInstance.self.bcVote.electionEpoch < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.bcVote.electionEpoch < zksInstance.sessionTracker.nextSessionId
zksInstance.self.bcVote.electionEpoch != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.bcVote.electionEpoch != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.bcVote.electionEpoch != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.bcVote.electionEpoch != zksInstance.zkDb.maxCommittedLog
zksInstance.self.bcVote.electionEpoch != zksInstance.zkDb.minCommittedLog
zksInstance.self.bcVote.electionEpoch >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id >= zksInstance.self.myid
zksInstance.self.bcVote.id >= zksInstance.self.tick
zksInstance.self.bcVote.id < zksInstance.sessionTracker.currentTime
zksInstance.self.bcVote.id < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.bcVote.id != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.bcVote.id != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.bcVote.id != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.bcVote.id != zksInstance.zkDb.maxCommittedLog
zksInstance.self.bcVote.id != zksInstance.zkDb.minCommittedLog
zksInstance.self.bcVote.peerEpoch <= zksInstance.self.bcVote.zxid
zksInstance.self.bcVote.peerEpoch < zksInstance.self.electionType
zksInstance.self.bcVote.peerEpoch < zksInstance.self.myid
zksInstance.self.bcVote.peerEpoch < zksInstance.self.quorumConfig.half
zksInstance.self.bcVote.peerEpoch <= zksInstance.serverStats.minLatency
zksInstance.self.bcVote.peerEpoch < zksInstance.sessionTracker.currentTime
zksInstance.sessionTracker.currentTime % zksInstance.self.bcVote.peerEpoch == 0
zksInstance.self.bcVote.peerEpoch < zksInstance.sessionTracker.nextExpirationTime
zksInstance.sessionTracker.nextExpirationTime % zksInstance.self.bcVote.peerEpoch == 0
zksInstance.self.bcVote.peerEpoch < zksInstance.sessionTracker.serverId
zksInstance.self.bcVote.peerEpoch <= zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.bcVote.peerEpoch <= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.bcVote.peerEpoch <= zksInstance.zkDb.maxCommittedLog
zksInstance.self.bcVote.peerEpoch <= zksInstance.zkDb.minCommittedLog
zksInstance.self.bcVote.peerEpoch >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.version < zksInstance.self.myid
zksInstance.self.bcVote.version <= zksInstance.self.tick
zksInstance.self.bcVote.version <= zksInstance.self.zkDb.minCommittedLog
zksInstance.self.bcVote.version <= zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.bcVote.version <= zksInstance.serverStats.count
zksInstance.self.bcVote.version <= zksInstance.serverStats.maxLatency
zksInstance.self.bcVote.version <= zksInstance.serverStats.minLatency
zksInstance.self.bcVote.version < zksInstance.serverStats.packetsSent
zksInstance.self.bcVote.version <= zksInstance.serverStats.totalLatency
zksInstance.self.bcVote.version < zksInstance.sessionTracker.currentTime
zksInstance.self.bcVote.version < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.bcVote.version <= zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.bcVote.version <= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.bcVote.version <= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.bcVote.version <= zksInstance.zkDb.maxCommittedLog
zksInstance.self.bcVote.version <= zksInstance.zkDb.minCommittedLog
zksInstance.self.bcVote.version <= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.version <= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.version <= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.version >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.version <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.version <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.zxid != zksInstance.self.myid
zksInstance.self.bcVote.zxid != zksInstance.self.quorumConfig.half
zksInstance.self.bcVote.zxid >= zksInstance.self.tick
zksInstance.self.bcVote.zxid <= zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.bcVote.zxid != zksInstance.serverStats.packetsSent
zksInstance.self.bcVote.zxid > zksInstance.sessionTracker.currentTime
zksInstance.self.bcVote.zxid > zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.bcVote.zxid < zksInstance.sessionTracker.serverId
zksInstance.self.bcVote.zxid < zksInstance.syncProcessor.randRoll
zksInstance.self.bcVote.zxid < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.self.bcVote.zxid < zksInstance.syncProcessor.snapCount
zksInstance.self.bcVote.zxid <= zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.bcVote.zxid < zksInstance.syncProcessor.zks.superSecret
zksInstance.self.bcVote.zxid < zksInstance.syncProcessor.zks.tickTime
zksInstance.self.bcVote.zxid <= zksInstance.zkDb.maxCommittedLog
zksInstance.self.bcVote.zxid >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.zxid >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.finalizeWait < zksInstance.self.electionTimeTaken
zksInstance.self.electionAlg.finalizeWait > zksInstance.self.tick
zksInstance.self.electionAlg.finalizeWait != zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.electionAlg.finalizeWait != zksInstance.serverStats.count
zksInstance.self.electionAlg.finalizeWait != zksInstance.serverStats.maxLatency
zksInstance.self.electionAlg.finalizeWait != zksInstance.serverStats.packetsReceived
zksInstance.self.electionAlg.finalizeWait != zksInstance.serverStats.packetsSent
zksInstance.self.electionAlg.finalizeWait != zksInstance.serverStats.totalLatency
zksInstance.self.electionAlg.finalizeWait < zksInstance.sessionTracker.currentTime
zksInstance.self.electionAlg.finalizeWait < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.electionAlg.finalizeWait != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.electionAlg.finalizeWait != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.electionAlg.finalizeWait != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.electionAlg.finalizeWait != zksInstance.zkDb.maxCommittedLog
zksInstance.self.electionAlg.finalizeWait != zksInstance.zkDb.minCommittedLog
zksInstance.self.electionAlg.finalizeWait > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.finalizeWait > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.finalizeWait > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.maxNotificationInterval > zksInstance.self.tick
zksInstance.self.electionAlg.maxNotificationInterval > zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.electionAlg.maxNotificationInterval != zksInstance.serverStats.totalLatency
zksInstance.self.electionAlg.maxNotificationInterval < zksInstance.sessionTracker.currentTime
zksInstance.self.electionAlg.maxNotificationInterval < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.electionAlg.maxNotificationInterval > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.electionAlg.maxNotificationInterval != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.electionAlg.maxNotificationInterval != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.electionAlg.maxNotificationInterval != zksInstance.zkDb.maxCommittedLog
zksInstance.self.electionAlg.maxNotificationInterval != zksInstance.zkDb.minCommittedLog
zksInstance.self.electionAlg.maxNotificationInterval > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.maxNotificationInterval > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.maxNotificationInterval > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.electionTimeTaken > zksInstance.self.qcm.RECV_CAPACITY
zksInstance.self.electionTimeTaken > zksInstance.self.quorumConfig.half
zksInstance.self.electionTimeTaken > zksInstance.self.tick
zksInstance.self.electionTimeTaken > zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.electionTimeTaken != zksInstance.serverStats.packetsReceived
zksInstance.self.electionTimeTaken != zksInstance.serverStats.packetsSent
zksInstance.self.electionTimeTaken < zksInstance.sessionTracker.currentTime
zksInstance.self.electionTimeTaken < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.electionTimeTaken > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.electionTimeTaken != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.electionTimeTaken != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.electionTimeTaken != zksInstance.zkDb.maxCommittedLog
zksInstance.self.electionTimeTaken != zksInstance.zkDb.minCommittedLog
zksInstance.self.electionTimeTaken > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.electionTimeTaken > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.electionTimeTaken > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.electionTimeTaken > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.electionTimeTaken > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.electionType <= zksInstance.self.myid
zksInstance.self.electionType != zksInstance.self.tick
zksInstance.self.electionType != zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.electionType != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.electionType != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.electionType != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.electionType != zksInstance.zkDb.maxCommittedLog
zksInstance.self.electionType != zksInstance.zkDb.minCommittedLog
zksInstance.self.electionType != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.electionType != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.electionType != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.electionType >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.electionType > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.myid > zksInstance.self.quorumConfig.half
zksInstance.self.myid >= zksInstance.self.tick
zksInstance.self.myid != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.myid != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.myid != zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.myid != zksInstance.serverStats.maxLatency
zksInstance.self.myid != zksInstance.serverStats.minLatency
zksInstance.self.myid != zksInstance.serverStats.totalLatency
zksInstance.self.myid < zksInstance.sessionTracker.currentTime
zksInstance.self.myid < zksInstance.sessionTracker.nextExpirationTime
zksInstance.sessionTracker.nextExpirationTime % zksInstance.self.myid == 0
zksInstance.self.myid > zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.myid != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.myid != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.myid != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.myid != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.myid != zksInstance.zkDb.maxCommittedLog
zksInstance.self.myid != zksInstance.zkDb.minCommittedLog
zksInstance.self.myid != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.myid != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.self.myid != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.myid != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.myid > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.myid > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.qcm.PACKETMAXSIZE > zksInstance.self.tick
zksInstance.self.qcm.PACKETMAXSIZE > zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.qcm.PACKETMAXSIZE != zksInstance.serverStats.totalLatency
zksInstance.self.qcm.PACKETMAXSIZE < zksInstance.sessionTracker.currentTime
zksInstance.self.qcm.PACKETMAXSIZE < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.qcm.PACKETMAXSIZE > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.qcm.PACKETMAXSIZE != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.qcm.PACKETMAXSIZE != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.qcm.PACKETMAXSIZE != zksInstance.zkDb.maxCommittedLog
zksInstance.self.qcm.PACKETMAXSIZE != zksInstance.zkDb.minCommittedLog
zksInstance.self.qcm.PACKETMAXSIZE > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.PACKETMAXSIZE > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.qcm.PACKETMAXSIZE > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.qcm.RECV_CAPACITY > zksInstance.self.tick
zksInstance.self.qcm.RECV_CAPACITY != zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.qcm.RECV_CAPACITY != zksInstance.serverStats.count
zksInstance.self.qcm.RECV_CAPACITY != zksInstance.serverStats.maxLatency
zksInstance.self.qcm.RECV_CAPACITY != zksInstance.serverStats.packetsReceived
zksInstance.self.qcm.RECV_CAPACITY != zksInstance.serverStats.packetsSent
zksInstance.self.qcm.RECV_CAPACITY < zksInstance.sessionTracker.currentTime
zksInstance.self.qcm.RECV_CAPACITY < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.qcm.RECV_CAPACITY != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.qcm.RECV_CAPACITY != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.qcm.RECV_CAPACITY != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.qcm.RECV_CAPACITY != zksInstance.zkDb.maxCommittedLog
zksInstance.self.qcm.RECV_CAPACITY != zksInstance.zkDb.minCommittedLog
zksInstance.self.qcm.RECV_CAPACITY >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.qcm.RECV_CAPACITY > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.RECV_CAPACITY > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.qcm.RECV_CAPACITY >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.qcm.RECV_CAPACITY >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.qcm.cnxTO > zksInstance.self.tick
zksInstance.self.qcm.cnxTO > zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.qcm.cnxTO != zksInstance.serverStats.totalLatency
zksInstance.self.qcm.cnxTO < zksInstance.sessionTracker.currentTime
zksInstance.self.qcm.cnxTO < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.qcm.cnxTO > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.qcm.cnxTO != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.qcm.cnxTO != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.qcm.cnxTO != zksInstance.zkDb.maxCommittedLog
zksInstance.self.qcm.cnxTO != zksInstance.zkDb.minCommittedLog
zksInstance.self.qcm.cnxTO > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.cnxTO > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.qcm.cnxTO > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.memberOf(daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) , zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE )
zksInstance.self.qcm.maxBuffer > zksInstance.self.tick
zksInstance.self.qcm.maxBuffer > zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.qcm.maxBuffer != zksInstance.serverStats.totalLatency
zksInstance.self.qcm.maxBuffer < zksInstance.sessionTracker.currentTime
zksInstance.self.qcm.maxBuffer < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.qcm.maxBuffer > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.qcm.maxBuffer != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.qcm.maxBuffer != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.qcm.maxBuffer != zksInstance.zkDb.maxCommittedLog
zksInstance.self.qcm.maxBuffer != zksInstance.zkDb.minCommittedLog
zksInstance.self.qcm.maxBuffer > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.maxBuffer > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.qcm.maxBuffer > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.qcm.socketTimeout > zksInstance.self.tick
zksInstance.self.qcm.socketTimeout > zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.qcm.socketTimeout != zksInstance.serverStats.totalLatency
zksInstance.self.qcm.socketTimeout < zksInstance.sessionTracker.currentTime
zksInstance.self.qcm.socketTimeout < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.qcm.socketTimeout > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.qcm.socketTimeout != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.qcm.socketTimeout != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.qcm.socketTimeout != zksInstance.zkDb.maxCommittedLog
zksInstance.self.qcm.socketTimeout != zksInstance.zkDb.minCommittedLog
zksInstance.self.qcm.socketTimeout > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.socketTimeout > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.qcm.socketTimeout > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt > zksInstance.self.tick
zksInstance.self.qcm.threadCnt != zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.qcm.threadCnt != zksInstance.serverStats.count
zksInstance.self.qcm.threadCnt != zksInstance.serverStats.packetsReceived
zksInstance.self.qcm.threadCnt < zksInstance.sessionTracker.currentTime
zksInstance.self.qcm.threadCnt < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.qcm.threadCnt != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.txnLogFactory.txnLog.currentSize % zksInstance.self.qcm.threadCnt == 0
zksInstance.self.qcm.threadCnt != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.qcm.threadCnt != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.qcm.threadCnt != zksInstance.zkDb.maxCommittedLog
zksInstance.self.qcm.threadCnt != zksInstance.zkDb.minCommittedLog
zksInstance.self.qcm.threadCnt != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.qcm.threadCnt != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.qcm.threadCnt > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.quorumConfig.half != zksInstance.self.tick
zksInstance.self.quorumConfig.half != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.quorumConfig.half != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.quorumConfig.half != zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.quorumConfig.half != zksInstance.serverStats.maxLatency
zksInstance.self.quorumConfig.half != zksInstance.serverStats.minLatency
zksInstance.self.quorumConfig.half != zksInstance.serverStats.totalLatency
zksInstance.self.quorumConfig.half < zksInstance.sessionTracker.currentTime
zksInstance.self.quorumConfig.half < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.quorumConfig.half < zksInstance.sessionTracker.nextSessionId
zksInstance.self.quorumConfig.half != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.quorumConfig.half != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.txnLogFactory.txnLog.currentSize % zksInstance.self.quorumConfig.half == 0
zksInstance.self.quorumConfig.half != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.quorumConfig.half != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.quorumConfig.half != zksInstance.zkDb.maxCommittedLog
zksInstance.self.quorumConfig.half != zksInstance.zkDb.minCommittedLog
zksInstance.self.quorumConfig.half != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.quorumConfig.half >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.self.quorumConfig.half > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.tick < zksInstance.self.tickTime
zksInstance.self.tick < zksInstance.self.zkDb.commitLogBuffer
zksInstance.self.tick < zksInstance.self.zkDb.commitLogCount
zksInstance.self.tick <= zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.tick <= zksInstance.self.zkDb.minCommittedLog
zksInstance.self.tick < zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.self.tick <= zksInstance.serverStats.maxLatency
zksInstance.self.tick <= zksInstance.serverStats.totalLatency
zksInstance.self.tick < zksInstance.sessionTracker.currentTime
zksInstance.self.tick < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.tick < zksInstance.sessionTracker.nextSessionId
zksInstance.self.tick < zksInstance.sessionTracker.serverId
zksInstance.self.tick < zksInstance.syncProcessor.randRoll
zksInstance.self.tick < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.self.tick > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.self.tick < zksInstance.syncProcessor.snapCount
zksInstance.self.tick <= zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.tick < zksInstance.syncProcessor.zks.superSecret
zksInstance.self.tick < zksInstance.syncProcessor.zks.tickTime
zksInstance.self.tick < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.self.tick <= zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.tick < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.self.tick <= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.tick < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.self.tick <= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.tick <= zksInstance.zkDb.maxCommittedLog
zksInstance.self.tick <= zksInstance.zkDb.minCommittedLog
zksInstance.self.tick != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.self.tick >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.self.tick >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.self.tickTime > zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.tickTime != zksInstance.serverStats.count
zksInstance.self.tickTime != zksInstance.serverStats.packetsReceived
zksInstance.self.tickTime != zksInstance.serverStats.packetsSent
zksInstance.self.tickTime != zksInstance.serverStats.totalLatency
zksInstance.self.tickTime < zksInstance.sessionTracker.currentTime
zksInstance.self.tickTime < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.tickTime > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.tickTime != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.tickTime != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.tickTime != zksInstance.zkDb.maxCommittedLog
zksInstance.self.tickTime != zksInstance.zkDb.minCommittedLog
zksInstance.self.tickTime > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.tickTime > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.tickTime > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.commitLogBuffer > zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.zkDb.commitLogBuffer != zksInstance.serverStats.count
zksInstance.self.zkDb.commitLogBuffer != zksInstance.serverStats.maxLatency
zksInstance.self.zkDb.commitLogBuffer != zksInstance.serverStats.packetsReceived
zksInstance.self.zkDb.commitLogBuffer != zksInstance.serverStats.packetsSent
zksInstance.self.zkDb.commitLogBuffer != zksInstance.serverStats.totalLatency
zksInstance.self.zkDb.commitLogBuffer < zksInstance.sessionTracker.currentTime
zksInstance.self.zkDb.commitLogBuffer < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.zkDb.commitLogBuffer > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.zkDb.commitLogBuffer != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.zkDb.commitLogBuffer != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.zkDb.commitLogBuffer != zksInstance.zkDb.maxCommittedLog
zksInstance.self.zkDb.commitLogBuffer != zksInstance.zkDb.minCommittedLog
zksInstance.self.zkDb.commitLogBuffer > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.commitLogBuffer > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.commitLogBuffer > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.commitLogCount > zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.zkDb.commitLogCount != zksInstance.serverStats.count
zksInstance.self.zkDb.commitLogCount != zksInstance.serverStats.packetsSent
zksInstance.self.zkDb.commitLogCount != zksInstance.serverStats.totalLatency
zksInstance.self.zkDb.commitLogCount < zksInstance.sessionTracker.currentTime
zksInstance.self.zkDb.commitLogCount < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.zkDb.commitLogCount > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.zkDb.commitLogCount != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.zkDb.commitLogCount != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.zkDb.commitLogCount != zksInstance.zkDb.maxCommittedLog
zksInstance.self.zkDb.commitLogCount != zksInstance.zkDb.minCommittedLog
zksInstance.self.zkDb.commitLogCount > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.commitLogCount > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.commitLogCount > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog != zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.zkDb.maxCommittedLog > zksInstance.sessionTracker.currentTime
zksInstance.self.zkDb.maxCommittedLog > zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.zkDb.maxCommittedLog != zksInstance.sessionTracker.serverId
zksInstance.self.zkDb.maxCommittedLog >= zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.zkDb.maxCommittedLog != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.zkDb.maxCommittedLog != zksInstance.syncProcessor.zks.superSecret
zksInstance.self.zkDb.maxCommittedLog != zksInstance.syncProcessor.zks.tickTime
zksInstance.self.zkDb.maxCommittedLog <= zksInstance.zkDb.maxCommittedLog
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.minCommittedLog != zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.zkDb.minCommittedLog > zksInstance.sessionTracker.currentTime
zksInstance.self.zkDb.minCommittedLog > zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.zkDb.minCommittedLog != zksInstance.sessionTracker.serverId
zksInstance.self.zkDb.minCommittedLog >= zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.zkDb.minCommittedLog > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.self.zkDb.minCommittedLog != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.zkDb.minCommittedLog != zksInstance.syncProcessor.zks.superSecret
zksInstance.self.zkDb.minCommittedLog != zksInstance.syncProcessor.zks.tickTime
zksInstance.self.zkDb.minCommittedLog <= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.zkDb.minCommittedLog <= zksInstance.zkDb.maxCommittedLog
zksInstance.self.zkDb.minCommittedLog <= zksInstance.zkDb.minCommittedLog
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.requestsInProcess < zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.serverCnxnFactory.zkServer.requestsInProcess < zksInstance.serverStats.packetsReceived
zksInstance.serverCnxnFactory.zkServer.requestsInProcess < zksInstance.sessionTracker.currentTime
zksInstance.serverCnxnFactory.zkServer.requestsInProcess < zksInstance.sessionTracker.nextExpirationTime
zksInstance.serverCnxnFactory.zkServer.requestsInProcess < zksInstance.sessionTracker.nextSessionId
zksInstance.serverCnxnFactory.zkServer.requestsInProcess != zksInstance.sessionTracker.serverId
zksInstance.serverCnxnFactory.zkServer.requestsInProcess < zksInstance.syncProcessor.randRoll
zksInstance.serverCnxnFactory.zkServer.requestsInProcess < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.serverCnxnFactory.zkServer.requestsInProcess >= zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.serverCnxnFactory.zkServer.requestsInProcess > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.serverCnxnFactory.zkServer.requestsInProcess < zksInstance.syncProcessor.snapCount
zksInstance.serverCnxnFactory.zkServer.requestsInProcess < zksInstance.syncProcessor.zks.superSecret
zksInstance.serverCnxnFactory.zkServer.requestsInProcess < zksInstance.syncProcessor.zks.tickTime
zksInstance.serverCnxnFactory.zkServer.requestsInProcess < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.serverCnxnFactory.zkServer.requestsInProcess < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.serverCnxnFactory.zkServer.requestsInProcess < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.serverCnxnFactory.zkServer.requestsInProcess != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverCnxnFactory.zkServer.requestsInProcess != zksInstance.zkDb.maxCommittedLog
zksInstance.serverCnxnFactory.zkServer.requestsInProcess != zksInstance.zkDb.minCommittedLog
zksInstance.serverCnxnFactory.zkServer.requestsInProcess != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.requestsInProcess != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.requestsInProcess != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.requestsInProcess >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.superSecret > zksInstance.sessionTracker.currentTime
zksInstance.serverCnxnFactory.zkServer.superSecret > zksInstance.sessionTracker.nextExpirationTime
zksInstance.serverCnxnFactory.zkServer.superSecret > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.serverCnxnFactory.zkServer.superSecret != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverCnxnFactory.zkServer.superSecret != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverCnxnFactory.zkServer.superSecret != zksInstance.zkDb.maxCommittedLog
zksInstance.serverCnxnFactory.zkServer.superSecret != zksInstance.zkDb.minCommittedLog
zksInstance.serverCnxnFactory.zkServer.superSecret > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.superSecret > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.superSecret > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.count != zksInstance.sessionTracker.serverId
zksInstance.serverStats.count >= zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.serverStats.count > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.serverStats.count != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.serverStats.count < zksInstance.syncProcessor.zks.superSecret
zksInstance.serverStats.count != zksInstance.syncProcessor.zks.tickTime
zksInstance.serverStats.count <= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverStats.count <= zksInstance.zkDb.maxCommittedLog
zksInstance.serverStats.count <= zksInstance.zkDb.minCommittedLog
zksInstance.serverStats.count >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.count != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.maxLatency != zksInstance.sessionTracker.serverId
zksInstance.serverStats.maxLatency >= zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.serverStats.maxLatency > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.serverStats.maxLatency != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.serverStats.maxLatency < zksInstance.syncProcessor.zks.superSecret
zksInstance.serverStats.maxLatency < zksInstance.syncProcessor.zks.tickTime
zksInstance.serverStats.maxLatency <= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverStats.maxLatency <= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverStats.maxLatency <= zksInstance.zkDb.maxCommittedLog
zksInstance.serverStats.maxLatency <= zksInstance.zkDb.minCommittedLog
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.serverStats.maxLatency >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.maxLatency >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.minLatency != zksInstance.sessionTracker.serverId
zksInstance.serverStats.minLatency >= zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.serverStats.minLatency > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.serverStats.minLatency != zksInstance.syncProcessor.zks.superSecret
zksInstance.serverStats.minLatency != zksInstance.syncProcessor.zks.tickTime
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.serverStats.minLatency >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.minLatency >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsReceived > zksInstance.sessionTracker.serverId
zksInstance.serverStats.packetsReceived > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.serverStats.packetsReceived != zksInstance.syncProcessor.zks.tickTime
zksInstance.serverStats.packetsReceived != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverStats.packetsReceived != zksInstance.zkDb.maxCommittedLog
zksInstance.serverStats.packetsReceived >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsReceived != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsReceived >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsSent > zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.serverStats.packetsSent > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.serverStats.packetsSent != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.serverStats.packetsSent < zksInstance.syncProcessor.zks.superSecret
zksInstance.serverStats.packetsSent != zksInstance.syncProcessor.zks.tickTime
zksInstance.serverStats.packetsSent != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverStats.packetsSent != zksInstance.zkDb.maxCommittedLog
zksInstance.serverStats.packetsSent != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.packetsSent >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsSent != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsSent != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.packetsSent != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.totalLatency != zksInstance.sessionTracker.serverId
zksInstance.serverStats.totalLatency != zksInstance.syncProcessor.randRoll
zksInstance.serverStats.totalLatency >= zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.serverStats.totalLatency > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.serverStats.totalLatency != zksInstance.syncProcessor.snapCount
zksInstance.serverStats.totalLatency != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.serverStats.totalLatency < zksInstance.syncProcessor.zks.superSecret
zksInstance.serverStats.totalLatency != zksInstance.syncProcessor.zks.tickTime
zksInstance.serverStats.totalLatency <= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverStats.totalLatency != zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.serverStats.totalLatency <= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverStats.totalLatency <= zksInstance.zkDb.maxCommittedLog
zksInstance.serverStats.totalLatency <= zksInstance.zkDb.minCommittedLog
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.serverStats.totalLatency >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.totalLatency >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.currentTime != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.sessionTracker.currentTime < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.sessionTracker.currentTime < zksInstance.zkDb.maxCommittedLog
zksInstance.sessionTracker.currentTime < zksInstance.zkDb.minCommittedLog
zksInstance.sessionTracker.currentTime > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.currentTime > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) % zksInstance.sessionTracker.currentTime == 0
zksInstance.sessionTracker.currentTime > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.currentTime % daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 == 0
zksInstance.sessionTracker.currentTime > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextExpirationTime != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.sessionTracker.nextExpirationTime < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.sessionTracker.nextExpirationTime < zksInstance.zkDb.maxCommittedLog
zksInstance.sessionTracker.nextExpirationTime < zksInstance.zkDb.minCommittedLog
zksInstance.sessionTracker.nextExpirationTime > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextExpirationTime > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) % zksInstance.sessionTracker.nextExpirationTime == 0
zksInstance.sessionTracker.nextExpirationTime > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextExpirationTime % daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 == 0
zksInstance.sessionTracker.nextExpirationTime > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextSessionId > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.sessionTracker.nextSessionId > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextSessionId > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextSessionId > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.serverId != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.sessionTracker.serverId != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.sessionTracker.serverId != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.sessionTracker.serverId != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.sessionTracker.serverId != zksInstance.zkDb.maxCommittedLog
zksInstance.sessionTracker.serverId != zksInstance.zkDb.minCommittedLog
zksInstance.sessionTracker.serverId != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.serverId != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.serverId > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.serverId > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1))
daikon.Quant.subsetOf(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess))
zksInstance.syncProcessor.randRoll > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.syncProcessor.randRoll != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.syncProcessor.randRoll != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.syncProcessor.randRoll != zksInstance.zkDb.maxCommittedLog
zksInstance.syncProcessor.randRoll != zksInstance.zkDb.minCommittedLog
zksInstance.syncProcessor.randRoll > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.randRoll > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.randRoll > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.requestOfDeath.createTime > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.syncProcessor.requestOfDeath.createTime != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.syncProcessor.requestOfDeath.createTime != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.syncProcessor.requestOfDeath.createTime != zksInstance.zkDb.maxCommittedLog
zksInstance.syncProcessor.requestOfDeath.createTime != zksInstance.zkDb.minCommittedLog
zksInstance.syncProcessor.requestOfDeath.createTime > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.requestOfDeath.createTime > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.requestOfDeath.createTime > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.requestOfDeath.cxid <= zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.syncProcessor.requestOfDeath.cxid <= zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.syncProcessor.requestOfDeath.cxid <= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.syncProcessor.requestOfDeath.cxid <= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.syncProcessor.requestOfDeath.cxid <= zksInstance.zkDb.maxCommittedLog
zksInstance.syncProcessor.requestOfDeath.cxid <= zksInstance.zkDb.minCommittedLog
zksInstance.syncProcessor.requestOfDeath.cxid <= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.requestOfDeath.cxid <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.requestOfDeath.cxid <= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.requestOfDeath.cxid <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.requestOfDeath.cxid <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.requestOfDeath.zxid < zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.syncProcessor.requestOfDeath.zxid < zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.syncProcessor.requestOfDeath.zxid < zksInstance.zkDb.maxCommittedLog
zksInstance.syncProcessor.requestOfDeath.zxid < zksInstance.zkDb.minCommittedLog
zksInstance.syncProcessor.requestOfDeath.zxid <= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.requestOfDeath.zxid <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.requestOfDeath.zxid <= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.requestOfDeath.zxid <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.requestOfDeath.zxid <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.snapCount > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.syncProcessor.snapCount != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.syncProcessor.snapCount != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.syncProcessor.snapCount != zksInstance.zkDb.maxCommittedLog
zksInstance.syncProcessor.snapCount != zksInstance.zkDb.minCommittedLog
zksInstance.syncProcessor.snapCount > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.snapCount > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.snapCount > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.requestsInProcess < zksInstance.syncProcessor.zks.superSecret
zksInstance.syncProcessor.zks.requestsInProcess < zksInstance.syncProcessor.zks.tickTime
zksInstance.syncProcessor.zks.requestsInProcess < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.syncProcessor.zks.requestsInProcess != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.syncProcessor.zks.requestsInProcess < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.syncProcessor.zks.requestsInProcess != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.syncProcessor.zks.requestsInProcess < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.syncProcessor.zks.requestsInProcess != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.syncProcessor.zks.requestsInProcess != zksInstance.zkDb.maxCommittedLog
zksInstance.syncProcessor.zks.requestsInProcess != zksInstance.zkDb.minCommittedLog
zksInstance.syncProcessor.zks.requestsInProcess != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.requestsInProcess >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.requestsInProcess % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 == 0
zksInstance.syncProcessor.zks.requestsInProcess >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.requestsInProcess % daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 == 0
zksInstance.syncProcessor.zks.superSecret != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.syncProcessor.zks.superSecret != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.syncProcessor.zks.superSecret != zksInstance.zkDb.maxCommittedLog
zksInstance.syncProcessor.zks.superSecret != zksInstance.zkDb.minCommittedLog
zksInstance.syncProcessor.zks.superSecret > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.superSecret > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.superSecret > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.superSecret > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.superSecret > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.tickTime != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.syncProcessor.zks.tickTime != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.syncProcessor.zks.tickTime != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.syncProcessor.zks.tickTime != zksInstance.zkDb.maxCommittedLog
zksInstance.syncProcessor.zks.tickTime != zksInstance.zkDb.minCommittedLog
zksInstance.syncProcessor.zks.tickTime > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.tickTime > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.tickTime > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.tickTime > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.tickTime > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC != zksInstance.zkDb.maxCommittedLog
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC != zksInstance.zkDb.minCommittedLog
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize <= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.currentSize % daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE) == 0
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.currentSize >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.currentSize >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS != zksInstance.zkDb.maxCommittedLog
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS != zksInstance.zkDb.minCommittedLog
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen != zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.lastZxidSeen >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.lastZxidSeen >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.preAllocSize != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.txnLogFactory.txnLog.preAllocSize != zksInstance.zkDb.maxCommittedLog
zksInstance.txnLogFactory.txnLog.preAllocSize != zksInstance.zkDb.minCommittedLog
zksInstance.txnLogFactory.txnLog.preAllocSize > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.preAllocSize > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.preAllocSize > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.dataTree.lastProcessedZxid != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.dataTree.lastProcessedZxid >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.dataTree.lastProcessedZxid >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE) != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
102416 * zksInstance.firstProcessor.zks.hzxid - 102416 * zksInstance.self.zkDb.maxCommittedLog + 4.294958009E9 * zksInstance.txnLogFactory.txnLog.currentSize - 4.39872419449744E14 == 0
6401 * zksInstance.firstProcessor.zks.hzxid + 536870912 * zksInstance.txnLogFactory.txnLog.currentSize - 6401 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 5.4984171323392E13 == 0
102416 * zksInstance.firstProcessor.zks.hzxid + 4.294958009E9 * zksInstance.txnLogFactory.txnLog.currentSize - 102416 * zksInstance.zkDb.maxCommittedLog - 4.39872419449744E14 == 0
25604 * zksInstance.firstProcessor.zks.hzxid - zksInstance.txnLogFactory.txnLog.currentSize + 76812 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 2.19936685293568E14 == 0
25604 * zksInstance.firstProcessor.zks.hzxid - zksInstance.txnLogFactory.txnLog.currentSize + 76812 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2.19936685216756E14 == 0
25604 * zksInstance.firstProcessor.zks.hzxid - zksInstance.txnLogFactory.txnLog.currentSize + 76812 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 2.19936685293568E14 == 0
25604 * zksInstance.firstProcessor.zks.hzxid - zksInstance.txnLogFactory.txnLog.currentSize + 76812 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 2.19936685216756E14 == 0
25604 * zksInstance.firstProcessor.zks.hzxid - zksInstance.txnLogFactory.txnLog.currentSize + 76812 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 2.19936685293568E14 == 0
25604 * zksInstance.firstProcessor.zks.hzxid - zksInstance.txnLogFactory.txnLog.currentSize + 76812 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2.19936685216756E14 == 0
4.294976583E9 * zksInstance.firstProcessor.zks.hzxid + 4.294958009E9 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 8.589934592E9 * zksInstance.zkDb.maxCommittedLog == 0
zksInstance.firstProcessor.zks.hzxid + 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 8.589934592E9 == 0
zksInstance.firstProcessor.zks.hzxid + 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 8.589934596E9 == 0
zksInstance.firstProcessor.zks.hzxid + 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 8.589934589E9 == 0
zksInstance.firstProcessor.zks.hzxid + 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 8.589934593E9 == 0
zksInstance.firstProcessor.zks.hzxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 8.589934592E9 == 0
zksInstance.firstProcessor.zks.hzxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 8.589934589E9 == 0
zksInstance.firstProcessor.zks.hzxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 3 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 8.589934592E9 == 0
zksInstance.firstProcessor.zks.hzxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 3 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 8.589934589E9 == 0
zksInstance.firstProcessor.zks.hzxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 8.589934596E9 == 0
zksInstance.firstProcessor.zks.hzxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 8.589934593E9 == 0
zksInstance.firstProcessor.zks.hzxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 3 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 8.589934596E9 == 0
zksInstance.firstProcessor.zks.hzxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 3 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 8.589934593E9 == 0
128020 * zksInstance.firstProcessor.zks.requestsInProcess - 25604 * zksInstance.self.zkDb.maxCommittedLog + 1073739503 * zksInstance.txnLogFactory.txnLog.currentSize + 1.09968580431132E14 == 0
3 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 1.08086898252703334E18 == 0
3 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 1.08086898252703334E18 == 0
438000 * zksInstance.firstProcessor.zks.requestsInProcess - 2000 * zksInstance.sessionTracker.currentTime + 1781 * zksInstance.sessionTracker.nextExpirationTime + 5.647952E9 == 0
zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 3.6028966084234445E17 == 0
zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 3.6028966084234445E17 == 0
zksInstance.firstProcessor.zks.requestsInProcess - 2 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 7.205793216846889E17 == 0
zksInstance.firstProcessor.zks.requestsInProcess - 2 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 7.205793216846889E17 == 0
zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) + 3.6028966084234445E17 == 0
zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 + 3.6028966084234445E17 == 0
zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 3.6028966084234445E17 == 0
zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 3.6028966084234445E17 == 0
716912 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.txnLogFactory.txnLog.currentSize - 102416 * zksInstance.zkDb.dataTree.lastProcessedZxid + 8.79746741174272E14 == 0
128020 * zksInstance.firstProcessor.zks.requestsInProcess + 1073739503 * zksInstance.txnLogFactory.txnLog.currentSize - 25604 * zksInstance.zkDb.maxCommittedLog + 1.09968580431132E14 == 0
716912 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.txnLogFactory.txnLog.currentSize - 102416 * zksInstance.zkDb.minCommittedLog + 4.39874270516528E14 == 0
zksInstance.hzxid - 8.589934592E9 * zksInstance.self.acceptedEpoch - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 8.589934592E9 == 0
zksInstance.hzxid - 8.589934592E9 * zksInstance.self.acceptedEpoch - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 8.589934589E9 == 0
zksInstance.hzxid - 8.589934594E9 * zksInstance.self.acceptedEpoch - daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) + 8.589934594E9 == 0
zksInstance.hzxid - 8.589934594E9 * zksInstance.self.acceptedEpoch - daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 + 8.589934593E9 == 0
73 * zksInstance.hzxid + 8.589934592E9 * zksInstance.self.electionTimeTaken - 219 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 2.439541424128E12 == 0
73 * zksInstance.hzxid + 8.589934592E9 * zksInstance.self.electionTimeTaken - 219 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 2.439541424347E12 == 0
73 * zksInstance.hzxid + 8.589934594E9 * zksInstance.self.electionTimeTaken - 73 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 2.439541424696E12 == 0
73 * zksInstance.hzxid + 8.589934594E9 * zksInstance.self.electionTimeTaken - 73 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 2.439541424769E12 == 0
zksInstance.hzxid - 4.294967296E9 * zksInstance.self.myid - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 1.2884901888E10 == 0
zksInstance.hzxid - 4.294967296E9 * zksInstance.self.myid - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 1.2884901885E10 == 0
zksInstance.hzxid - 4.294967297E9 * zksInstance.self.myid - daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) + 1.2884901891E10 == 0
zksInstance.hzxid - 4.294967297E9 * zksInstance.self.myid - daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 + 1.288490189E10 == 0
438000 * zksInstance.requestsInProcess - 2000 * zksInstance.sessionTracker.currentTime + 1781 * zksInstance.sessionTracker.nextExpirationTime + 5.647952E9 == 0
111198172 * zksInstance.self.zkDb.maxCommittedLog - 89614 * zksInstance.sessionTracker.currentTime - 4.663250661529E12 * zksInstance.txnLogFactory.txnLog.currentSize - 4.775912330119095E17 == 0
64010000 * zksInstance.self.zkDb.maxCommittedLog - 44807 * zksInstance.sessionTracker.nextExpirationTime - 2.6843487575E12 * zksInstance.txnLogFactory.txnLog.currentSize - 2.74920295146844E17 == 0
438000 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 2000 * zksInstance.sessionTracker.currentTime + 1781 * zksInstance.sessionTracker.nextExpirationTime + 5.647952E9 == 0
zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + zksInstance.syncProcessor.zks.requestsInProcess + 2.16174471079591936E17 == 0
2000 * zksInstance.sessionTracker.currentTime - 1781 * zksInstance.sessionTracker.nextExpirationTime - 438000 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 5.647952E9 == 0
2000 * zksInstance.sessionTracker.currentTime - 1781 * zksInstance.sessionTracker.nextExpirationTime - 438000 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 5.64839E9 == 0
2000 * zksInstance.sessionTracker.currentTime - 1781 * zksInstance.sessionTracker.nextExpirationTime - 438000 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 5.647952E9 == 0
2000 * zksInstance.sessionTracker.currentTime - 1781 * zksInstance.sessionTracker.nextExpirationTime - 438000 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 5.64839E9 == 0
2000 * zksInstance.sessionTracker.currentTime - 1781 * zksInstance.sessionTracker.nextExpirationTime - 438000 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 5.647952E9 == 0
2000 * zksInstance.sessionTracker.currentTime - 1781 * zksInstance.sessionTracker.nextExpirationTime - 438000 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 5.64839E9 == 0
500 * zksInstance.sessionTracker.currentTime - 427 * zksInstance.sessionTracker.nextExpirationTime - 73000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1882911000 == 0
500 * zksInstance.sessionTracker.currentTime - 427 * zksInstance.sessionTracker.nextExpirationTime - 73000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1882984000 == 0
2000 * zksInstance.sessionTracker.currentTime - 1781 * zksInstance.sessionTracker.nextExpirationTime - 438000 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 5.647952E9 == 0
2000 * zksInstance.sessionTracker.currentTime - 1781 * zksInstance.sessionTracker.nextExpirationTime - 438000 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 5.64839E9 == 0
2000 * zksInstance.sessionTracker.currentTime - 1781 * zksInstance.sessionTracker.nextExpirationTime - 438000 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 5.647952E9 == 0
2000 * zksInstance.sessionTracker.currentTime - 1781 * zksInstance.sessionTracker.nextExpirationTime - 438000 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 5.64839E9 == 0
460872 * zksInstance.sessionTracker.currentTime + 4343 * zksInstance.txnLogFactory.txnLog.currentSize - 444792688 * zksInstance.zkDb.dataTree.lastProcessedZxid + 3.8207282076601656E18 == 0
89614 * zksInstance.sessionTracker.currentTime + 4.663250661529E12 * zksInstance.txnLogFactory.txnLog.currentSize - 111198172 * zksInstance.zkDb.maxCommittedLog + 4.775912330119095E17 == 0
460872 * zksInstance.sessionTracker.currentTime + 4343 * zksInstance.txnLogFactory.txnLog.currentSize - 444792688 * zksInstance.zkDb.minCommittedLog + 1.91036206759358336E18 == 0
57609 * zksInstance.sessionTracker.nextExpirationTime + 625 * zksInstance.txnLogFactory.txnLog.currentSize - 64010000 * zksInstance.zkDb.dataTree.lastProcessedZxid + 5.4984022703693798E17 == 0
44807 * zksInstance.sessionTracker.nextExpirationTime + 2.6843487575E12 * zksInstance.txnLogFactory.txnLog.currentSize - 64010000 * zksInstance.zkDb.maxCommittedLog + 2.74920295146844E17 == 0
57609 * zksInstance.sessionTracker.nextExpirationTime + 625 * zksInstance.txnLogFactory.txnLog.currentSize - 64010000 * zksInstance.zkDb.minCommittedLog + 2.74919932875848E17 == 0
zksInstance.commitProcessor.finished == zksInstance.self.cnxnFactory.killed
zksInstance.commitProcessor.finished == zksInstance.serverCnxnFactory.killed
zksInstance.firstProcessor.zks.maxSessionTimeout == zksInstance.self.cnxnFactory.maxClientCnxns
zksInstance.firstProcessor.zks.maxSessionTimeout == zksInstance.serverCnxnFactory.maxClientCnxns
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.initLimit)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.initLimit)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.syncLimit)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.syncLimit)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionType-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
zksInstance.self.bcVote.zxid == 0 || zksInstance.self.bcVote.zxid == 4294976940L
zksInstance.self.electionTimeTaken == 218 || zksInstance.self.electionTimeTaken == 235
zksInstance.self.tick >= 0
zksInstance.serverStats.minLatency >= 2
zksInstance.sessionTracker.expirationInterval == 2000
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half) != null
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.zkDb.minCommittedLog
zksInstance.firstProcessor.zks.hzxid > zksInstance.sessionTracker.expirationInterval
zksInstance.firstProcessor.zks.hzxid >= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.firstProcessor.zks.hzxid > zksInstance.zkDb.minCommittedLog
zksInstance.firstProcessor.zks.requestsInProcess != zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE
zksInstance.firstProcessor.zks.requestsInProcess != zksInstance.self.bcVote.id
zksInstance.firstProcessor.zks.requestsInProcess != zksInstance.self.electionTimeTaken
zksInstance.firstProcessor.zks.requestsInProcess != zksInstance.self.electionType
zksInstance.firstProcessor.zks.requestsInProcess != zksInstance.self.qcm.RECV_CAPACITY
zksInstance.firstProcessor.zks.requestsInProcess != zksInstance.self.qcm.threadCnt
zksInstance.firstProcessor.zks.requestsInProcess != zksInstance.self.quorumConfig.half
zksInstance.firstProcessor.zks.requestsInProcess != zksInstance.self.zkDb.maxCommittedLog
zksInstance.firstProcessor.zks.requestsInProcess != zksInstance.self.zkDb.minCommittedLog
zksInstance.firstProcessor.zks.requestsInProcess != zksInstance.serverStats.minLatency
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.sessionTracker.expirationInterval
zksInstance.firstProcessor.zks.requestsInProcess != zksInstance.zkDb.maxCommittedLog
zksInstance.firstProcessor.zks.requestsInProcess != zksInstance.zkDb.minCommittedLog
zksInstance.firstProcessor.zks.requestsInProcess != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.requestsInProcess != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.superSecret != zksInstance.self.bcVote.zxid
zksInstance.firstProcessor.zks.superSecret != zksInstance.zkDb.maxCommittedLog
zksInstance.firstProcessor.zks.superSecret != zksInstance.zkDb.minCommittedLog
zksInstance.firstProcessor.zks.tickTime != zksInstance.self.bcVote.zxid
zksInstance.firstProcessor.zks.tickTime != zksInstance.serverStats.count
zksInstance.firstProcessor.zks.tickTime != zksInstance.serverStats.packetsReceived
zksInstance.firstProcessor.zks.tickTime != zksInstance.serverStats.packetsSent
zksInstance.firstProcessor.zks.tickTime != zksInstance.serverStats.totalLatency
zksInstance.sessionTracker.nextExpirationTime % zksInstance.firstProcessor.zks.tickTime == 0
zksInstance.firstProcessor.zks.tickTime != zksInstance.zkDb.maxCommittedLog
zksInstance.firstProcessor.zks.tickTime != zksInstance.zkDb.minCommittedLog
zksInstance.requestsInProcess != zksInstance.self.electionTimeTaken
zksInstance.requestsInProcess != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != zksInstance.serverStats.count
zksInstance.sessionTracker.nextExpirationTime % zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE == 0
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.acceptedEpoch < zksInstance.serverStats.minLatency
zksInstance.self.acceptedEpoch < zksInstance.sessionTracker.expirationInterval
zksInstance.self.acceptedEpoch != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.electionEpoch < zksInstance.serverStats.minLatency
zksInstance.self.bcVote.electionEpoch < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.bcVote.electionEpoch <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.electionEpoch <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id != zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.sessionTracker.nextExpirationTime % zksInstance.self.bcVote.id == 0
zksInstance.self.bcVote.id != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.peerEpoch < zksInstance.serverStats.minLatency
zksInstance.self.bcVote.peerEpoch < zksInstance.sessionTracker.expirationInterval
1696399337 * zksInstance.self.bcVote.peerEpoch - zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.self.bcVote.peerEpoch <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.peerEpoch <= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.peerEpoch <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.version < zksInstance.serverStats.minLatency
zksInstance.self.bcVote.version <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.version <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.zxid != zksInstance.serverStats.minLatency
zksInstance.self.bcVote.zxid % zksInstance.serverStats.packetsSent == 0
zksInstance.self.bcVote.zxid != zksInstance.sessionTracker.currentTime
zksInstance.self.bcVote.zxid != zksInstance.sessionTracker.expirationInterval
zksInstance.self.bcVote.zxid != zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.bcVote.zxid < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.bcVote.zxid != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.zxid != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.zxid != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.zxid != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.zxid % daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 0
zksInstance.sessionTracker.nextExpirationTime % zksInstance.self.electionAlg.finalizeWait == 0
zksInstance.self.electionTimeTaken != zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.electionTimeTaken < zksInstance.sessionTracker.expirationInterval
1696399337 * zksInstance.self.electionTimeTaken - 17 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.self.electionType != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.electionType != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.electionType != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.electionType != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.self.electionType != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.electionType != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.nextExpirationTime % zksInstance.self.qcm.RECV_CAPACITY == 0
zksInstance.self.qcm.RECV_CAPACITY >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.qcm.maxBuffer != zksInstance.serverStats.count
zksInstance.self.qcm.maxBuffer != zksInstance.serverStats.packetsReceived
zksInstance.self.qcm.threadCnt != zksInstance.self.tick
zksInstance.self.qcm.threadCnt != zksInstance.serverStats.packetsSent
zksInstance.sessionTracker.nextExpirationTime % zksInstance.self.qcm.threadCnt == 0
zksInstance.self.qcm.threadCnt != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.quorumConfig.half <= zksInstance.serverStats.minLatency
zksInstance.sessionTracker.nextExpirationTime % zksInstance.self.quorumConfig.half == 0
zksInstance.self.quorumConfig.half < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.quorumConfig.half != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.quorumConfig.half != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.self.quorumConfig.half != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.tick != zksInstance.serverStats.minLatency
zksInstance.self.tick < zksInstance.sessionTracker.expirationInterval
zksInstance.self.tick < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.tick != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.tick != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.tick != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.tick != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.commitLogCount != zksInstance.serverStats.maxLatency
zksInstance.sessionTracker.nextExpirationTime % zksInstance.self.zkDb.commitLogCount == 0
zksInstance.self.zkDb.maxCommittedLog != zksInstance.sessionTracker.expirationInterval
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog != zksInstance.sessionTracker.expirationInterval
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.requestsInProcess != zksInstance.serverStats.minLatency
zksInstance.serverCnxnFactory.zkServer.requestsInProcess < zksInstance.sessionTracker.expirationInterval
zksInstance.serverCnxnFactory.zkServer.requestsInProcess < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverCnxnFactory.zkServer.requestsInProcess != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.serverStats.count != zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.serverStats.count < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverStats.maxLatency != zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.serverStats.maxLatency < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.packetsReceived != zksInstance.sessionTracker.expirationInterval
zksInstance.serverStats.packetsReceived >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.packetsSent != zksInstance.sessionTracker.expirationInterval
zksInstance.serverStats.packetsSent < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverStats.totalLatency < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.currentTime != zksInstance.zkDb.maxCommittedLog
zksInstance.sessionTracker.currentTime != zksInstance.zkDb.minCommittedLog
zksInstance.sessionTracker.expirationInterval != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.sessionTracker.expirationInterval < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.sessionTracker.expirationInterval != zksInstance.zkDb.minCommittedLog
zksInstance.sessionTracker.expirationInterval > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.expirationInterval > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.expirationInterval > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.expirationInterval > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextExpirationTime != zksInstance.zkDb.maxCommittedLog
zksInstance.sessionTracker.nextExpirationTime != zksInstance.zkDb.minCommittedLog
zksInstance.sessionTracker.nextExpirationTime % daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE) == 0
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE) != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE) != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE) != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
1696399360 * zksInstance.self.acceptedEpoch - zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6028962704713318E17 == 0
1696399360 * zksInstance.self.acceptedEpoch - zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6028962704713318E17 == 0
1696399360 * zksInstance.self.bcVote.peerEpoch - zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6028962874353254E17 == 0
1696399360 * zksInstance.self.bcVote.peerEpoch - zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6028962874353254E17 == 0
zksInstance.self.bcVote.id == zksInstance.self.electionType
zksInstance.self.bcVote.id == zksInstance.self.initLimit
zksInstance.self.bcVote.id == zksInstance.self.syncLimit
zksInstance.self.myid == daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.self.myid == daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog == zksInstance.zkDb.minCommittedLog
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionType-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
zksInstance.self.bcVote.id == 3
zksInstance.self.myid == 5
zksInstance.self.start_fle == 25815479
zksInstance.serverStats.minLatency == 0 || zksInstance.serverStats.minLatency == 64 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.syncProcessor.randRoll == 37032
zksInstance.txnLogFactory.txnLog.lastZxidSeen >= 0
zksInstance.zkDb.maxCommittedLog == -1 || zksInstance.zkDb.maxCommittedLog == 0
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid-1) != null
zksInstance.hzxid <= zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.hzxid <= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.hzxid <= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.hzxid <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.maxSessionTimeout <= zksInstance.self.zkDb.maxCommittedLog
zksInstance.maxSessionTimeout <= zksInstance.zkDb.maxCommittedLog
zksInstance.requestsInProcess < zksInstance.self.start_fle
zksInstance.requestsInProcess != zksInstance.self.zkDb.commitLogBuffer
zksInstance.requestsInProcess != zksInstance.self.zkDb.commitLogCount
zksInstance.requestsInProcess > zksInstance.self.zkDb.maxCommittedLog
zksInstance.requestsInProcess != zksInstance.serverStats.packetsSent
zksInstance.requestsInProcess > zksInstance.zkDb.maxCommittedLog
zksInstance.requestsInProcess != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > zksInstance.zkDb.maxCommittedLog
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.acceptedEpoch > zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.acceptedEpoch != zksInstance.serverStats.count
zksInstance.self.acceptedEpoch < zksInstance.serverStats.packetsReceived
zksInstance.self.acceptedEpoch > zksInstance.zkDb.maxCommittedLog
zksInstance.self.acceptedEpoch != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.id != zksInstance.serverStats.count
zksInstance.self.bcVote.id < zksInstance.serverStats.packetsReceived
zksInstance.self.bcVote.id != zksInstance.serverStats.packetsSent
zksInstance.self.bcVote.id != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.id != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.electionAlg.finalizeWait > zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.electionAlg.finalizeWait > zksInstance.zkDb.maxCommittedLog
zksInstance.self.electionAlg.maxNotificationInterval > zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.electionAlg.maxNotificationInterval > zksInstance.zkDb.maxCommittedLog
zksInstance.self.myid != zksInstance.serverStats.count
zksInstance.self.myid <= zksInstance.serverStats.packetsReceived
zksInstance.self.myid != zksInstance.serverStats.packetsSent
zksInstance.self.myid != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.myid != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.myid != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.qcm.PACKETMAXSIZE > zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.qcm.PACKETMAXSIZE > zksInstance.zkDb.maxCommittedLog
zksInstance.self.qcm.RECV_CAPACITY > zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.qcm.RECV_CAPACITY > zksInstance.zkDb.maxCommittedLog
zksInstance.self.qcm.cnxTO > zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.qcm.cnxTO > zksInstance.zkDb.maxCommittedLog
zksInstance.self.qcm.maxBuffer > zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.qcm.maxBuffer != zksInstance.serverStats.maxLatency
zksInstance.self.qcm.maxBuffer != zksInstance.serverStats.packetsSent
zksInstance.self.qcm.maxBuffer > zksInstance.zkDb.maxCommittedLog
zksInstance.self.qcm.socketTimeout > zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.qcm.socketTimeout > zksInstance.zkDb.maxCommittedLog
zksInstance.self.qcm.threadCnt > zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.qcm.threadCnt > zksInstance.zkDb.maxCommittedLog
zksInstance.self.qcm.threadCnt != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.qcm.threadCnt != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.start_fle > zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.start_fle > zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.start_fle > zksInstance.serverStats.count
zksInstance.self.start_fle > zksInstance.serverStats.maxLatency
zksInstance.self.start_fle != zksInstance.serverStats.minLatency
zksInstance.self.start_fle > zksInstance.serverStats.packetsReceived
zksInstance.self.start_fle > zksInstance.serverStats.packetsSent
zksInstance.self.start_fle > zksInstance.serverStats.totalLatency
zksInstance.self.start_fle < zksInstance.sessionTracker.nextSessionId
zksInstance.self.start_fle > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.start_fle > zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.start_fle != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.start_fle != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.start_fle > zksInstance.zkDb.maxCommittedLog
zksInstance.self.start_fle > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.start_fle > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.start_fle > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.start_fle > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.start_fle > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.tickTime > zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.tickTime != zksInstance.serverStats.maxLatency
zksInstance.self.tickTime > zksInstance.zkDb.maxCommittedLog
zksInstance.self.zkDb.commitLogBuffer > zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.zkDb.commitLogBuffer != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.zkDb.commitLogBuffer > zksInstance.zkDb.maxCommittedLog
zksInstance.self.zkDb.commitLogCount > zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.zkDb.commitLogCount != zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.zkDb.commitLogCount != zksInstance.serverStats.packetsReceived
zksInstance.self.zkDb.commitLogCount != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.zkDb.commitLogCount > zksInstance.zkDb.maxCommittedLog
zksInstance.self.zkDb.maxCommittedLog < zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.zkDb.maxCommittedLog < zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.self.zkDb.maxCommittedLog <= zksInstance.serverStats.count
zksInstance.self.zkDb.maxCommittedLog <= zksInstance.serverStats.maxLatency
zksInstance.self.zkDb.maxCommittedLog < zksInstance.serverStats.minLatency
zksInstance.self.zkDb.maxCommittedLog < zksInstance.serverStats.packetsReceived
zksInstance.self.zkDb.maxCommittedLog < zksInstance.serverStats.packetsSent
zksInstance.self.zkDb.maxCommittedLog <= zksInstance.serverStats.totalLatency
zksInstance.self.zkDb.maxCommittedLog < zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.zkDb.maxCommittedLog < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.self.zkDb.maxCommittedLog <= zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.zkDb.maxCommittedLog < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.self.zkDb.maxCommittedLog <= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.zkDb.maxCommittedLog < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.self.zkDb.maxCommittedLog >= zksInstance.zkDb.maxCommittedLog
zksInstance.self.zkDb.maxCommittedLog <= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.maxCommittedLog < daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.maxCommittedLog < daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.maxCommittedLog <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog <= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.maxCommittedLog <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.maxCommittedLog <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.requestsInProcess != zksInstance.serverStats.count
zksInstance.serverCnxnFactory.zkServer.requestsInProcess != zksInstance.serverStats.maxLatency
zksInstance.serverCnxnFactory.zkServer.requestsInProcess != zksInstance.serverStats.packetsSent
zksInstance.serverCnxnFactory.zkServer.requestsInProcess != zksInstance.serverStats.totalLatency
zksInstance.serverCnxnFactory.zkServer.requestsInProcess != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.serverCnxnFactory.zkServer.requestsInProcess != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverCnxnFactory.zkServer.requestsInProcess > zksInstance.zkDb.maxCommittedLog
zksInstance.serverCnxnFactory.zkServer.requestsInProcess >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.requestsInProcess != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.superSecret > zksInstance.zkDb.maxCommittedLog
zksInstance.serverStats.count != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.count != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.count != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.count != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.count != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.count != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.serverStats.count != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.maxLatency != zksInstance.serverStats.minLatency
zksInstance.serverStats.maxLatency >= zksInstance.zkDb.maxCommittedLog
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.maxLatency >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.minLatency != zksInstance.serverStats.totalLatency
zksInstance.serverStats.minLatency > zksInstance.zkDb.maxCommittedLog
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.packetsReceived > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsReceived != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.packetsReceived > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsSent != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsSent != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.packetsSent != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.packetsSent != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.packetsSent != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsSent != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsSent != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.packetsSent != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.totalLatency >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
6 * zksInstance.sessionTracker.nextSessionId - 6 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - -2147483648 == 0
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - -2147483648 == 0
zksInstance.syncProcessor.randRoll > zksInstance.zkDb.maxCommittedLog
zksInstance.syncProcessor.requestOfDeath.createTime > zksInstance.zkDb.maxCommittedLog
zksInstance.syncProcessor.snapCount > zksInstance.zkDb.maxCommittedLog
zksInstance.syncProcessor.zks.requestsInProcess > zksInstance.zkDb.maxCommittedLog
zksInstance.syncProcessor.zks.requestsInProcess >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.requestsInProcess != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.zks.requestsInProcess >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.currentSize % daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1 == 0
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.currentSize % daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1 == 0
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.dataTree.lastProcessedZxid != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.dataTree.lastProcessedZxid != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.maxCommittedLog <= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.maxCommittedLog < daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.maxCommittedLog < daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.maxCommittedLog <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog <= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.maxCommittedLog <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.maxCommittedLog <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
54 * zksInstance.requestsInProcess - 51 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - zksInstance.sessionTracker.nextSessionId + 3.6028966204781363E17 == 0
22 * zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId - 19 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6028966204781363E17 == 0
22 * zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId - 19 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6028966204781363E17 == 0
53 * zksInstance.self.zkDb.maxCommittedLog + zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId + 3.6028966204781363E17 == 0
46 * zksInstance.self.zkDb.maxCommittedLog - zksInstance.sessionTracker.nextSessionId + zksInstance.syncProcessor.zks.requestsInProcess + 3.6028966204781363E17 == 0
30 * zksInstance.self.zkDb.maxCommittedLog - zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6028966204781363E17 == 0
30 * zksInstance.self.zkDb.maxCommittedLog - zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6028966204781363E17 == 0
15 * zksInstance.self.zkDb.maxCommittedLog - 4 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 1.44115864819125453E18 == 0
25 * zksInstance.self.zkDb.maxCommittedLog - zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) + 3.6028966204781363E17 == 0
22 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - zksInstance.sessionTracker.nextSessionId - 19 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6028966204781363E17 == 0
22 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - zksInstance.sessionTracker.nextSessionId - 19 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6028966204781363E17 == 0
5 * zksInstance.serverStats.packetsReceived - 4 * zksInstance.sessionTracker.nextSessionId + 15 * zksInstance.zkDb.maxCommittedLog + 1.44115864819125453E18 == 0
10 * zksInstance.serverStats.packetsReceived - 8 * zksInstance.sessionTracker.nextSessionId - 15 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 2.8823172963825091E18 == 0
10 * zksInstance.serverStats.packetsReceived - 8 * zksInstance.sessionTracker.nextSessionId - 15 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 2.8823172963825091E18 == 0
2 * zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.syncProcessor.zks.requestsInProcess - 15 * zksInstance.zkDb.maxCommittedLog - 7.2057932409562726E17 == 0
4 * zksInstance.sessionTracker.nextSessionId - 6 * zksInstance.syncProcessor.zks.requestsInProcess + 15 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.44115864819125453E18 == 0
4 * zksInstance.sessionTracker.nextSessionId - 6 * zksInstance.syncProcessor.zks.requestsInProcess + 15 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.44115864819125453E18 == 0
zksInstance.sessionTracker.nextSessionId - 30 * zksInstance.zkDb.maxCommittedLog - 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 3.6028966204781363E17 == 0
zksInstance.sessionTracker.nextSessionId - 30 * zksInstance.zkDb.maxCommittedLog - 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 3.6028966204781363E17 == 0
4 * zksInstance.sessionTracker.nextSessionId - 15 * zksInstance.zkDb.maxCommittedLog - 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 1.44115864819125453E18 == 0
zksInstance.sessionTracker.nextSessionId - 4 * zksInstance.zkDb.maxCommittedLog - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 3.6028966204781363E17 == 0
zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 15 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 3.6028966204781363E17 == 0
zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 15 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 3.6028966204781363E17 == 0
zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 15 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 3.6028966204781363E17 == 0
zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 15 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 3.6028966204781363E17 == 0
8 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 15 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 2.8823172963825091E18 == 0
8 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 15 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2.8823172963825091E18 == 0
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) + 2 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 3.6028966204781363E17 == 0
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) + 2 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 3.6028966204781363E17 == 0
zksInstance.self.bcVote.id == zksInstance.zkDb.dataTree.scount
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount-1)
zksInstance.self.start_fle == 25352879
zksInstance.syncProcessor.randRoll == 10885
zksInstance.syncProcessor.requestOfDeath.createTime == 25307530
zksInstance.hzxid < zksInstance.serverStats.minLatency
zksInstance.hzxid < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.hzxid <= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.hzxid <= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.acceptedEpoch <= zksInstance.serverStats.minLatency
zksInstance.self.acceptedEpoch <= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.acceptedEpoch <= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.acceptedEpoch != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.acceptedEpoch != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.id != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
daikon.Quant.subsetOf(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.myid < zksInstance.serverStats.packetsReceived
zksInstance.self.myid != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.myid != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt < zksInstance.serverStats.packetsReceived
zksInstance.self.qcm.threadCnt != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.start_fle < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.zkDb.maxCommittedLog < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverCnxnFactory.zkServer.requestsInProcess != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.minLatency >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.minLatency >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.serverStats.minLatency >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsReceived != zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - -2147483648 == 0
zksInstance.syncProcessor.zks.requestsInProcess < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.syncProcessor.zks.requestsInProcess != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.dataTree.lastProcessedZxid > zksInstance.zkDb.maxCommittedLog
zksInstance.zkDb.dataTree.lastProcessedZxid > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) <= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
7 * zksInstance.requestsInProcess - 55 * zksInstance.serverStats.packetsReceived + 11 * zksInstance.sessionTracker.nextSessionId - 3.9631859490545987E18 == 0
18 * zksInstance.self.zkDb.maxCommittedLog + 10 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 9 * zksInstance.sessionTracker.nextSessionId + 3.2426066855901266E18 == 0
18 * zksInstance.self.zkDb.maxCommittedLog - 9 * zksInstance.sessionTracker.nextSessionId + 10 * zksInstance.syncProcessor.zks.requestsInProcess + 3.2426066855901266E18 == 0
18 * zksInstance.self.zkDb.maxCommittedLog - 9 * zksInstance.sessionTracker.nextSessionId + 10 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.2426066855901266E18 == 0
18 * zksInstance.self.zkDb.maxCommittedLog - 9 * zksInstance.sessionTracker.nextSessionId + 10 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.2426066855901266E18 == 0
18 * zksInstance.self.zkDb.maxCommittedLog - 12 * zksInstance.sessionTracker.nextSessionId + 13 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 4.3234755807868355E18 == 0
zksInstance.self.zkDb.maxCommittedLog - zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) + 3.6028963173223629E17 == 0
1126576 * zksInstance.self.zkDb.maxCommittedLog - zksInstance.txnLogFactory.txnLog.currentSize + 102416 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4.39873370587136E14 == 0
10 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 9 * zksInstance.serverStats.count - 9 * zksInstance.sessionTracker.nextSessionId + 3.2426066855901266E18 == 0
5 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + 22 * zksInstance.serverStats.packetsReceived - 11 * zksInstance.sessionTracker.nextSessionId + 3.9631859490545992E18 == 0
10 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 9 * zksInstance.serverStats.packetsSent - 9 * zksInstance.sessionTracker.nextSessionId + 3.2426066855901266E18 == 0
zksInstance.serverCnxnFactory.zkServer.requestsInProcess + zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.syncProcessor.zks.requestsInProcess - 3.6028963173223629E17 == 0
10 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 9 * zksInstance.sessionTracker.nextSessionId + 18 * zksInstance.zkDb.maxCommittedLog + 3.2426066855901266E18 == 0
10 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 9 * zksInstance.sessionTracker.nextSessionId - 18 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 3.2426066855901266E18 == 0
10 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 9 * zksInstance.sessionTracker.nextSessionId - 18 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 3.2426066855901266E18 == 0
zksInstance.serverCnxnFactory.zkServer.requestsInProcess + zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 3.6028963173223629E17 == 0
zksInstance.serverCnxnFactory.zkServer.requestsInProcess + zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 3.6028963173223629E17 == 0
10 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 9 * zksInstance.sessionTracker.nextSessionId - 18 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 3.2426066855901266E18 == 0
10 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 9 * zksInstance.sessionTracker.nextSessionId - 18 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 3.2426066855901266E18 == 0
15 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 88 * zksInstance.zkDb.dataTree.lastProcessedZxid - 15 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.77957122048E11 == 0
15 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 88 * zksInstance.zkDb.dataTree.lastProcessedZxid - 15 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.77957122033E11 == 0
zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId + 2 * zksInstance.syncProcessor.zks.requestsInProcess + 7.2057926346447258E17 == 0
9 * zksInstance.serverStats.count + 9 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 3.2426066855901266E18 == 0
9 * zksInstance.serverStats.count + 9 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 3.2426066855901266E18 == 0
9 * zksInstance.serverStats.count + 12 * zksInstance.sessionTracker.nextSessionId - 13 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.3234755807868355E18 == 0
zksInstance.serverStats.count + 2 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 8.589934592E9 == 0
zksInstance.serverStats.count + 2 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 8.589934594E9 == 0
zksInstance.serverStats.maxLatency + 172 * zksInstance.zkDb.dataTree.lastProcessedZxid - 172 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 7.38734374912E11 == 0
zksInstance.serverStats.maxLatency + 172 * zksInstance.zkDb.dataTree.lastProcessedZxid - 172 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 7.38734375084E11 == 0
5 * zksInstance.serverStats.packetsReceived - 8 * zksInstance.sessionTracker.nextSessionId + 7 * zksInstance.syncProcessor.zks.requestsInProcess + 2.8823170538578903E18 == 0
22 * zksInstance.serverStats.packetsReceived - 11 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.9631859490545992E18 == 0
22 * zksInstance.serverStats.packetsReceived - 11 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.9631859490545992E18 == 0
zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 2 * zksInstance.syncProcessor.zks.requestsInProcess + 7.2057926346447258E17 == 0
9 * zksInstance.serverStats.packetsSent + 9 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 3.2426066855901266E18 == 0
9 * zksInstance.serverStats.packetsSent + 9 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 3.2426066855901266E18 == 0
9 * zksInstance.serverStats.packetsSent + 12 * zksInstance.sessionTracker.nextSessionId - 13 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.3234755807868355E18 == 0
zksInstance.serverStats.packetsSent + 2 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 8.589934593E9 == 0
zksInstance.serverStats.packetsSent + 2 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 8.589934595E9 == 0
zksInstance.serverStats.totalLatency + 314 * zksInstance.zkDb.dataTree.lastProcessedZxid - 314 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.348619730944E12 == 0
zksInstance.serverStats.totalLatency + 314 * zksInstance.zkDb.dataTree.lastProcessedZxid - 314 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.348619731258E12 == 0
9 * zksInstance.sessionTracker.nextSessionId - 10 * zksInstance.syncProcessor.zks.requestsInProcess + 18 * zksInstance.zkDb.dataTree.lastProcessedZxid - 3.2426067628995379E18 == 0
9 * zksInstance.sessionTracker.nextSessionId - 10 * zksInstance.syncProcessor.zks.requestsInProcess - 18 * zksInstance.zkDb.maxCommittedLog - 3.2426066855901266E18 == 0
zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.syncProcessor.zks.requestsInProcess + daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 3.6028963173223629E17 == 0
zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.syncProcessor.zks.requestsInProcess + daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 3.6028963173223629E17 == 0
9 * zksInstance.sessionTracker.nextSessionId - 10 * zksInstance.syncProcessor.zks.requestsInProcess + 18 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 3.2426066855901266E18 == 0
9 * zksInstance.sessionTracker.nextSessionId - 10 * zksInstance.syncProcessor.zks.requestsInProcess + 18 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 3.2426066855901266E18 == 0
9 * zksInstance.sessionTracker.nextSessionId - 10 * zksInstance.syncProcessor.zks.requestsInProcess + 18 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 3.2426066855901266E18 == 0
9 * zksInstance.sessionTracker.nextSessionId - 10 * zksInstance.syncProcessor.zks.requestsInProcess + 18 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 3.2426066855901266E18 == 0
9 * zksInstance.sessionTracker.nextSessionId + 18 * zksInstance.zkDb.dataTree.lastProcessedZxid - 10 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 3.2426067628995379E18 == 0
12 * zksInstance.sessionTracker.nextSessionId + 18 * zksInstance.zkDb.dataTree.lastProcessedZxid - 13 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.3234756580962468E18 == 0
zksInstance.sessionTracker.nextSessionId + zksInstance.zkDb.dataTree.lastProcessedZxid - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 3.6028963602720358E17 == 0
9 * zksInstance.sessionTracker.nextSessionId - 18 * zksInstance.zkDb.maxCommittedLog - 10 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 3.2426066855901266E18 == 0
9 * zksInstance.sessionTracker.nextSessionId - 18 * zksInstance.zkDb.maxCommittedLog - 10 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 3.2426066855901266E18 == 0
12 * zksInstance.sessionTracker.nextSessionId - 18 * zksInstance.zkDb.maxCommittedLog - 13 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.3234755807868355E18 == 0
zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.maxCommittedLog - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 3.6028963173223629E17 == 0
9 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 18 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 3.2426066855901266E18 == 0
9 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 18 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 3.2426066855901266E18 == 0
zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 2 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 3.6028963173223629E17 == 0
zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 2 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 3.6028963173223629E17 == 0
9 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 18 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 3.2426066855901266E18 == 0
9 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 18 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 3.2426066855901266E18 == 0
9 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 18 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 3.2426066855901266E18 == 0
9 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 18 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 3.2426066855901266E18 == 0
zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 2 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 3.6028963173223629E17 == 0
zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 2 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 3.6028963173223629E17 == 0
9 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 18 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 3.2426066855901266E18 == 0
9 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 18 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 3.2426066855901266E18 == 0
12 * zksInstance.sessionTracker.nextSessionId + 18 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 13 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.3234755807868355E18 == 0
zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 3.6028963173223629E17 == 0
12 * zksInstance.sessionTracker.nextSessionId + 18 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 13 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.3234755807868355E18 == 0
zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 3.6028963173223629E17 == 0
12 * zksInstance.sessionTracker.nextSessionId - 13 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 18 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 4.3234755807868355E18 == 0
12 * zksInstance.sessionTracker.nextSessionId - 13 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 18 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.3234755807868355E18 == 0
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) + daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 3.6028963173223629E17 == 0
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) + daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 3.6028963173223629E17 == 0
209 * zksInstance.txnLogFactory.txnLog.currentSize - 20480 * zksInstance.zkDb.dataTree.lastProcessedZxid + 21384464 * zksInstance.zkDb.maxCommittedLog + 8.796093022208E13 == 0
9 * zksInstance.txnLogFactory.txnLog.currentSize - 921744 * zksInstance.zkDb.dataTree.lastProcessedZxid + 819328 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 3.958860335284224E15 == 0
9 * zksInstance.txnLogFactory.txnLog.currentSize - 921744 * zksInstance.zkDb.dataTree.lastProcessedZxid + 819328 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 3.958860336103552E15 == 0
zksInstance.txnLogFactory.txnLog.lastZxidSeen - zksInstance.zkDb.dataTree.lastProcessedZxid + 4.294967296E9 * zksInstance.zkDb.maxCommittedLog + 4.294967296E9 == 0
zksInstance.sessionTracker.currentTime == 26274206
zksInstance.sessionTracker.nextExpirationTime == 26277000
zksInstance.sessionTracker.nextSessionId == 72059315944226817L
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 32
zksInstance.serverStats.minLatency == 8 || zksInstance.serverStats.minLatency == 32 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 32 || zksInstance.serverStats.totalLatency == 40
zksInstance.sessionTracker.currentTime == 26157503
zksInstance.sessionTracker.nextSessionId == 72059308295979009L
zksInstance.sessionTracker.currentTime == 26275011
zksInstance.sessionTracker.nextSessionId == 72059315997048833L
zksInstance.sessionTracker.currentTime == 26158545
zksInstance.sessionTracker.nextSessionId == 72059308364333057L
zksInstance.serverStats.minLatency == 4 || zksInstance.serverStats.minLatency == 28 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 28 || zksInstance.serverStats.totalLatency == 32
zksInstance.sessionTracker.currentTime == 26274605
zksInstance.sessionTracker.nextSessionId == 72059315970441217L
zksInstance.sessionTracker.currentTime == 26158096
zksInstance.sessionTracker.nextSessionId == 72059308334907393L
zksInstance.sessionTracker.currentTime == 26275593
zksInstance.sessionTracker.nextSessionId == 72059316035190785L
zksInstance.sessionTracker.currentTime == 26159326
zksInstance.sessionTracker.nextSessionId == 72059308415385601L
zksInstance.serverStats.count == zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverStats.count == zksInstance.zkDb.maxCommittedLog
zksInstance.requestsInProcess == 1 || zksInstance.requestsInProcess == 3
zksInstance.serverStats.count == 0 || zksInstance.serverStats.count == 1 || zksInstance.serverStats.count == 4
zksInstance.serverStats.minLatency == 10 || zksInstance.serverStats.minLatency == 27 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.packetsReceived == 2 || zksInstance.serverStats.packetsReceived == 6 || zksInstance.serverStats.packetsReceived == 7
zksInstance.serverStats.packetsSent == 1 || zksInstance.serverStats.packetsSent == 3 || zksInstance.serverStats.packetsSent == 6
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 27 || zksInstance.serverStats.totalLatency == 68
zksInstance.sessionTracker.currentTime == 26275455
zksInstance.sessionTracker.nextSessionId == 72059316026081281L
zksInstance.serverStats.minLatency % zksInstance.requestsInProcess == 0
zksInstance.serverStats.packetsReceived % zksInstance.requestsInProcess == 0
zksInstance.serverStats.packetsSent % zksInstance.requestsInProcess == 0
zksInstance.serverStats.totalLatency % zksInstance.requestsInProcess == 0
zksInstance.serverStats.minLatency == 8 || zksInstance.serverStats.minLatency == 31 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 31 || zksInstance.serverStats.totalLatency == 65
zksInstance.sessionTracker.currentTime == 26159129
zksInstance.sessionTracker.nextSessionId == 72059308402540545L
zksInstance.serverStats.minLatency == 7 || zksInstance.serverStats.minLatency == 25 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26274278
zksInstance.sessionTracker.nextSessionId == 72059315948945409L
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 29
zksInstance.serverStats.minLatency == 4 || zksInstance.serverStats.minLatency == 29 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26157600
zksInstance.sessionTracker.nextSessionId == 72059308302401537L
zksInstance.sessionTracker.currentTime == 26275080
zksInstance.sessionTracker.nextSessionId == 72059316001570817L
zksInstance.sessionTracker.currentTime == 26158637
zksInstance.sessionTracker.nextSessionId == 72059308370296833L
zksInstance.serverStats.minLatency == 6 || zksInstance.serverStats.minLatency == 28 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 28 || zksInstance.serverStats.totalLatency == 34
zksInstance.sessionTracker.currentTime == 26275146
zksInstance.sessionTracker.nextSessionId == 72059316005896193L
zksInstance.serverStats.minLatency == 5 || zksInstance.serverStats.minLatency == 20 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 20 || zksInstance.serverStats.totalLatency == 25
zksInstance.sessionTracker.currentTime == 26158731
zksInstance.sessionTracker.nextSessionId == 72059308376457217L
zksInstance.serverStats.minLatency == 7 || zksInstance.serverStats.minLatency == 29 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 29 || zksInstance.serverStats.totalLatency == 60
zksInstance.sessionTracker.currentTime == 26275828
zksInstance.sessionTracker.nextSessionId == 72059316050591745L
zksInstance.serverStats.minLatency == 18 || zksInstance.serverStats.minLatency == 42 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 42 || zksInstance.serverStats.totalLatency == 106
zksInstance.sessionTracker.currentTime == 26159682
zksInstance.sessionTracker.nextSessionId == 72059308438781953L
zksInstance.serverStats.maxLatency % zksInstance.serverStats.packetsReceived == 0
zksInstance.serverStats.maxLatency % zksInstance.serverStats.packetsSent == 0
zksInstance.serverStats.minLatency % zksInstance.serverStats.packetsSent == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 23
zksInstance.sessionTracker.currentTime == 26274411
zksInstance.sessionTracker.nextSessionId == 72059315957661697L
zksInstance.sessionTracker.currentTime == 26157812
zksInstance.sessionTracker.nextSessionId == 72059308316229633L
zksInstance.serverStats.minLatency == 2 || zksInstance.serverStats.minLatency == 25 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 25 || zksInstance.serverStats.totalLatency == 27
zksInstance.sessionTracker.currentTime == 26275333
zksInstance.sessionTracker.nextSessionId == 72059316018151425L
zksInstance.serverStats.minLatency == 1 || zksInstance.serverStats.minLatency == 28 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 28 || zksInstance.serverStats.totalLatency == 29
zksInstance.sessionTracker.currentTime == 26158965
zksInstance.sessionTracker.nextSessionId == 72059308391792641L
zksInstance.sessionTracker.currentTime == 26274542
zksInstance.sessionTracker.nextSessionId == 72059315966312449L
zksInstance.sessionTracker.currentTime == 26158004
zksInstance.sessionTracker.nextSessionId == 72059308328812545L
zksInstance.serverStats.minLatency == 1 || zksInstance.serverStats.minLatency == 24 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 24 || zksInstance.serverStats.totalLatency == 25
zksInstance.sessionTracker.currentTime == 26275960
zksInstance.sessionTracker.nextSessionId == 72059316059242497L
zksInstance.serverStats.minLatency == 1 || zksInstance.serverStats.minLatency == 25 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 25 || zksInstance.serverStats.totalLatency == 26
zksInstance.sessionTracker.currentTime == 26159867
zksInstance.sessionTracker.nextSessionId == 72059308450906113L
zksInstance.sessionTracker.currentTime == 26275388
zksInstance.sessionTracker.nextSessionId == 72059316021755905L
zksInstance.sessionTracker.currentTime == 26159045
zksInstance.sessionTracker.nextSessionId == 72059308397035521L
zksInstance.sessionTracker.currentTime == 26274353
zksInstance.sessionTracker.nextSessionId == 72059315953860609L
zksInstance.serverStats.minLatency == 2 || zksInstance.serverStats.minLatency == 27 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 27 || zksInstance.serverStats.totalLatency == 29
zksInstance.sessionTracker.currentTime == 26157709
zksInstance.sessionTracker.nextSessionId == 72059308309544961L
zksInstance.sessionTracker.currentTime == 26276007
zksInstance.sessionTracker.nextSessionId == 72059316062322689L
zksInstance.sessionTracker.expirationInterval % zksInstance.serverStats.packetsSent == 0
zksInstance.sessionTracker.nextExpirationTime % zksInstance.serverStats.packetsSent == 0
23 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 23 * zksInstance.serverStats.packetsReceived + 46 == 0
23 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 23 * zksInstance.serverStats.packetsSent + 23 == 0
14 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
102416 * zksInstance.serverStats.count - 102416 * zksInstance.serverStats.packetsReceived + zksInstance.txnLogFactory.txnLog.currentSize + 204832 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.zkDb.minCommittedLog + 2 == 0
102416 * zksInstance.serverStats.count - 102416 * zksInstance.serverStats.packetsSent + zksInstance.txnLogFactory.txnLog.currentSize + 102416 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.zkDb.minCommittedLog + 1 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 21
zksInstance.sessionTracker.currentTime == 26159934
zksInstance.sessionTracker.nextSessionId == 72059308455297025L
16 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
21 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 21 * zksInstance.serverStats.packetsReceived + 42 == 0
21 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 21 * zksInstance.serverStats.packetsSent + 21 == 0
16 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.sessionTracker.currentTime == 26274924
zksInstance.sessionTracker.nextSessionId == 72059315991347201L
22 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
32 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 32 * zksInstance.serverStats.packetsReceived + 64 == 0
32 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 32 * zksInstance.serverStats.packetsSent + 32 == 0
22 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.sessionTracker.currentTime == 26158445
zksInstance.sessionTracker.nextSessionId == 72059308357713921L
30 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 30 * zksInstance.serverStats.packetsReceived + 60 == 0
30 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 30 * zksInstance.serverStats.packetsSent + 30 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 70
zksInstance.sessionTracker.currentTime == 26273918 || zksInstance.sessionTracker.currentTime == 26274000
zksInstance.sessionTracker.nextExpirationTime == 26274000 || zksInstance.sessionTracker.nextExpirationTime == 26277000
zksInstance.sessionTracker.nextSessionId == 72059315925352449L
zksInstance.sessionTracker.currentTime == 26157275
zksInstance.sessionTracker.nextSessionId == 72059308281102337L
zksInstance.serverStats.minLatency == 2 || zksInstance.serverStats.minLatency == 26 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 26 || zksInstance.serverStats.totalLatency == 28
zksInstance.sessionTracker.currentTime == 26275270
zksInstance.sessionTracker.nextSessionId == 72059316014022657L
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 22
zksInstance.serverStats.minLatency == 1 || zksInstance.serverStats.minLatency == 22 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 22 || zksInstance.serverStats.totalLatency == 23
zksInstance.sessionTracker.currentTime == 26158892
zksInstance.sessionTracker.nextSessionId == 72059308387008513L
zksInstance.sessionTracker.currentTime == 26275890
zksInstance.sessionTracker.nextSessionId == 72059316054589441L
25 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
31 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 31 * zksInstance.serverStats.packetsReceived + 62 == 0
31 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 31 * zksInstance.serverStats.packetsSent + 31 == 0
25 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.sessionTracker.currentTime == 26159791
zksInstance.sessionTracker.nextSessionId == 72059308445925377L
18 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
25 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 25 * zksInstance.serverStats.packetsReceived + 50 == 0
25 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 25 * zksInstance.serverStats.packetsSent + 25 == 0
18 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.sessionTracker.currentTime == 26275520
zksInstance.sessionTracker.nextSessionId == 72059316030406657L
26 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
26 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.sessionTracker.currentTime == 26159220
zksInstance.sessionTracker.nextSessionId == 72059308408504321L
19 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
27 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 27 * zksInstance.serverStats.packetsReceived + 54 == 0
27 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 27 * zksInstance.serverStats.packetsSent + 27 == 0
19 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.sessionTracker.currentTime == 26274817
zksInstance.sessionTracker.nextSessionId == 72059315984334849L
zksInstance.sessionTracker.currentTime == 26158274
zksInstance.sessionTracker.nextSessionId == 72059308346507265L
zksInstance.sessionTracker.currentTime == 26274480
zksInstance.sessionTracker.nextSessionId == 72059315962249217L
zksInstance.sessionTracker.currentTime == 26157916
zksInstance.sessionTracker.nextSessionId == 72059308323045377L
zksInstance.sessionTracker.currentTime == 26274748
zksInstance.sessionTracker.nextSessionId == 72059315979812865L
zksInstance.sessionTracker.currentTime == 26158182
zksInstance.sessionTracker.nextSessionId == 72059308340477953L
zksInstance.serverStats.minLatency == 9 || zksInstance.serverStats.minLatency == 27 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26274121
zksInstance.sessionTracker.nextSessionId == 72059315938656257L
zksInstance.serverStats.minLatency == 3 || zksInstance.serverStats.minLatency == 31 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26157411
zksInstance.sessionTracker.nextSessionId == 72059308290015233L
zksInstance.serverStats.minLatency == 8 || zksInstance.serverStats.minLatency == 27 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 27 || zksInstance.serverStats.totalLatency == 35
zksInstance.sessionTracker.currentTime == 26275773
zksInstance.sessionTracker.nextSessionId == 72059316046921729L
zksInstance.serverStats.minLatency == 8 || zksInstance.serverStats.minLatency == 28 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 28 || zksInstance.serverStats.totalLatency == 36
zksInstance.sessionTracker.currentTime == 26159597
zksInstance.sessionTracker.nextSessionId == 72059308433211393L
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 33
zksInstance.sessionTracker.currentTime == 26275656
zksInstance.sessionTracker.nextSessionId == 72059316039254017L
zksInstance.sessionTracker.currentTime == 26159430
zksInstance.sessionTracker.nextSessionId == 72059308422266881L
zksInstance.sessionTracker.currentTime == 26275206
zksInstance.sessionTracker.nextSessionId == 72059316009828353L
zksInstance.sessionTracker.currentTime == 26158812
zksInstance.sessionTracker.nextSessionId == 72059308381765633L
zksInstance.serverStats.minLatency == 7 || zksInstance.serverStats.minLatency == 22 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 22 || zksInstance.serverStats.totalLatency == 29
zksInstance.sessionTracker.currentTime == 26275725
zksInstance.sessionTracker.nextSessionId == 72059316043776001L
zksInstance.serverStats.minLatency == 3 || zksInstance.serverStats.minLatency == 27 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 27 || zksInstance.serverStats.totalLatency == 30
zksInstance.sessionTracker.currentTime == 26159513
zksInstance.sessionTracker.nextSessionId == 72059308427706369L
zksInstance.serverStats.minLatency == 1 || zksInstance.serverStats.minLatency == 20 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 20 || zksInstance.serverStats.totalLatency == 21
zksInstance.sessionTracker.currentTime == 26274884
zksInstance.sessionTracker.nextSessionId == 72059315988660225L
zksInstance.serverStats.minLatency == 1 || zksInstance.serverStats.minLatency == 31 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 31 || zksInstance.serverStats.totalLatency == 32
zksInstance.sessionTracker.currentTime == 26158358
zksInstance.sessionTracker.nextSessionId == 72059308352012289L
zksInstance.self.electionType == zksInstance.self.myid
zksInstance.self.electionType == zksInstance.self.qcm.mySid
zksInstance.zkDb.dataTree.lastProcessedZxid == zksInstance.zkDb.maxCommittedLog
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionType-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.electionType-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.myid-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
zksInstance.self.electionTimeTaken == 289
zksInstance.sessionTracker.nextSessionId == 216174504225079296L
zksInstance.syncProcessor.randRoll == 2524
zksInstance.syncProcessor.requestOfDeath.createTime == 26277380
zksInstance.self.quorumConfig.half > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog <= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.txnLogFactory.txnLog.currentSize <= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.sessionTracker.currentTime == 26323156
zksInstance.sessionTracker.nextExpirationTime == 26325000
zksInstance.sessionTracker.nextSessionId == 72059319152214017L
zksInstance.sessionTracker.currentTime == 26323309
zksInstance.sessionTracker.nextSessionId == 72059319162306561L
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 49
zksInstance.sessionTracker.currentTime == 26322737
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
2 * zksInstance.serverStats.maxLatency - 49 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.serverStats.packetsReceived - 4 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.serverStats.packetsSent - 4 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.serverStats.totalLatency - 73 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
2 * zksInstance.hzxid - zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177957374459904E17 == 0
31 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
3 * zksInstance.hzxid - 2 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118638249639936E17 == 0
3 * zksInstance.hzxid - 2 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118638249639936E17 == 0
67 * zksInstance.hzxid - 2 * zksInstance.serverStats.totalLatency - 108 * zksInstance.sessionTracker.nextSessionId + 7.7824064654805565E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177957374459904E17 == 0
31 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
3 * zksInstance.serverStats.count - 2 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118638249639936E17 == 0
3 * zksInstance.serverStats.count - 2 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118638249639936E17 == 0
67 * zksInstance.serverStats.count - 2 * zksInstance.serverStats.totalLatency - 108 * zksInstance.sessionTracker.nextSessionId + 7.7824064654805565E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177957374459904E17 == 0
67 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.totalLatency - 95 * zksInstance.sessionTracker.nextSessionId + 6.845635316857897E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.minCommittedLog + 2.16177957374459904E17 == 0
67 * zksInstance.serverStats.packetsSent - 3 * zksInstance.serverStats.totalLatency - 95 * zksInstance.sessionTracker.nextSessionId + 6.845635316857897E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.minCommittedLog + 2.16177957374459904E17 == 0
zksInstance.serverStats.totalLatency - 13 * zksInstance.sessionTracker.nextSessionId - 67 * zksInstance.zkDb.minCommittedLog + 9.3677114862265958E17 == 0
zksInstance.sessionTracker.currentTime == 26323044
zksInstance.sessionTracker.nextSessionId == 72059319144939521L || zksInstance.sessionTracker.nextSessionId == 72059319144939522L
zksInstance.serverStats.totalLatency - 42 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
2 * zksInstance.hzxid - zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 2.1617795743481856E17 == 0
28 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 84 * zksInstance.sessionTracker.nextSessionId + 6.0529828081749197E18 == 0
19 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 31 * zksInstance.sessionTracker.nextSessionId + 2.23383889349312512E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617795743481856E17 == 0
28 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 84 * zksInstance.sessionTracker.nextSessionId + 6.0529828081749197E18 == 0
19 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency - 31 * zksInstance.sessionTracker.nextSessionId + 2.23383889349312512E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617795743481856E17 == 0
zksInstance.serverStats.maxLatency - 14 * zksInstance.serverStats.packetsReceived + 56 * zksInstance.sessionTracker.nextSessionId - 4.0353218721166131E18 == 0
zksInstance.serverStats.maxLatency - 14 * zksInstance.serverStats.packetsSent + 56 * zksInstance.sessionTracker.nextSessionId - 4.0353218721166131E18 == 0
3 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.serverStats.totalLatency + 72 * zksInstance.sessionTracker.nextSessionId - 5.1882709784356454E18 == 0
zksInstance.serverStats.packetsReceived - 4 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.minCommittedLog + 2.8823727657975808E17 == 0
3 * zksInstance.serverStats.packetsSent - 2 * zksInstance.serverStats.totalLatency + 72 * zksInstance.sessionTracker.nextSessionId - 5.1882709784356454E18 == 0
zksInstance.serverStats.packetsSent - 4 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.minCommittedLog + 2.8823727657975808E17 == 0
zksInstance.serverStats.totalLatency - 7 * zksInstance.sessionTracker.nextSessionId - 38 * zksInstance.zkDb.minCommittedLog + 5.0441523401457664E17 == 0
zksInstance.serverStats.minLatency == 51 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26803262
zksInstance.sessionTracker.nextExpirationTime == 26805000
zksInstance.sessionTracker.nextSessionId == 72059350616506369L
zksInstance.serverStats.minLatency == 12 || zksInstance.serverStats.minLatency == 32 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 32 || zksInstance.serverStats.totalLatency == 44
zksInstance.sessionTracker.currentTime == 26807068
zksInstance.sessionTracker.nextExpirationTime == 26808000
zksInstance.sessionTracker.nextSessionId == 72059350865870849L
zksInstance.serverStats.minLatency == 6 || zksInstance.serverStats.minLatency == 30 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 30 || zksInstance.serverStats.totalLatency == 36
zksInstance.sessionTracker.currentTime == 26809219
zksInstance.sessionTracker.nextExpirationTime == 26811000
zksInstance.sessionTracker.nextSessionId == 72059351006838785L
zksInstance.sessionTracker.currentTime == 26806914
zksInstance.sessionTracker.nextSessionId == 72059350855778305L
zksInstance.sessionTracker.currentTime == 26806758
zksInstance.sessionTracker.nextSessionId == 72059350845620225L
zksInstance.sessionTracker.currentTime == 26806594
zksInstance.sessionTracker.nextSessionId == 72059350834872321L
zksInstance.sessionTracker.currentTime == 26638812
zksInstance.sessionTracker.nextExpirationTime == 26640000
zksInstance.sessionTracker.nextSessionId == 72059339839111169L || zksInstance.sessionTracker.nextSessionId == 72059339839111170L
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 1 || daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 2
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns) != null
zksInstance.serverStats.totalLatency - 36 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
21 * zksInstance.hzxid + zksInstance.serverStats.maxLatency - 21 * zksInstance.serverStats.packetsReceived + 42 == 0
21 * zksInstance.hzxid + zksInstance.serverStats.maxLatency - 21 * zksInstance.serverStats.packetsSent + 21 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339839111168E16 == 0
102416 * zksInstance.hzxid - 102416 * zksInstance.serverStats.packetsReceived + zksInstance.txnLogFactory.txnLog.currentSize + 204832 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.zkDb.minCommittedLog + 2 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339839111168E16 == 0
102416 * zksInstance.hzxid - 102416 * zksInstance.serverStats.packetsSent + zksInstance.txnLogFactory.txnLog.currentSize + 102416 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.zkDb.minCommittedLog + 1 == 0
19 * zksInstance.hzxid - 3 * zksInstance.serverStats.totalLatency + 44 * zksInstance.sessionTracker.nextSessionId - 3.1706109529208914E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735935644467E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735935644467E17 == 0
4 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency + 20 * zksInstance.sessionTracker.nextSessionId - 1.44118679678222336E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669919555584E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669919555584E17 == 0
4 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 20 * zksInstance.sessionTracker.nextSessionId - 1.44118679678222336E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669919555584E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669919555584E17 == 0
zksInstance.serverStats.totalLatency - 40 * zksInstance.sessionTracker.nextSessionId + 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735935644467E18 == 0
zksInstance.serverStats.totalLatency - 40 * zksInstance.sessionTracker.nextSessionId + 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735935644467E18 == 0
zksInstance.serverStats.minLatency == 4 || zksInstance.serverStats.minLatency == 27 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26639724
zksInstance.sessionTracker.nextSessionId == 72059339898880001L || zksInstance.sessionTracker.nextSessionId == 72059339898880002L
zksInstance.hzxid > zksInstance.maxSessionTimeout
zksInstance.hzxid >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.hzxid >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.maxSessionTimeout < zksInstance.zkDb.minCommittedLog
zksInstance.maxSessionTimeout < daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess <= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.requestsInProcess >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.maxClientCnxns <= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.maxClientCnxns <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.maxClientCnxns >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.maxLatency >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.minLatency > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.minLatency > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.serverStats.totalLatency - 35 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.serverStats.totalLatency >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.currentTime > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.expirationInterval > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.expirationInterval > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextExpirationTime > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.superSecret > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.superSecret > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.commitLogBuffer > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.commitLogBuffer > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.zkDb.commitLogCount > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.commitLogCount > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
27 * zksInstance.hzxid + zksInstance.serverStats.maxLatency - 27 * zksInstance.serverStats.packetsReceived + 54 == 0
27 * zksInstance.hzxid + zksInstance.serverStats.maxLatency - 27 * zksInstance.serverStats.packetsSent + 27 == 0
23 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.205933989888E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.205933989888E16 == 0
13 * zksInstance.hzxid - 3 * zksInstance.serverStats.totalLatency + 68 * zksInstance.sessionTracker.nextSessionId - 4.90003511312384E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735959552E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735959552E17 == 0
zksInstance.hzxid - zksInstance.sessionTracker.nextSessionId - 4 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 7.205933989888E16 == 0
zksInstance.hzxid - zksInstance.sessionTracker.nextSessionId - 4 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 7.205933989888E16 == 0
13 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.totalLatency + 55 * zksInstance.sessionTracker.nextSessionId - 3.9632636944384E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.602966994944E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.602966994944E17 == 0
zksInstance.serverStats.packetsReceived - 2 * zksInstance.sessionTracker.nextSessionId - 4 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 1.4411867979776E17 == 0
zksInstance.serverStats.packetsReceived - 2 * zksInstance.sessionTracker.nextSessionId - 4 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 1.4411867979776E17 == 0
13 * zksInstance.serverStats.packetsSent - 3 * zksInstance.serverStats.totalLatency + 55 * zksInstance.sessionTracker.nextSessionId - 3.9632636944384E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.602966994944E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.602966994944E17 == 0
zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId - 4 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 1.4411867979776E17 == 0
zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId - 4 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 1.4411867979776E17 == 0
zksInstance.serverStats.totalLatency - 40 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735959552E18 == 0
zksInstance.serverStats.totalLatency - 40 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735959552E18 == 0
zksInstance.serverStats.totalLatency - 35 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.5220768964608E18 == 0
zksInstance.serverStats.totalLatency - 35 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 2.5220768964608E18 == 0
zksInstance.sessionTracker.currentTime == 26639320
zksInstance.sessionTracker.nextSessionId == 72059339872337921L || zksInstance.sessionTracker.nextSessionId == 72059339872337922L
zksInstance.serverStats.totalLatency - 31 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
22 * zksInstance.hzxid + zksInstance.serverStats.maxLatency - 22 * zksInstance.serverStats.packetsReceived + 44 == 0
22 * zksInstance.hzxid + zksInstance.serverStats.maxLatency - 22 * zksInstance.serverStats.packetsSent + 22 == 0
17 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.205933987233792E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.205933987233792E16 == 0
13 * zksInstance.hzxid - 3 * zksInstance.serverStats.totalLatency + 53 * zksInstance.sessionTracker.nextSessionId - 3.8191450132339098E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735948935168E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735948935168E17 == 0
13 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.totalLatency + 40 * zksInstance.sessionTracker.nextSessionId - 2.8823735948935168E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.602966993616896E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.602966993616896E17 == 0
13 * zksInstance.serverStats.packetsSent - 3 * zksInstance.serverStats.totalLatency + 40 * zksInstance.sessionTracker.nextSessionId - 2.8823735948935168E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.602966993616896E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.602966993616896E17 == 0
zksInstance.serverStats.totalLatency - 35 * zksInstance.sessionTracker.nextSessionId + 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.5220768955318272E18 == 0
zksInstance.serverStats.totalLatency - 35 * zksInstance.sessionTracker.nextSessionId + 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.5220768955318272E18 == 0
zksInstance.sessionTracker.currentTime == 26640458
zksInstance.sessionTracker.nextExpirationTime == 26643000
zksInstance.sessionTracker.nextSessionId == 72059339946983425L || zksInstance.sessionTracker.nextSessionId == 72059339946983426L
zksInstance.serverStats.totalLatency - 33 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
23 * zksInstance.hzxid + zksInstance.serverStats.maxLatency - 23 * zksInstance.serverStats.packetsReceived + 46 == 0
23 * zksInstance.hzxid + zksInstance.serverStats.maxLatency - 23 * zksInstance.serverStats.packetsSent + 23 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339946983424E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339946983424E16 == 0
5 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 18 * zksInstance.sessionTracker.nextSessionId - 1.29706811904570163E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.882373597879337E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.882373597879337E17 == 0
5 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency + 13 * zksInstance.sessionTracker.nextSessionId - 9.3677141931078451E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669973491712E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669973491712E17 == 0
5 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 13 * zksInstance.sessionTracker.nextSessionId - 9.3677141931078451E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669973491712E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669973491712E17 == 0
zksInstance.serverStats.totalLatency - 38 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.7382549179853701E18 == 0
zksInstance.serverStats.totalLatency - 38 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.7382549179853701E18 == 0
zksInstance.sessionTracker.currentTime == 26640289
zksInstance.sessionTracker.nextSessionId == 72059339935907841L || zksInstance.sessionTracker.nextSessionId == 72059339935907842L
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 1
zksInstance.hzxid <= zksInstance.serverStats.packetsSent
zksInstance.requestsInProcess >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.serverStats.count >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.maxLatency >= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverStats.minLatency % daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 0
zksInstance.serverStats.totalLatency - 40 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.serverStats.totalLatency % daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 0
zksInstance.txnLogFactory.txnLog.lastZxidSeen >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
2 * zksInstance.hzxid - zksInstance.requestsInProcess - 6 * zksInstance.sessionTracker.nextSessionId + 4.3235603961544704E17 == 0
3 * zksInstance.hzxid - 4 * zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 7.205933993590784E16 == 0
5 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.205933993590784E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.205933993590784E16 == 0
5 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 25 * zksInstance.sessionTracker.nextSessionId - 1.801483498397696E18 == 0
4 * zksInstance.hzxid + zksInstance.sessionTracker.nextSessionId - 5 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 7.205933993590784E16 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735974363136E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735974363136E17 == 0
zksInstance.requestsInProcess - 2 * zksInstance.serverStats.count + 6 * zksInstance.sessionTracker.nextSessionId - 4.3235603961544704E17 == 0
3 * zksInstance.requestsInProcess - 2 * zksInstance.serverStats.packetsReceived + 8 * zksInstance.sessionTracker.nextSessionId - 5.7647471948726272E17 == 0
zksInstance.requestsInProcess - 2 * zksInstance.serverStats.packetsSent + 8 * zksInstance.sessionTracker.nextSessionId - 5.7647471948726272E17 == 0
5 * zksInstance.requestsInProcess - 2 * zksInstance.serverStats.totalLatency + 80 * zksInstance.sessionTracker.nextSessionId - 5.7647471948726272E18 == 0
zksInstance.requestsInProcess + 6 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 4.3235603961544704E17 == 0
5 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.205933993590784E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.205933993590784E16 == 0
5 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency + 25 * zksInstance.sessionTracker.nextSessionId - 1.801483498397696E18 == 0
4 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.205933993590784E16 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735974363136E17 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735974363136E17 == 0
zksInstance.serverStats.minLatency + 24 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.packetsSent + 8 * zksInstance.sessionTracker.nextSessionId - 5.7647471948726272E17 == 0
5 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.totalLatency + 100 * zksInstance.sessionTracker.nextSessionId - 7.205933993590784E18 == 0
3 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId - 5 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.205933993590784E16 == 0
zksInstance.serverStats.packetsReceived - 7 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 5.0441537955135488E17 == 0
zksInstance.serverStats.packetsReceived - 7 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 5.0441537955135488E17 == 0
5 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 20 * zksInstance.sessionTracker.nextSessionId - 1.4411867987181568E18 == 0
zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.205933993590784E16 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.602966996795392E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.602966996795392E17 == 0
zksInstance.serverStats.totalLatency - 25 * zksInstance.sessionTracker.nextSessionId - 5 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 1.801483498397696E18 == 0
zksInstance.serverStats.totalLatency - 45 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.2426702971158528E18 == 0
zksInstance.serverStats.totalLatency - 45 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.2426702971158528E18 == 0
4 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 2.8823735974363136E17 == 0
4 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 2.8823735974363136E17 == 0
zksInstance.sessionTracker.currentTime == 26638896
zksInstance.sessionTracker.nextSessionId == 72059339844616193L || zksInstance.sessionTracker.nextSessionId == 72059339844616194L
zksInstance.serverStats.totalLatency - 34 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
25 * zksInstance.hzxid + zksInstance.serverStats.maxLatency - 25 * zksInstance.serverStats.packetsReceived + 50 == 0
25 * zksInstance.hzxid + zksInstance.serverStats.maxLatency - 25 * zksInstance.serverStats.packetsSent + 25 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339844616192E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339844616192E16 == 0
14 * zksInstance.hzxid - 3 * zksInstance.serverStats.totalLatency + 61 * zksInstance.sessionTracker.nextSessionId - 4.3956197305215877E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735937846477E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735937846477E17 == 0
14 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.totalLatency + 47 * zksInstance.sessionTracker.nextSessionId - 3.386788972696961E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669922308096E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669922308096E17 == 0
14 * zksInstance.serverStats.packetsSent - 3 * zksInstance.serverStats.totalLatency + 47 * zksInstance.sessionTracker.nextSessionId - 3.386788972696961E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669922308096E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669922308096E17 == 0
zksInstance.serverStats.totalLatency - 39 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8103142539400315E18 == 0
zksInstance.serverStats.totalLatency - 39 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8103142539400315E18 == 0
zksInstance.serverStats.minLatency == 3 || zksInstance.serverStats.minLatency == 23 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26639801
zksInstance.sessionTracker.nextSessionId == 72059339903926273L || zksInstance.sessionTracker.nextSessionId == 72059339903926274L
zksInstance.serverStats.totalLatency - 30 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
20 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339903926272E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339903926272E16 == 0
4 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 19 * zksInstance.sessionTracker.nextSessionId - 1.36912745817459917E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735961570509E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735961570509E17 == 0
4 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency + 15 * zksInstance.sessionTracker.nextSessionId - 1.08089009855889408E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669951963136E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669951963136E17 == 0
4 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 15 * zksInstance.sessionTracker.nextSessionId - 1.08089009855889408E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669951963136E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669951963136E17 == 0
zksInstance.serverStats.totalLatency - 35 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.5220768966374195E18 == 0
zksInstance.serverStats.totalLatency - 35 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.5220768966374195E18 == 0
zksInstance.sessionTracker.currentTime == 26639881
zksInstance.sessionTracker.nextSessionId == 72059339909169153L || zksInstance.sessionTracker.nextSessionId == 72059339909169154L
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339909169152E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339909169152E16 == 0
5 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 20 * zksInstance.sessionTracker.nextSessionId - 1.44118679818338304E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735963667661E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735963667661E17 == 0
5 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency + 15 * zksInstance.sessionTracker.nextSessionId - 1.08089009863753728E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669954584576E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669954584576E17 == 0
5 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 15 * zksInstance.sessionTracker.nextSessionId - 1.08089009863753728E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669954584576E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669954584576E17 == 0
zksInstance.serverStats.totalLatency - 40 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735963667661E18 == 0
zksInstance.serverStats.totalLatency - 40 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735963667661E18 == 0
zksInstance.sessionTracker.currentTime == 26640754
zksInstance.sessionTracker.nextSessionId == 72059339966382081L || zksInstance.sessionTracker.nextSessionId == 72059339966382082L
zksInstance.serverStats.totalLatency - 38 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
2 * zksInstance.hzxid - zksInstance.requestsInProcess - 6 * zksInstance.sessionTracker.nextSessionId + 4.3235603979829248E17 == 0
3 * zksInstance.hzxid - 4 * zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 7.205933996638208E16 == 0
5 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.205933996638208E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.205933996638208E16 == 0
17 * zksInstance.hzxid - 3 * zksInstance.serverStats.totalLatency + 61 * zksInstance.sessionTracker.nextSessionId - 4.3956197379493069E18 == 0
4 * zksInstance.hzxid + zksInstance.sessionTracker.nextSessionId - 5 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 7.205933996638208E16 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735986552832E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735986552832E17 == 0
zksInstance.requestsInProcess - 2 * zksInstance.serverStats.count + 6 * zksInstance.sessionTracker.nextSessionId - 4.3235603979829248E17 == 0
3 * zksInstance.requestsInProcess - 2 * zksInstance.serverStats.packetsReceived + 8 * zksInstance.sessionTracker.nextSessionId - 5.7647471973105664E17 == 0
zksInstance.requestsInProcess - 2 * zksInstance.serverStats.packetsSent + 8 * zksInstance.sessionTracker.nextSessionId - 5.7647471973105664E17 == 0
5 * zksInstance.requestsInProcess - 2 * zksInstance.serverStats.totalLatency + 76 * zksInstance.sessionTracker.nextSessionId - 5.4765098374450381E18 == 0
zksInstance.requestsInProcess + 6 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 4.3235603979829248E17 == 0
26 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 26 * zksInstance.serverStats.packetsSent + 26 == 0
5 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.205933996638208E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.205933996638208E16 == 0
17 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.totalLatency + 61 * zksInstance.sessionTracker.nextSessionId - 4.3956197379493069E18 == 0
4 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.205933996638208E16 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735986552832E17 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735986552832E17 == 0
zksInstance.serverStats.minLatency + 18 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.packetsSent + 8 * zksInstance.sessionTracker.nextSessionId - 5.7647471973105664E17 == 0
5 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.totalLatency + 94 * zksInstance.sessionTracker.nextSessionId - 6.7735779568399155E18 == 0
3 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId - 5 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.205933996638208E16 == 0
zksInstance.serverStats.packetsReceived - 7 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 5.0441537976467456E17 == 0
zksInstance.serverStats.packetsReceived - 7 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 5.0441537976467456E17 == 0
9 * zksInstance.serverStats.packetsSent - 2 * zksInstance.serverStats.totalLatency + 41 * zksInstance.sessionTracker.nextSessionId - 2.9544329386216653E18 == 0
zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.205933996638208E16 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.602966998319104E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.602966998319104E17 == 0
3 * zksInstance.serverStats.totalLatency - 61 * zksInstance.sessionTracker.nextSessionId - 17 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 4.3956197379493069E18 == 0
zksInstance.serverStats.totalLatency - 43 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.0985516185544294E18 == 0
zksInstance.serverStats.totalLatency - 43 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.0985516185544294E18 == 0
4 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 2.8823735986552832E17 == 0
4 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 2.8823735986552832E17 == 0
zksInstance.sessionTracker.currentTime == 26639072
zksInstance.sessionTracker.nextSessionId == 72059339856150529L || zksInstance.sessionTracker.nextSessionId == 72059339856150530L
zksInstance.serverStats.totalLatency - 37 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
5 * zksInstance.hzxid - 4 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.2059339856150528E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339856150528E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339856150528E16 == 0
3 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 28 * zksInstance.sessionTracker.nextSessionId - 2.01766151597221478E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735942460211E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735942460211E17 == 0
20 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339856150528E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339856150528E16 == 0
3 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency + 28 * zksInstance.sessionTracker.nextSessionId - 2.01766151597221478E18 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735942460211E17 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735942460211E17 == 0
3 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency + 25 * zksInstance.sessionTracker.nextSessionId - 1.8014834964037632E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669928075264E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669928075264E17 == 0
3 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 25 * zksInstance.sessionTracker.nextSessionId - 1.8014834964037632E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669928075264E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669928075264E17 == 0
zksInstance.serverStats.totalLatency - 40 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735942460211E18 == 0
zksInstance.serverStats.totalLatency - 40 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735942460211E18 == 0
zksInstance.sessionTracker.currentTime == 26640097
zksInstance.sessionTracker.nextSessionId == 72059339923324929L || zksInstance.sessionTracker.nextSessionId == 72059339923324930L
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.2059339923324928E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339923324928E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339923324928E16 == 0
5 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 27 * zksInstance.sessionTracker.nextSessionId - 1.94560217792977306E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735969329971E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735969329971E17 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339923324928E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339923324928E16 == 0
5 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency + 27 * zksInstance.sessionTracker.nextSessionId - 1.94560217792977306E18 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735969329971E17 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735969329971E17 == 0
5 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency + 22 * zksInstance.sessionTracker.nextSessionId - 1.58530547831314842E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669961662464E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669961662464E17 == 0
5 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 22 * zksInstance.sessionTracker.nextSessionId - 1.58530547831314842E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669961662464E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669961662464E17 == 0
zksInstance.serverStats.totalLatency - 47 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.3867889763962716E18 == 0
zksInstance.serverStats.totalLatency - 47 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.3867889763962716E18 == 0
zksInstance.sessionTracker.currentTime == 26639236
zksInstance.sessionTracker.nextSessionId == 72059339866832897L || zksInstance.sessionTracker.nextSessionId == 72059339866832898L
5 * zksInstance.hzxid - 4 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.2059339866832896E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339866832896E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339866832896E16 == 0
4 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 25 * zksInstance.sessionTracker.nextSessionId - 1.8014834966708224E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735946733158E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735946733158E17 == 0
17 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339866832896E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339866832896E16 == 0
4 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency + 25 * zksInstance.sessionTracker.nextSessionId - 1.8014834966708224E18 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735946733158E17 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735946733158E17 == 0
4 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency + 21 * zksInstance.sessionTracker.nextSessionId - 1.51324613720349082E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669933416448E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669933416448E17 == 0
4 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 21 * zksInstance.sessionTracker.nextSessionId - 1.51324613720349082E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669933416448E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669933416448E17 == 0
zksInstance.serverStats.totalLatency - 41 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.9544329345401487E18 == 0
zksInstance.serverStats.totalLatency - 41 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.9544329345401487E18 == 0
zksInstance.sessionTracker.currentTime == 26640915
zksInstance.sessionTracker.nextSessionId == 72059339976867841L || zksInstance.sessionTracker.nextSessionId == 72059339976867842L
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.205933997686784E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.205933997686784E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.205933997686784E16 == 0
13 * zksInstance.hzxid - 3 * zksInstance.serverStats.totalLatency + 68 * zksInstance.sessionTracker.nextSessionId - 4.9000351184270131E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735990747136E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735990747136E17 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.205933997686784E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.205933997686784E16 == 0
13 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.totalLatency + 68 * zksInstance.sessionTracker.nextSessionId - 4.9000351184270131E18 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735990747136E17 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735990747136E17 == 0
13 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.totalLatency + 55 * zksInstance.sessionTracker.nextSessionId - 3.9632636987277312E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.602966998843392E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.602966998843392E17 == 0
13 * zksInstance.serverStats.packetsSent - 3 * zksInstance.serverStats.totalLatency + 55 * zksInstance.sessionTracker.nextSessionId - 3.9632636987277312E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.602966998843392E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.602966998843392E17 == 0
zksInstance.serverStats.totalLatency - 40 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735990747136E18 == 0
zksInstance.serverStats.totalLatency - 40 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735990747136E18 == 0
zksInstance.sessionTracker.currentTime == 26640207
zksInstance.sessionTracker.nextSessionId == 72059339930533889L || zksInstance.sessionTracker.nextSessionId == 72059339930533890L
5 * zksInstance.hzxid - 4 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.2059339930533888E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339930533888E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339930533888E16 == 0
9 * zksInstance.hzxid - 2 * zksInstance.serverStats.totalLatency + 54 * zksInstance.sessionTracker.nextSessionId - 3.89120435624883E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735972213555E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735972213555E17 == 0
26 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 26 * zksInstance.serverStats.packetsReceived + 52 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339930533888E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339930533888E16 == 0
9 * zksInstance.serverStats.count - 2 * zksInstance.serverStats.totalLatency + 54 * zksInstance.sessionTracker.nextSessionId - 3.89120435624883E18 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735972213555E17 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735972213555E17 == 0
9 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.serverStats.totalLatency + 45 * zksInstance.sessionTracker.nextSessionId - 3.242670296874025E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669965266944E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669965266944E17 == 0
9 * zksInstance.serverStats.packetsSent - 2 * zksInstance.serverStats.totalLatency + 45 * zksInstance.sessionTracker.nextSessionId - 3.242670296874025E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669965266944E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669965266944E17 == 0
zksInstance.serverStats.totalLatency - 45 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.242670296874025E18 == 0
zksInstance.serverStats.totalLatency - 45 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.242670296874025E18 == 0
zksInstance.sessionTracker.currentTime == 26638991
zksInstance.sessionTracker.nextSessionId == 72059339850776577L || zksInstance.sessionTracker.nextSessionId == 72059339850776578L
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.2059339850776576E16 == 0
15 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339850776576E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339850776576E16 == 0
20 * zksInstance.hzxid - 3 * zksInstance.serverStats.totalLatency + 46 * zksInstance.sessionTracker.nextSessionId - 3.3147296331357225E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.882373594031063E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.882373594031063E17 == 0
22 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 22 * zksInstance.serverStats.packetsReceived + 44 == 0
22 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 22 * zksInstance.serverStats.packetsSent + 22 == 0
15 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339850776576E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339850776576E16 == 0
20 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.totalLatency + 46 * zksInstance.sessionTracker.nextSessionId - 3.3147296331357225E18 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.882373594031063E17 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.882373594031063E17 == 0
4 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency + 22 * zksInstance.sessionTracker.nextSessionId - 1.58530547671708467E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669925388288E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669925388288E17 == 0
4 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 22 * zksInstance.sessionTracker.nextSessionId - 1.58530547671708467E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669925388288E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669925388288E17 == 0
zksInstance.serverStats.totalLatency - 42 * zksInstance.sessionTracker.nextSessionId + 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.0264922737326162E18 == 0
zksInstance.serverStats.totalLatency - 42 * zksInstance.sessionTracker.nextSessionId + 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.0264922737326162E18 == 0
zksInstance.sessionTracker.currentTime == 26640978
zksInstance.sessionTracker.nextSessionId == 72059339981062145L || zksInstance.sessionTracker.nextSessionId == 72059339981062146L
zksInstance.serverStats.totalLatency - 44 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
6 * zksInstance.hzxid - 5 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.2059339981062144E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339981062144E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339981062144E16 == 0
17 * zksInstance.hzxid - 3 * zksInstance.serverStats.totalLatency + 79 * zksInstance.sessionTracker.nextSessionId - 5.6926878585039094E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735992424858E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735992424858E17 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339981062144E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339981062144E16 == 0
17 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.totalLatency + 79 * zksInstance.sessionTracker.nextSessionId - 5.6926878585039094E18 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735992424858E17 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735992424858E17 == 0
9 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.serverStats.totalLatency + 53 * zksInstance.sessionTracker.nextSessionId - 3.8191450189962936E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669990531072E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669990531072E17 == 0
9 * zksInstance.serverStats.packetsSent - 2 * zksInstance.serverStats.totalLatency + 53 * zksInstance.sessionTracker.nextSessionId - 3.8191450189962936E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669990531072E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669990531072E17 == 0
zksInstance.serverStats.totalLatency - 49 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.5309076590720451E18 == 0
zksInstance.serverStats.totalLatency - 49 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.5309076590720451E18 == 0
zksInstance.sessionTracker.currentTime == 26639641
zksInstance.sessionTracker.nextSessionId == 72059339893440513L || zksInstance.sessionTracker.nextSessionId == 72059339893440514L
7 * zksInstance.hzxid - 6 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.2059339893440512E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339893440512E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339893440512E16 == 0
13 * zksInstance.hzxid - 3 * zksInstance.serverStats.totalLatency + 71 * zksInstance.sessionTracker.nextSessionId - 5.1162131324342764E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735957376205E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735957376205E17 == 0
28 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 28 * zksInstance.serverStats.packetsReceived + 56 == 0
28 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 28 * zksInstance.serverStats.packetsSent + 28 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339893440512E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339893440512E16 == 0
13 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.totalLatency + 71 * zksInstance.sessionTracker.nextSessionId - 5.1162131324342764E18 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735957376205E17 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735957376205E17 == 0
13 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.totalLatency + 58 * zksInstance.sessionTracker.nextSessionId - 4.1794417138195497E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669946720256E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669946720256E17 == 0
13 * zksInstance.serverStats.packetsSent - 3 * zksInstance.serverStats.totalLatency + 58 * zksInstance.sessionTracker.nextSessionId - 4.1794417138195497E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669946720256E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669946720256E17 == 0
zksInstance.serverStats.totalLatency - 41 * zksInstance.sessionTracker.nextSessionId + 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.954432935631061E18 == 0
zksInstance.serverStats.totalLatency - 41 * zksInstance.sessionTracker.nextSessionId + 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.954432935631061E18 == 0
zksInstance.sessionTracker.currentTime == 26638494
zksInstance.sessionTracker.nextSessionId == 72059339818270721L || zksInstance.sessionTracker.nextSessionId == 72059339818270722L
zksInstance.serverStats.totalLatency - 62 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
5 * zksInstance.hzxid - 4 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.205933981827072E16 == 0
30 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.205933981827072E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.205933981827072E16 == 0
31 * zksInstance.hzxid - 3 * zksInstance.serverStats.totalLatency + 83 * zksInstance.sessionTracker.nextSessionId - 5.9809252049164698E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735927308288E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735927308288E17 == 0
38 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 38 * zksInstance.serverStats.packetsReceived + 76 == 0
38 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 38 * zksInstance.serverStats.packetsSent + 38 == 0
30 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.205933981827072E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.205933981827072E16 == 0
31 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.totalLatency + 83 * zksInstance.sessionTracker.nextSessionId - 5.9809252049164698E18 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735927308288E17 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735927308288E17 == 0
31 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.totalLatency + 52 * zksInstance.sessionTracker.nextSessionId - 3.7470856705500774E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.602966990913536E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.602966990913536E17 == 0
31 * zksInstance.serverStats.packetsSent - 3 * zksInstance.serverStats.totalLatency + 52 * zksInstance.sessionTracker.nextSessionId - 3.7470856705500774E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.602966990913536E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.602966990913536E17 == 0
zksInstance.serverStats.totalLatency - 69 * zksInstance.sessionTracker.nextSessionId + 7 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 4.9720944474606797E18 == 0
zksInstance.serverStats.totalLatency - 69 * zksInstance.sessionTracker.nextSessionId + 7 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 4.9720944474606797E18 == 0
zksInstance.sessionTracker.currentTime == 26640033
zksInstance.sessionTracker.nextSessionId == 72059339919130625L || zksInstance.sessionTracker.nextSessionId == 72059339919130626L
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.2059339919130624E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339919130624E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339919130624E16 == 0
16 * zksInstance.hzxid - 3 * zksInstance.serverStats.totalLatency + 53 * zksInstance.sessionTracker.nextSessionId - 3.8191450157139231E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.882373596765225E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.882373596765225E17 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339919130624E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339919130624E16 == 0
16 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.totalLatency + 53 * zksInstance.sessionTracker.nextSessionId - 3.8191450157139231E18 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.882373596765225E17 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.882373596765225E17 == 0
16 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.totalLatency + 37 * zksInstance.sessionTracker.nextSessionId - 2.6661955770078331E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669959565312E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669959565312E17 == 0
16 * zksInstance.serverStats.packetsSent - 3 * zksInstance.serverStats.totalLatency + 37 * zksInstance.sessionTracker.nextSessionId - 2.6661955770078331E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669959565312E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669959565312E17 == 0
zksInstance.serverStats.totalLatency - 39 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8103142568460943E18 == 0
zksInstance.serverStats.totalLatency - 39 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8103142568460943E18 == 0
zksInstance.sessionTracker.currentTime == 26640831
zksInstance.sessionTracker.nextSessionId == 72059339971428353L || zksInstance.sessionTracker.nextSessionId == 72059339971428354L
zksInstance.serverStats.totalLatency - 43 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
6 * zksInstance.hzxid - 5 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.2059339971428352E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339971428352E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339971428352E16 == 0
6 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 24 * zksInstance.sessionTracker.nextSessionId - 1.72942415931428045E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735988571341E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735988571341E17 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339971428352E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339971428352E16 == 0
6 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency + 24 * zksInstance.sessionTracker.nextSessionId - 1.72942415931428045E18 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735988571341E17 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735988571341E17 == 0
6 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency + 18 * zksInstance.sessionTracker.nextSessionId - 1.29706811948571034E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669985714176E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669985714176E17 == 0
6 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 18 * zksInstance.sessionTracker.nextSessionId - 1.29706811948571034E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669985714176E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669985714176E17 == 0
zksInstance.serverStats.totalLatency - 48 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.4588483186285609E18 == 0
zksInstance.serverStats.totalLatency - 48 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.4588483186285609E18 == 0
zksInstance.sessionTracker.currentTime == 26640370
zksInstance.sessionTracker.nextSessionId == 72059339941216257L || zksInstance.sessionTracker.nextSessionId == 72059339941216258L
7 * zksInstance.hzxid - 6 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.2059339941216256E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339941216256E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339941216256E16 == 0
17 * zksInstance.hzxid - 3 * zksInstance.serverStats.totalLatency + 76 * zksInstance.sessionTracker.nextSessionId - 5.4765098355324355E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735976486502E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735976486502E17 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339941216256E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339941216256E16 == 0
17 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.totalLatency + 76 * zksInstance.sessionTracker.nextSessionId - 5.4765098355324355E18 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735976486502E17 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735976486502E17 == 0
17 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.totalLatency + 59 * zksInstance.sessionTracker.nextSessionId - 4.2515010565317591E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669970608128E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669970608128E17 == 0
17 * zksInstance.serverStats.packetsSent - 3 * zksInstance.serverStats.totalLatency + 59 * zksInstance.sessionTracker.nextSessionId - 4.2515010565317591E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669970608128E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669970608128E17 == 0
zksInstance.serverStats.totalLatency - 48 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.4588483171783803E18 == 0
zksInstance.serverStats.totalLatency - 48 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.4588483171783803E18 == 0
zksInstance.sessionTracker.currentTime == 26639475
zksInstance.sessionTracker.nextSessionId == 72059339882496001L || zksInstance.sessionTracker.nextSessionId == 72059339882496002L
5 * zksInstance.hzxid - 4 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.2059339882496E16 == 0
13 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339882496E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339882496E16 == 0
9 * zksInstance.hzxid - 2 * zksInstance.serverStats.totalLatency + 44 * zksInstance.sessionTracker.nextSessionId - 3.170610954829824E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.88237359529984E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.88237359529984E17 == 0
13 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339882496E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339882496E16 == 0
9 * zksInstance.serverStats.count - 2 * zksInstance.serverStats.totalLatency + 44 * zksInstance.sessionTracker.nextSessionId - 3.170610954829824E18 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.88237359529984E17 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.88237359529984E17 == 0
9 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.serverStats.totalLatency + 35 * zksInstance.sessionTracker.nextSessionId - 2.52207689588736E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669941248E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669941248E17 == 0
9 * zksInstance.serverStats.packetsSent - 2 * zksInstance.serverStats.totalLatency + 35 * zksInstance.sessionTracker.nextSessionId - 2.52207689588736E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669941248E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669941248E17 == 0
zksInstance.serverStats.totalLatency - 40 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.88237359529984E18 == 0
zksInstance.serverStats.totalLatency - 40 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.88237359529984E18 == 0
zksInstance.sessionTracker.currentTime == 26639159
zksInstance.sessionTracker.nextSessionId == 72059339861852161L || zksInstance.sessionTracker.nextSessionId == 72059339861852162L
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.205933986185216E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.205933986185216E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.205933986185216E16 == 0
4 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 22 * zksInstance.sessionTracker.nextSessionId - 1.58530547696074752E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735944740864E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735944740864E17 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.205933986185216E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.205933986185216E16 == 0
4 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency + 22 * zksInstance.sessionTracker.nextSessionId - 1.58530547696074752E18 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735944740864E17 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735944740864E17 == 0
4 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency + 18 * zksInstance.sessionTracker.nextSessionId - 1.29706811751333888E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.602966993092608E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.602966993092608E17 == 0
4 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 18 * zksInstance.sessionTracker.nextSessionId - 1.29706811751333888E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.602966993092608E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.602966993092608E17 == 0
zksInstance.serverStats.totalLatency - 38 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.7382549147503821E18 == 0
zksInstance.serverStats.totalLatency - 38 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.7382549147503821E18 == 0
zksInstance.sessionTracker.currentTime == 26639389
zksInstance.sessionTracker.nextSessionId == 72059339876925441L || zksInstance.sessionTracker.nextSessionId == 72059339876925442L
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.205933987692544E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.205933987692544E16 == 0
5 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 20 * zksInstance.sessionTracker.nextSessionId - 1.4411867975385088E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735950770176E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735950770176E17 == 0
4 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency + 20 * zksInstance.sessionTracker.nextSessionId - 1.4411867975385088E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.602966993846272E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.602966993846272E17 == 0
4 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 20 * zksInstance.sessionTracker.nextSessionId - 1.4411867975385088E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.602966993846272E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.602966993846272E17 == 0
zksInstance.serverStats.totalLatency - 40 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735950770176E18 == 0
zksInstance.serverStats.totalLatency - 40 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735950770176E18 == 0
zksInstance.sessionTracker.currentTime == 26638694
zksInstance.sessionTracker.nextSessionId == 72059339831377921L || zksInstance.sessionTracker.nextSessionId == 72059339831377922L
30 * zksInstance.hzxid + zksInstance.serverStats.maxLatency - 30 * zksInstance.serverStats.packetsReceived + 60 == 0
30 * zksInstance.hzxid + zksInstance.serverStats.maxLatency - 30 * zksInstance.serverStats.packetsSent + 30 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.205933983137792E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.205933983137792E16 == 0
6 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 24 * zksInstance.sessionTracker.nextSessionId - 1.72942415595307008E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735932551168E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735932551168E17 == 0
6 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency + 18 * zksInstance.sessionTracker.nextSessionId - 1.29706811696480256E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.602966991568896E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.602966991568896E17 == 0
6 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 18 * zksInstance.sessionTracker.nextSessionId - 1.29706811696480256E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.602966991568896E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.602966991568896E17 == 0
zksInstance.serverStats.totalLatency - 48 * zksInstance.sessionTracker.nextSessionId + 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.4588483119061402E18 == 0
zksInstance.serverStats.totalLatency - 48 * zksInstance.sessionTracker.nextSessionId + 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.4588483119061402E18 == 0
zksInstance.sessionTracker.currentTime == 26640685
zksInstance.sessionTracker.nextSessionId == 72059339961794561L || zksInstance.sessionTracker.nextSessionId == 72059339961794562L
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.205933996179456E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.205933996179456E16 == 0
13 * zksInstance.hzxid - 3 * zksInstance.serverStats.totalLatency + 68 * zksInstance.sessionTracker.nextSessionId - 4.9000351174020301E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735984717824E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735984717824E17 == 0
13 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.totalLatency + 55 * zksInstance.sessionTracker.nextSessionId - 3.9632636978987008E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.602966998089728E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.602966998089728E17 == 0
13 * zksInstance.serverStats.packetsSent - 3 * zksInstance.serverStats.totalLatency + 55 * zksInstance.sessionTracker.nextSessionId - 3.9632636978987008E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.602966998089728E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.602966998089728E17 == 0
zksInstance.serverStats.totalLatency - 40 * zksInstance.sessionTracker.nextSessionId + 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735984717824E18 == 0
zksInstance.serverStats.totalLatency - 40 * zksInstance.sessionTracker.nextSessionId + 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735984717824E18 == 0
zksInstance.sessionTracker.currentTime == 26640533
zksInstance.sessionTracker.nextSessionId == 72059339951898625L || zksInstance.sessionTracker.nextSessionId == 72059339951898626L
zksInstance.serverStats.totalLatency - 41 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
29 * zksInstance.hzxid + zksInstance.serverStats.maxLatency - 29 * zksInstance.serverStats.packetsReceived + 58 == 0
29 * zksInstance.hzxid + zksInstance.serverStats.maxLatency - 29 * zksInstance.serverStats.packetsSent + 29 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339951898624E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339951898624E16 == 0
17 * zksInstance.hzxid - 3 * zksInstance.serverStats.totalLatency + 70 * zksInstance.sessionTracker.nextSessionId - 5.0441537966329037E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.882373598075945E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.882373598075945E17 == 0
9 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.serverStats.totalLatency + 47 * zksInstance.sessionTracker.nextSessionId - 3.3867889777392353E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669975949312E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669975949312E17 == 0
9 * zksInstance.serverStats.packetsSent - 2 * zksInstance.serverStats.totalLatency + 47 * zksInstance.sessionTracker.nextSessionId - 3.3867889777392353E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669975949312E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669975949312E17 == 0
zksInstance.serverStats.totalLatency - 46 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.3147296377873367E18 == 0
zksInstance.serverStats.totalLatency - 46 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.3147296377873367E18 == 0
zksInstance.sessionTracker.currentTime == 26639950 || zksInstance.sessionTracker.currentTime == 26640000
zksInstance.sessionTracker.nextExpirationTime == 26640000 || zksInstance.sessionTracker.nextExpirationTime == 26643000
zksInstance.sessionTracker.nextSessionId == 72059339913625601L || zksInstance.sessionTracker.nextSessionId == 72059339913625602L
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.serverStats.minLatency
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.serverStats.packetsReceived
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.serverStats.packetsSent
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.sessionTracker.currentTime
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.sessionTracker.nextExpirationTime
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.sessionTracker.nextSessionId
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
31 * zksInstance.hzxid + zksInstance.serverStats.maxLatency - 31 * zksInstance.serverStats.packetsReceived + 62 == 0
31 * zksInstance.hzxid + zksInstance.serverStats.maxLatency - 31 * zksInstance.serverStats.packetsSent + 31 == 0
1550 * zksInstance.hzxid - 50 * zksInstance.serverStats.maxLatency - 93 * zksInstance.sessionTracker.currentTime + 2.47751535E9 == 0
75 * zksInstance.hzxid - 50 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.currentTime + 26640050 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.20593399136256E16 == 0
75 * zksInstance.hzxid - 50 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.currentTime + 26640000 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.20593399136256E16 == 0
975 * zksInstance.hzxid - 50 * zksInstance.serverStats.totalLatency - 29 * zksInstance.sessionTracker.currentTime + 772558550 == 0
6 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 25 * zksInstance.sessionTracker.nextSessionId - 1.80148349784064E18 == 0
2560400 * zksInstance.hzxid - 153624 * zksInstance.sessionTracker.currentTime - 25 * zksInstance.txnLogFactory.txnLog.currentSize + 4.0925356788E12 == 0
25 * zksInstance.hzxid - zksInstance.sessionTracker.currentTime - 50 * zksInstance.zkDb.minCommittedLog + 26639950 == 0
25 * zksInstance.hzxid - 2 * zksInstance.sessionTracker.currentTime - 50 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 53279950 == 0
25 * zksInstance.hzxid - 2 * zksInstance.sessionTracker.currentTime - 50 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 53279900 == 0
12802000 * zksInstance.hzxid - 12802 * zksInstance.sessionTracker.nextExpirationTime - 125 * zksInstance.txnLogFactory.txnLog.currentSize + 3.4104528E11 == 0
750 * zksInstance.hzxid - zksInstance.sessionTracker.nextExpirationTime - 1500 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 26641500 == 0
750 * zksInstance.hzxid - zksInstance.sessionTracker.nextExpirationTime - 1500 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 26640000 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.882373596545024E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.882373596545024E17 == 0
zksInstance.hzxid - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 7.20593399136256E16 == 0
zksInstance.hzxid - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 7.20593399136256E16 == 0
75 * zksInstance.serverStats.maxLatency - 775 * zksInstance.serverStats.packetsReceived + 31 * zksInstance.sessionTracker.currentTime - 825836900 == 0
75 * zksInstance.serverStats.maxLatency - 775 * zksInstance.serverStats.packetsSent + 31 * zksInstance.sessionTracker.currentTime - 825837675 == 0
195 * zksInstance.serverStats.maxLatency - 155 * zksInstance.serverStats.totalLatency + 31 * zksInstance.sessionTracker.currentTime - 825838450 == 0
325 * zksInstance.serverStats.packetsReceived - 25 * zksInstance.serverStats.totalLatency - 8 * zksInstance.sessionTracker.currentTime + 213118950 == 0
6 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency + 19 * zksInstance.sessionTracker.nextSessionId - 1.3691274583588864E18 == 0
1280200 * zksInstance.serverStats.packetsReceived - 76812 * zksInstance.sessionTracker.currentTime - 25 * zksInstance.txnLogFactory.txnLog.currentSize + 2.046265279E12 == 0
25 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.currentTime - 75 * zksInstance.zkDb.minCommittedLog + 26639900 == 0
10 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.currentTime - 30 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 26639960 == 0
10 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.currentTime - 30 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 26639930 == 0
6401000 * zksInstance.serverStats.packetsReceived - 6401 * zksInstance.sessionTracker.nextExpirationTime - 125 * zksInstance.txnLogFactory.txnLog.currentSize + 1.70509838E11 == 0
600 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextExpirationTime - 1800 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 26640600 == 0
600 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextExpirationTime - 1800 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 26638800 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.60296699568128E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.60296699568128E17 == 0
zksInstance.serverStats.packetsReceived - 2 * zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 1.441186798272512E17 == 0
zksInstance.serverStats.packetsReceived - 2 * zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 1.441186798272512E17 == 0
325 * zksInstance.serverStats.packetsSent - 25 * zksInstance.serverStats.totalLatency - 8 * zksInstance.sessionTracker.currentTime + 213119275 == 0
6 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 19 * zksInstance.sessionTracker.nextSessionId - 1.3691274583588864E18 == 0
1280200 * zksInstance.serverStats.packetsSent - 76812 * zksInstance.sessionTracker.currentTime - 25 * zksInstance.txnLogFactory.txnLog.currentSize + 2.0462665592E12 == 0
25 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.currentTime - 75 * zksInstance.zkDb.minCommittedLog + 26639925 == 0
10 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.currentTime - 30 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 26639970 == 0
10 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.currentTime - 30 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 26639940 == 0
6401000 * zksInstance.serverStats.packetsSent - 6401 * zksInstance.sessionTracker.nextExpirationTime - 125 * zksInstance.txnLogFactory.txnLog.currentSize + 1.70516239E11 == 0
600 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextExpirationTime - 1800 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 26641200 == 0
600 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextExpirationTime - 1800 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 26639400 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.60296699568128E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.60296699568128E17 == 0
zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 1.441186798272512E17 == 0
zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 1.441186798272512E17 == 0
2560400 * zksInstance.serverStats.totalLatency - 921744 * zksInstance.sessionTracker.currentTime - 775 * zksInstance.txnLogFactory.txnLog.currentSize + 2.45552140728E13 == 0
5 * zksInstance.serverStats.totalLatency - zksInstance.sessionTracker.currentTime - 195 * zksInstance.zkDb.minCommittedLog + 26639950 == 0
50 * zksInstance.serverStats.totalLatency - 49 * zksInstance.sessionTracker.currentTime - 1950 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 1305359500 == 0
50 * zksInstance.serverStats.totalLatency - 49 * zksInstance.sessionTracker.currentTime - 1950 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 1305357550 == 0
12802000 * zksInstance.serverStats.totalLatency - 76812 * zksInstance.sessionTracker.nextExpirationTime - 3875 * zksInstance.txnLogFactory.txnLog.currentSize + 2.04627168E12 == 0
zksInstance.serverStats.totalLatency - 49 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.5309076557676544E18 == 0
zksInstance.serverStats.totalLatency - 49 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.5309076557676544E18 == 0
zksInstance.serverStats.totalLatency - 39 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.8103142566313984E18 == 0
zksInstance.serverStats.totalLatency - 39 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2.8103142566313984E18 == 0
zksInstance.sessionTracker.currentTime == 26640612
zksInstance.sessionTracker.nextSessionId == 72059339957075969L || zksInstance.sessionTracker.nextSessionId == 72059339957075970L
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339957075968E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339957075968E16 == 0
6 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 19 * zksInstance.sessionTracker.nextSessionId - 1.36912745918444339E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735982830387E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735982830387E17 == 0
5 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency + 18 * zksInstance.sessionTracker.nextSessionId - 1.29706811922736742E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669978537984E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669978537984E17 == 0
5 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 18 * zksInstance.sessionTracker.nextSessionId - 1.29706811922736742E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669978537984E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669978537984E17 == 0
zksInstance.serverStats.totalLatency - 43 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.0985516181542666E18 == 0
zksInstance.serverStats.totalLatency - 43 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.0985516181542666E18 == 0
zksInstance.sessionTracker.currentTime == 26639557
zksInstance.sessionTracker.nextSessionId == 72059339887935489L || zksInstance.sessionTracker.nextSessionId == 72059339887935490L
zksInstance.serverStats.totalLatency - 45 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.2059339887935488E16 == 0
32 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339887935488E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339887935488E16 == 0
13 * zksInstance.hzxid - 3 * zksInstance.serverStats.totalLatency + 98 * zksInstance.sessionTracker.nextSessionId - 7.0618153090176778E18 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735955174195E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735955174195E17 == 0
37 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 37 * zksInstance.serverStats.packetsReceived + 74 == 0
37 * zksInstance.serverStats.count + zksInstance.serverStats.maxLatency - 37 * zksInstance.serverStats.packetsSent + 37 == 0
32 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059339887935488E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059339887935488E16 == 0
13 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.totalLatency + 98 * zksInstance.sessionTracker.nextSessionId - 7.0618153090176778E18 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823735955174195E17 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.8823735955174195E17 == 0
13 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.totalLatency + 85 * zksInstance.sessionTracker.nextSessionId - 6.1250438904745165E18 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669943967744E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669943967744E17 == 0
13 * zksInstance.serverStats.packetsSent - 3 * zksInstance.serverStats.totalLatency + 85 * zksInstance.sessionTracker.nextSessionId - 6.1250438904745165E18 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669943967744E17 == 0
zksInstance.serverStats.packetsSent - 5 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669943967744E17 == 0
zksInstance.serverStats.totalLatency - 50 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6029669943967744E18 == 0
zksInstance.serverStats.totalLatency - 50 * zksInstance.sessionTracker.nextSessionId + 5 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6029669943967744E18 == 0
zksInstance.sessionTracker.currentTime == 26356161
zksInstance.sessionTracker.nextExpirationTime == 26358000
2 * zksInstance.serverStats.maxLatency - 33 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
2 * zksInstance.hzxid - 2 * zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 7.2059321315295232E16 == 0
33 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 99 * zksInstance.sessionTracker.nextSessionId + 7.133872810214228E18 == 0
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177963945885696E17 == 0
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177963945885696E17 == 0
33 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 79 * zksInstance.sessionTracker.nextSessionId + 5.6926863839083233E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177963945885696E17 == 0
33 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 99 * zksInstance.sessionTracker.nextSessionId + 7.133872810214228E18 == 0
4 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177963945885696E17 == 0
4 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177963945885696E17 == 0
33 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency - 79 * zksInstance.sessionTracker.nextSessionId + 5.6926863839083233E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177963945885696E17 == 0
zksInstance.serverStats.maxLatency - 33 * zksInstance.serverStats.packetsReceived + 99 * zksInstance.sessionTracker.nextSessionId - 7.133872810214228E18 == 0
zksInstance.serverStats.maxLatency - 33 * zksInstance.serverStats.packetsSent + 99 * zksInstance.sessionTracker.nextSessionId - 7.133872810214228E18 == 0
33 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 79 * zksInstance.sessionTracker.nextSessionId + 5.6926863839083233E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177963945885696E17 == 0
33 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 79 * zksInstance.sessionTracker.nextSessionId + 5.6926863839083233E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177963945885696E17 == 0
zksInstance.serverStats.totalLatency - 12 * zksInstance.sessionTracker.nextSessionId - 41 * zksInstance.zkDb.minCommittedLog + 8.6471185578354278E17 == 0
daikon.Quant.pairwiseEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns)
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns)
zksInstance.sessionTracker.currentTime == 26160070
zksInstance.sessionTracker.nextExpirationTime == 26163000
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) >= 1
zksInstance.serverCnxnFactory.maxClientCnxns <= zksInstance.serverStats.minLatency
daikon.Quant.subsetOf(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
2 * zksInstance.serverStats.maxLatency - 23 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns))
2 * zksInstance.hzxid - 2 * zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 7.205930846420992E16 == 0
23 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 69 * zksInstance.sessionTracker.nextSessionId + 4.9720922840304845E18 == 0
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 2.1617792539262976E17 == 0
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.1617792539262976E17 == 0
29 * zksInstance.hzxid - 2 * zksInstance.serverStats.totalLatency - 44 * zksInstance.sessionTracker.nextSessionId + 3.1706095724252365E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617792539262976E17 == 0
23 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 69 * zksInstance.sessionTracker.nextSessionId + 4.9720922840304845E18 == 0
4 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 2.1617792539262976E17 == 0
4 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.1617792539262976E17 == 0
29 * zksInstance.serverStats.count - 2 * zksInstance.serverStats.totalLatency - 44 * zksInstance.sessionTracker.nextSessionId + 3.1706095724252365E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617792539262976E17 == 0
zksInstance.serverStats.maxLatency - 23 * zksInstance.serverStats.packetsReceived + 69 * zksInstance.sessionTracker.nextSessionId - 4.9720922840304845E18 == 0
zksInstance.serverStats.maxLatency - 23 * zksInstance.serverStats.packetsSent + 69 * zksInstance.sessionTracker.nextSessionId - 4.9720922840304845E18 == 0
29 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.serverStats.totalLatency - 44 * zksInstance.sessionTracker.nextSessionId + 3.1706095724252365E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617792539262976E17 == 0
29 * zksInstance.serverStats.packetsSent - 2 * zksInstance.serverStats.totalLatency - 44 * zksInstance.sessionTracker.nextSessionId + 3.1706095724252365E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617792539262976E17 == 0
zksInstance.serverStats.totalLatency - 7 * zksInstance.sessionTracker.nextSessionId - 29 * zksInstance.zkDb.minCommittedLog + 5.0441515924946944E17 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 32 || zksInstance.serverStats.maxLatency == 97
zksInstance.sessionTracker.currentTime == 26356387
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 1 || daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 2 || daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 3
daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) == 1 || daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) == 2 || daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) == 3
zksInstance.hzxid >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess <= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.maxClientCnxns <= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.packetsReceived > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsSent - zksInstance.zkDb.maxCommittedLog - 1 == 0
zksInstance.superSecret > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.lastZxidSeen >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.commitLogBuffer > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.zkDb.commitLogCount > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.minCommittedLog <= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) <= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
3 * zksInstance.hzxid - 3 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.2059321330040832E16 == 0
32 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 96 * zksInstance.sessionTracker.nextSessionId + 6.9176948476839199E18 == 0
3 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059321330040832E16 == 0
3 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059321330040832E16 == 0
41 * zksInstance.hzxid - 2 * zksInstance.serverStats.totalLatency - 62 * zksInstance.sessionTracker.nextSessionId + 4.4676779224625316E18 == 0
6 * zksInstance.hzxid - zksInstance.sessionTracker.nextSessionId - 6 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.2059321330040832E16 == 0
3 * zksInstance.hzxid - zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.zkDb.maxCommittedLog + 7.2059321330040832E16 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177963990122496E17 == 0
3 * zksInstance.requestsInProcess + zksInstance.sessionTracker.nextSessionId - 6 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 7.2059321330040832E16 == 0
3 * zksInstance.requestsInProcess + zksInstance.sessionTracker.nextSessionId - 6 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 7.2059321330040832E16 == 0
3 * zksInstance.requestsInProcess + zksInstance.sessionTracker.nextSessionId - 6 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 7.2059321330040832E16 == 0
3 * zksInstance.requestsInProcess + zksInstance.sessionTracker.nextSessionId - 6 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 7.2059321330040832E16 == 0
32 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 96 * zksInstance.sessionTracker.nextSessionId + 6.9176948476839199E18 == 0
23 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
3 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059321330040832E16 == 0
29 * zksInstance.serverStats.count - 29 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059321330040864E16 == 0
41 * zksInstance.serverStats.count - 2 * zksInstance.serverStats.totalLatency - 62 * zksInstance.sessionTracker.nextSessionId + 4.4676779224625316E18 == 0
3 * zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 7.2059321330040832E16 == 0
29 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId - 29 * zksInstance.zkDb.maxCommittedLog + 7.2059321330040832E16 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177963990122496E17 == 0
zksInstance.serverStats.maxLatency - 32 * zksInstance.serverStats.packetsReceived + 96 * zksInstance.sessionTracker.nextSessionId - 6.9176948476839199E18 == 0
zksInstance.serverStats.maxLatency - 32 * zksInstance.serverStats.packetsSent + 96 * zksInstance.sessionTracker.nextSessionId - 6.9176948476839199E18 == 0
zksInstance.serverStats.maxLatency + 96 * zksInstance.sessionTracker.nextSessionId - 32 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 6.9176948476839199E18 == 0
zksInstance.serverStats.maxLatency + 96 * zksInstance.sessionTracker.nextSessionId - 32 * zksInstance.zkDb.maxCommittedLog - 6.9176948476839199E18 == 0
6 * zksInstance.serverStats.maxLatency - 65 * zksInstance.sessionTracker.nextSessionId - 192 * zksInstance.zkDb.minCommittedLog + 4.6838558864526541E18 == 0
zksInstance.serverStats.minLatency + 23 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.minLatency + 23 * zksInstance.zkDb.maxCommittedLog + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
3 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059321330040832E16 == 0
41 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.serverStats.totalLatency - 62 * zksInstance.sessionTracker.nextSessionId + 4.4676779224625316E18 == 0
3 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.2059321330040832E16 == 0
3 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.zkDb.maxCommittedLog + 7.2059321330040832E16 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177963990122496E17 == 0
41 * zksInstance.serverStats.packetsSent - 2 * zksInstance.serverStats.totalLatency - 62 * zksInstance.sessionTracker.nextSessionId + 4.4676779224625316E18 == 0
3 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 7.2059321330040832E16 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177963990122496E17 == 0
2 * zksInstance.serverStats.totalLatency + 62 * zksInstance.sessionTracker.nextSessionId - 41 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 4.4676779224625316E18 == 0
2 * zksInstance.serverStats.totalLatency + 62 * zksInstance.sessionTracker.nextSessionId - 41 * zksInstance.zkDb.maxCommittedLog - 4.4676779224625316E18 == 0
zksInstance.serverStats.totalLatency - 10 * zksInstance.sessionTracker.nextSessionId - 41 * zksInstance.zkDb.minCommittedLog + 7.2059321330040832E17 == 0
zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 3 * zksInstance.zkDb.maxCommittedLog - 7.2059321330040832E16 == 0
3 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen + zksInstance.zkDb.minCommittedLog - 2.16177963990122496E17 == 0
3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.maxCommittedLog + zksInstance.zkDb.minCommittedLog - 2.16177963990122496E17 == 0
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
zksInstance.sessionTracker.currentTime == 26160217
daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 1 || daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 2 || daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 3
zksInstance.hzxid >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.requestsInProcess >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.maxClientCnxns <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.subsetOf(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.count >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.packetsSent >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.superSecret > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.lastZxidSeen >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.commitLogBuffer > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.zkDb.commitLogCount > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.dataTree.lastProcessedZxid >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.dataTree.lastProcessedZxid >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.minCommittedLog <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) % daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) == 0
daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
3 * zksInstance.hzxid - 3 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.2059308473843712E16 == 0
34 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 34 * zksInstance.sessionTracker.nextSessionId + 2.4500164881106862E18 == 0
28 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
3 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059308473843712E16 == 0
60 * zksInstance.hzxid - 3 * zksInstance.serverStats.totalLatency - 37 * zksInstance.sessionTracker.nextSessionId + 2.6661944135322173E18 == 0
3 * zksInstance.hzxid - zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.2059308473843712E16 == 0
3 * zksInstance.hzxid - zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.zkDb.dataTree.lastProcessedZxid + 7.2059308473843712E16 == 0
3 * zksInstance.hzxid - zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.zkDb.maxCommittedLog + 7.2059308473843712E16 == 0
3 * zksInstance.hzxid - 2 * zksInstance.sessionTracker.nextSessionId - 6 * zksInstance.zkDb.minCommittedLog + 1.44118616947687424E17 == 0
zksInstance.requestsInProcess + 2 * zksInstance.sessionTracker.nextSessionId - 8 * zksInstance.zkDb.minCommittedLog - 1.44118616947687424E17 == 0
7 * zksInstance.requestsInProcess + 2 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 1.44118616947687424E17 == 0
7 * zksInstance.requestsInProcess + 2 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 1.44118616947687424E17 == 0
7 * zksInstance.requestsInProcess + 2 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.44118616947687424E17 == 0
7 * zksInstance.requestsInProcess + 2 * zksInstance.sessionTracker.nextSessionId - 10 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.44118616947687424E17 == 0
34 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 34 * zksInstance.sessionTracker.nextSessionId + 2.4500164881106862E18 == 0
28 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
3 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.packetsReceived + 2 * zksInstance.sessionTracker.nextSessionId - 1.44118616947687424E17 == 0
10 * zksInstance.serverStats.count - 11 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059308473843696E16 == 0
60 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.totalLatency - 34 * zksInstance.sessionTracker.nextSessionId + 2.4500164881106862E18 == 0
3 * zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 7.2059308473843712E16 == 0
8 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId - 7 * zksInstance.zkDb.dataTree.lastProcessedZxid + 7.2059308473843712E16 == 0
10 * zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 11 * zksInstance.zkDb.maxCommittedLog - 7.2059308473843712E16 == 0
3 * zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId - 6 * zksInstance.zkDb.minCommittedLog + 1.44118616947687424E17 == 0
zksInstance.serverStats.maxLatency - 34 * zksInstance.serverStats.packetsSent + 34 * zksInstance.sessionTracker.nextSessionId - 2.4500164881106862E18 == 0
zksInstance.serverStats.maxLatency + 34 * zksInstance.sessionTracker.nextSessionId - 34 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 2.4500164881106862E18 == 0
zksInstance.serverStats.maxLatency + 34 * zksInstance.sessionTracker.nextSessionId - 34 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2.4500164881106862E18 == 0
zksInstance.serverStats.maxLatency + 34 * zksInstance.sessionTracker.nextSessionId - 34 * zksInstance.zkDb.maxCommittedLog - 2.4500164881106862E18 == 0
zksInstance.serverStats.minLatency + 28 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.minLatency + 28 * zksInstance.zkDb.dataTree.lastProcessedZxid + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.minLatency + 28 * zksInstance.zkDb.maxCommittedLog + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
3 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118616947687424E17 == 0
3 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.zkDb.dataTree.lastProcessedZxid + 1.44118616947687424E17 == 0
3 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.zkDb.maxCommittedLog + 1.44118616947687424E17 == 0
3 * zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.zkDb.minCommittedLog + 3.6029654236921856E17 == 0
60 * zksInstance.serverStats.packetsSent - 3 * zksInstance.serverStats.totalLatency - 34 * zksInstance.sessionTracker.nextSessionId + 2.4500164881106862E18 == 0
3 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 7.2059308473843712E16 == 0
8 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId - 7 * zksInstance.zkDb.dataTree.lastProcessedZxid + 7.2059308473843696E16 == 0
25 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 26 * zksInstance.zkDb.maxCommittedLog - 7.2059308473843728E16 == 0
3 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId - 6 * zksInstance.zkDb.minCommittedLog + 1.44118616947687424E17 == 0
3 * zksInstance.serverStats.totalLatency + 37 * zksInstance.sessionTracker.nextSessionId - 60 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 2.6661944135322173E18 == 0
3 * zksInstance.serverStats.totalLatency + 34 * zksInstance.sessionTracker.nextSessionId - 60 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2.4500164881106862E18 == 0
3 * zksInstance.serverStats.totalLatency + 34 * zksInstance.sessionTracker.nextSessionId - 60 * zksInstance.zkDb.maxCommittedLog - 2.4500164881106862E18 == 0
zksInstance.serverStats.totalLatency - 2 * zksInstance.sessionTracker.nextSessionId - 40 * zksInstance.zkDb.minCommittedLog + 1.44118616947687424E17 == 0
zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 3 * zksInstance.zkDb.dataTree.lastProcessedZxid - 7.2059308473843712E16 == 0
zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 3 * zksInstance.zkDb.maxCommittedLog - 7.2059308473843712E16 == 0
2 * zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 6 * zksInstance.zkDb.minCommittedLog - 1.44118616947687424E17 == 0
zksInstance.sessionTracker.nextSessionId + 7 * zksInstance.zkDb.dataTree.lastProcessedZxid - 8 * zksInstance.zkDb.maxCommittedLog - 7.2059308473843712E16 == 0
2 * zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.zkDb.dataTree.lastProcessedZxid + 6 * zksInstance.zkDb.minCommittedLog - 1.44118616947687424E17 == 0
2 * zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.zkDb.maxCommittedLog + 6 * zksInstance.zkDb.minCommittedLog - 1.44118616947687424E17 == 0
zksInstance.sessionTracker.currentTime == 26360485 || zksInstance.sessionTracker.currentTime == 26361000
zksInstance.sessionTracker.nextExpirationTime == 26361000 || zksInstance.sessionTracker.nextExpirationTime == 26364000
zksInstance.sessionTracker.nextSessionId == 72059321598607361L || zksInstance.sessionTracker.nextSessionId == 72059321598607362L || zksInstance.sessionTracker.nextSessionId == 72059321598607363L
zksInstance.serverStats.minLatency >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
7 * zksInstance.hzxid - 6 * zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 2.1617796479582208E17 == 0
33 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 99 * zksInstance.sessionTracker.nextSessionId + 7.1338728382621286E18 == 0
27 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
7 * zksInstance.hzxid - 6 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 2.1617796479582208E17 == 0
7 * zksInstance.hzxid - 6 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.1617796479582208E17 == 0
33 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 84 * zksInstance.sessionTracker.nextSessionId + 6.0529830142830182E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617796479582208E17 == 0
33 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 99 * zksInstance.sessionTracker.nextSessionId + 7.1338728382621286E18 == 0
27 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
12 * zksInstance.serverStats.count - 11 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.1617796479582208E17 == 0
33 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency - 84 * zksInstance.sessionTracker.nextSessionId + 6.0529830142830182E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617796479582208E17 == 0
zksInstance.serverStats.maxLatency - 33 * zksInstance.serverStats.packetsReceived + 99 * zksInstance.sessionTracker.nextSessionId - 7.1338728382621286E18 == 0
zksInstance.serverStats.maxLatency - 33 * zksInstance.serverStats.packetsSent + 99 * zksInstance.sessionTracker.nextSessionId - 7.1338728382621286E18 == 0
12 * zksInstance.serverStats.packetsReceived - 11 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.1617796479582208E17 == 0
33 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 84 * zksInstance.sessionTracker.nextSessionId + 6.0529830142830182E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617796479582208E17 == 0
33 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 84 * zksInstance.sessionTracker.nextSessionId + 6.0529830142830182E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617796479582208E17 == 0
zksInstance.serverStats.totalLatency - 9 * zksInstance.sessionTracker.nextSessionId - 39 * zksInstance.zkDb.minCommittedLog + 6.4853389438746624E17 == 0
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
zksInstance.sessionTracker.currentTime == 26164109 || zksInstance.sessionTracker.currentTime == 26166000
zksInstance.sessionTracker.nextExpirationTime == 26166000 || zksInstance.sessionTracker.nextExpirationTime == 26169000
zksInstance.sessionTracker.nextSessionId == 72059308728909825L || zksInstance.sessionTracker.nextSessionId == 72059308728909826L || zksInstance.sessionTracker.nextSessionId == 72059308728909827L
2 * zksInstance.serverStats.maxLatency - 25 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.serverStats.totalLatency - 39 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.sessionTracker.nextExpirationTime % daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 0
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns))
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 0
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
7 * zksInstance.hzxid - 6 * zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177926186729472E17 == 0
25 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 75 * zksInstance.sessionTracker.nextSessionId + 5.4044481546682368E18 == 0
7 * zksInstance.hzxid - 6 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177926186729472E17 == 0
7 * zksInstance.hzxid - 6 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177926186729472E17 == 0
17 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 26 * zksInstance.sessionTracker.nextSessionId + 1.87354202695165542E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177926186729472E17 == 0
25 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 75 * zksInstance.sessionTracker.nextSessionId + 5.4044481546682368E18 == 0
12 * zksInstance.serverStats.count - 11 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177926186729472E17 == 0
17 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency - 26 * zksInstance.sessionTracker.nextSessionId + 1.87354202695165542E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177926186729472E17 == 0
zksInstance.serverStats.maxLatency - 25 * zksInstance.serverStats.packetsReceived + 75 * zksInstance.sessionTracker.nextSessionId - 5.4044481546682368E18 == 0
zksInstance.serverStats.maxLatency - 25 * zksInstance.serverStats.packetsSent + 75 * zksInstance.sessionTracker.nextSessionId - 5.4044481546682368E18 == 0
12 * zksInstance.serverStats.packetsReceived - 11 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177926186729472E17 == 0
17 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 26 * zksInstance.sessionTracker.nextSessionId + 1.87354202695165542E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177926186729472E17 == 0
17 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 26 * zksInstance.sessionTracker.nextSessionId + 1.87354202695165542E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177926186729472E17 == 0
zksInstance.serverStats.totalLatency - 8 * zksInstance.sessionTracker.nextSessionId - 34 * zksInstance.zkDb.minCommittedLog + 5.7647446983127859E17 == 0
zksInstance.sessionTracker.currentTime == 26363630 || zksInstance.sessionTracker.currentTime == 26364000
zksInstance.sessionTracker.nextExpirationTime == 26364000 || zksInstance.sessionTracker.nextExpirationTime == 26367000
zksInstance.sessionTracker.nextSessionId == 72059321804718081L || zksInstance.sessionTracker.nextSessionId == 72059321804718082L || zksInstance.sessionTracker.nextSessionId == 72059321804718083L
7 * zksInstance.hzxid - 6 * zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 2.1617796541415424E17 == 0
33 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 99 * zksInstance.sessionTracker.nextSessionId + 7.1338728586670899E18 == 0
7 * zksInstance.hzxid - 6 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 2.1617796541415424E17 == 0
7 * zksInstance.hzxid - 6 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.1617796541415424E17 == 0
43 * zksInstance.hzxid - 2 * zksInstance.serverStats.totalLatency - 68 * zksInstance.sessionTracker.nextSessionId + 4.9000338827208294E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617796541415424E17 == 0
33 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 99 * zksInstance.sessionTracker.nextSessionId + 7.1338728586670899E18 == 0
12 * zksInstance.serverStats.count - 11 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.1617796541415424E17 == 0
43 * zksInstance.serverStats.count - 2 * zksInstance.serverStats.totalLatency - 68 * zksInstance.sessionTracker.nextSessionId + 4.9000338827208294E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617796541415424E17 == 0
zksInstance.serverStats.maxLatency - 33 * zksInstance.serverStats.packetsReceived + 99 * zksInstance.sessionTracker.nextSessionId - 7.1338728586670899E18 == 0
zksInstance.serverStats.maxLatency - 33 * zksInstance.serverStats.packetsSent + 99 * zksInstance.sessionTracker.nextSessionId - 7.1338728586670899E18 == 0
12 * zksInstance.serverStats.packetsReceived - 11 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.1617796541415424E17 == 0
43 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.serverStats.totalLatency - 68 * zksInstance.sessionTracker.nextSessionId + 4.9000338827208294E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617796541415424E17 == 0
43 * zksInstance.serverStats.packetsSent - 2 * zksInstance.serverStats.totalLatency - 68 * zksInstance.sessionTracker.nextSessionId + 4.9000338827208294E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617796541415424E17 == 0
zksInstance.serverStats.totalLatency - 9 * zksInstance.sessionTracker.nextSessionId - 43 * zksInstance.zkDb.minCommittedLog + 6.4853389624246272E17 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 41
zksInstance.sessionTracker.currentTime == 26167346 || zksInstance.sessionTracker.currentTime == 26169000
zksInstance.sessionTracker.nextExpirationTime == 26169000 || zksInstance.sessionTracker.nextExpirationTime == 26172000
zksInstance.sessionTracker.nextSessionId == 72059308941049857L || zksInstance.sessionTracker.nextSessionId == 72059308941049858L || zksInstance.sessionTracker.nextSessionId == 72059308941049859L
2 * zksInstance.serverStats.maxLatency - 41 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.sessionTracker.currentTime % daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 0
7 * zksInstance.hzxid - 6 * zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177926823149568E17 == 0
41 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 123 * zksInstance.sessionTracker.nextSessionId + 8.8632949997491323E18 == 0
35 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
7 * zksInstance.hzxid - 6 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177926823149568E17 == 0
7 * zksInstance.hzxid - 6 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177926823149568E17 == 0
41 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 109 * zksInstance.sessionTracker.nextSessionId + 7.8544646745744343E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177926823149568E17 == 0
41 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 123 * zksInstance.sessionTracker.nextSessionId + 8.8632949997491323E18 == 0
35 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
12 * zksInstance.serverStats.count - 11 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177926823149568E17 == 0
41 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency - 109 * zksInstance.sessionTracker.nextSessionId + 7.8544646745744343E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177926823149568E17 == 0
zksInstance.serverStats.maxLatency - 41 * zksInstance.serverStats.packetsReceived + 123 * zksInstance.sessionTracker.nextSessionId - 8.8632949997491323E18 == 0
zksInstance.serverStats.maxLatency - 41 * zksInstance.serverStats.packetsSent + 123 * zksInstance.sessionTracker.nextSessionId - 8.8632949997491323E18 == 0
12 * zksInstance.serverStats.packetsReceived - 11 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177926823149568E17 == 0
41 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 109 * zksInstance.sessionTracker.nextSessionId + 7.8544646745744343E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177926823149568E17 == 0
41 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 109 * zksInstance.sessionTracker.nextSessionId + 7.8544646745744343E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177926823149568E17 == 0
zksInstance.serverStats.totalLatency - 8 * zksInstance.sessionTracker.nextSessionId - 47 * zksInstance.zkDb.minCommittedLog + 5.7647447152839885E17 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 42 || zksInstance.serverStats.maxLatency == 88
zksInstance.sessionTracker.currentTime == 26357812 || zksInstance.sessionTracker.currentTime == 26358000
zksInstance.sessionTracker.nextExpirationTime == 26358000 || zksInstance.sessionTracker.nextExpirationTime == 26361000
zksInstance.sessionTracker.nextSessionId == 72059321423495169L || zksInstance.sessionTracker.nextSessionId == 72059321423495170L || zksInstance.sessionTracker.nextSessionId == 72059321423495171L
zksInstance.serverStats.maxLatency - 21 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
7 * zksInstance.hzxid - 6 * zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177964270485504E17 == 0
42 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 126 * zksInstance.sessionTracker.nextSessionId + 9.0794744993603912E18 == 0
7 * zksInstance.hzxid - 6 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177964270485504E17 == 0
7 * zksInstance.hzxid - 6 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177964270485504E17 == 0
26 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 44 * zksInstance.sessionTracker.nextSessionId + 3.1706101426337874E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177964270485504E17 == 0
42 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 126 * zksInstance.sessionTracker.nextSessionId + 9.0794744993603912E18 == 0
12 * zksInstance.serverStats.count - 11 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177964270485504E17 == 0
26 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency - 44 * zksInstance.sessionTracker.nextSessionId + 3.1706101426337874E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177964270485504E17 == 0
zksInstance.serverStats.maxLatency - 42 * zksInstance.serverStats.packetsReceived + 126 * zksInstance.sessionTracker.nextSessionId - 9.0794744993603912E18 == 0
zksInstance.serverStats.maxLatency - 42 * zksInstance.serverStats.packetsSent + 126 * zksInstance.sessionTracker.nextSessionId - 9.0794744993603912E18 == 0
12 * zksInstance.serverStats.packetsReceived - 11 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177964270485504E17 == 0
26 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 44 * zksInstance.sessionTracker.nextSessionId + 3.1706101426337874E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177964270485504E17 == 0
26 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 44 * zksInstance.sessionTracker.nextSessionId + 3.1706101426337874E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177964270485504E17 == 0
zksInstance.serverStats.totalLatency - 8 * zksInstance.sessionTracker.nextSessionId - 52 * zksInstance.zkDb.minCommittedLog + 5.7647457138796134E17 == 0
zksInstance.sessionTracker.currentTime == 26161569 || zksInstance.sessionTracker.currentTime == 26163000
zksInstance.sessionTracker.nextExpirationTime == 26163000 || zksInstance.sessionTracker.nextExpirationTime == 26166000
zksInstance.sessionTracker.nextSessionId == 72059308562448385L || zksInstance.sessionTracker.nextSessionId == 72059308562448386L || zksInstance.sessionTracker.nextSessionId == 72059308562448387L
zksInstance.serverStats.maxLatency - 16 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.sessionTracker.nextSessionId % daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 0
7 * zksInstance.hzxid - 6 * zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177925687345152E17 == 0
32 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 96 * zksInstance.sessionTracker.nextSessionId + 6.9176936219950449E18 == 0
7 * zksInstance.hzxid - 6 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177925687345152E17 == 0
7 * zksInstance.hzxid - 6 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177925687345152E17 == 0
32 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 84 * zksInstance.sessionTracker.nextSessionId + 6.0529819192456643E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177925687345152E17 == 0
32 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 96 * zksInstance.sessionTracker.nextSessionId + 6.9176936219950449E18 == 0
12 * zksInstance.serverStats.count - 11 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177925687345152E17 == 0
32 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency - 84 * zksInstance.sessionTracker.nextSessionId + 6.0529819192456643E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177925687345152E17 == 0
zksInstance.serverStats.maxLatency - 32 * zksInstance.serverStats.packetsReceived + 96 * zksInstance.sessionTracker.nextSessionId - 6.9176936219950449E18 == 0
zksInstance.serverStats.maxLatency - 32 * zksInstance.serverStats.packetsSent + 96 * zksInstance.sessionTracker.nextSessionId - 6.9176936219950449E18 == 0
12 * zksInstance.serverStats.packetsReceived - 11 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177925687345152E17 == 0
32 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 84 * zksInstance.sessionTracker.nextSessionId + 6.0529819192456643E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177925687345152E17 == 0
32 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 84 * zksInstance.sessionTracker.nextSessionId + 6.0529819192456643E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177925687345152E17 == 0
zksInstance.serverStats.totalLatency - 8 * zksInstance.sessionTracker.nextSessionId - 36 * zksInstance.zkDb.minCommittedLog + 5.7647446849958707E17 == 0
zksInstance.sessionTracker.currentTime == 26366337
zksInstance.sessionTracker.nextExpirationTime == 26367000
zksInstance.sessionTracker.nextSessionId == 72059321982124033L || zksInstance.sessionTracker.nextSessionId == 72059321982124034L
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
25 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 75 * zksInstance.sessionTracker.nextSessionId + 5.4044491486593024E18 == 0
16 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 24 * zksInstance.sessionTracker.nextSessionId + 1.72942372757097677E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177965946372096E17 == 0
zksInstance.serverStats.maxLatency - 25 * zksInstance.serverStats.packetsReceived + 75 * zksInstance.sessionTracker.nextSessionId - 5.4044491486593024E18 == 0
zksInstance.serverStats.maxLatency - 25 * zksInstance.serverStats.packetsSent + 75 * zksInstance.sessionTracker.nextSessionId - 5.4044491486593024E18 == 0
16 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 24 * zksInstance.sessionTracker.nextSessionId + 1.72942372757097677E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177965946372096E17 == 0
16 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 24 * zksInstance.sessionTracker.nextSessionId + 1.72942372757097677E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177965946372096E17 == 0
zksInstance.serverStats.totalLatency - 8 * zksInstance.sessionTracker.nextSessionId - 32 * zksInstance.zkDb.minCommittedLog + 5.7647457585699226E17 == 0
zksInstance.serverStats.minLatency == 4 || zksInstance.serverStats.minLatency == 24 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26170132
zksInstance.sessionTracker.nextExpirationTime == 26172000
zksInstance.sessionTracker.nextSessionId == 72059309123633153L || zksInstance.sessionTracker.nextSessionId == 72059309123633154L
24 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 72 * zksInstance.sessionTracker.nextSessionId + 5.1882702569015869E18 == 0
24 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 59 * zksInstance.sessionTracker.nextSessionId + 4.251499238294356E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177927370899456E17 == 0
zksInstance.serverStats.maxLatency - 24 * zksInstance.serverStats.packetsReceived + 72 * zksInstance.sessionTracker.nextSessionId - 5.1882702569015869E18 == 0
zksInstance.serverStats.maxLatency - 24 * zksInstance.serverStats.packetsSent + 72 * zksInstance.sessionTracker.nextSessionId - 5.1882702569015869E18 == 0
24 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 59 * zksInstance.sessionTracker.nextSessionId + 4.251499238294356E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177927370899456E17 == 0
24 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 59 * zksInstance.sessionTracker.nextSessionId + 4.251499238294356E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177927370899456E17 == 0
zksInstance.serverStats.totalLatency - 9 * zksInstance.sessionTracker.nextSessionId - 28 * zksInstance.zkDb.minCommittedLog + 6.4853378211269837E17 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 29 || zksInstance.serverStats.maxLatency == 33
zksInstance.sessionTracker.currentTime == 26366621
zksInstance.sessionTracker.nextSessionId == 72059322000736257L || zksInstance.sessionTracker.nextSessionId == 72059322000736258L
zksInstance.serverStats.maxLatency - 33 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
29 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 87 * zksInstance.sessionTracker.nextSessionId + 6.2691610140640543E18 == 0
18 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 29 * zksInstance.sessionTracker.nextSessionId + 2.08972033802135142E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177966002208768E17 == 0
zksInstance.serverStats.maxLatency - 29 * zksInstance.serverStats.packetsReceived + 87 * zksInstance.sessionTracker.nextSessionId - 6.2691610140640543E18 == 0
zksInstance.serverStats.maxLatency - 29 * zksInstance.serverStats.packetsSent + 87 * zksInstance.sessionTracker.nextSessionId - 6.2691610140640543E18 == 0
18 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 29 * zksInstance.sessionTracker.nextSessionId + 2.08972033802135142E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177966002208768E17 == 0
18 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 29 * zksInstance.sessionTracker.nextSessionId + 2.08972033802135142E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177966002208768E17 == 0
zksInstance.serverStats.totalLatency - 7 * zksInstance.sessionTracker.nextSessionId - 36 * zksInstance.zkDb.minCommittedLog + 5.0441525400515379E17 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 21 || zksInstance.serverStats.maxLatency == 34
zksInstance.serverStats.minLatency == 3 || zksInstance.serverStats.minLatency == 21 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26170455
zksInstance.sessionTracker.nextSessionId == 72059309144866817L || zksInstance.sessionTracker.nextSessionId == 72059309144866818L
zksInstance.serverStats.maxLatency - 34 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.serverStats.totalLatency - 29 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
21 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 63 * zksInstance.sessionTracker.nextSessionId + 4.5397364761266094E18 == 0
21 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 50 * zksInstance.sessionTracker.nextSessionId + 3.6029654572433408E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177927434600448E17 == 0
zksInstance.serverStats.maxLatency - 21 * zksInstance.serverStats.packetsReceived + 63 * zksInstance.sessionTracker.nextSessionId - 4.5397364761266094E18 == 0
zksInstance.serverStats.maxLatency - 21 * zksInstance.serverStats.packetsSent + 63 * zksInstance.sessionTracker.nextSessionId - 4.5397364761266094E18 == 0
21 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 50 * zksInstance.sessionTracker.nextSessionId + 3.6029654572433408E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177927434600448E17 == 0
21 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 50 * zksInstance.sessionTracker.nextSessionId + 3.6029654572433408E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177927434600448E17 == 0
zksInstance.serverStats.totalLatency - 10 * zksInstance.sessionTracker.nextSessionId - 24 * zksInstance.zkDb.minCommittedLog + 7.2059309144866816E17 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 53 || zksInstance.serverStats.maxLatency == 62
zksInstance.sessionTracker.currentTime == 26366826 || zksInstance.sessionTracker.currentTime == 26367000 || zksInstance.sessionTracker.currentTime == 26370000
zksInstance.sessionTracker.nextExpirationTime == 26367000 || zksInstance.sessionTracker.nextExpirationTime == 26370000 || zksInstance.sessionTracker.nextExpirationTime == 26373000
zksInstance.sessionTracker.nextSessionId == 72059322014236673L || zksInstance.sessionTracker.nextSessionId == 72059322014236674L
zksInstance.serverStats.maxLatency - 62 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
2 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - -2147483648 == 0
zksInstance.sessionTracker.nextSessionId % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 0
102 * zksInstance.hzxid - 101 * zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177966042710016E17 == 0
102 * zksInstance.hzxid - 101 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177966042710208E17 == 0
102 * zksInstance.hzxid - 101 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177966042710112E17 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177966042710016E17 == 0
303 * zksInstance.serverStats.count - 302 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177966042710336E17 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177966042710016E17 == 0
zksInstance.serverStats.maxLatency + 106 * zksInstance.sessionTracker.nextSessionId - 53 * zksInstance.zkDb.minCommittedLog - 7.6382881335090872E18 == 0
303 * zksInstance.serverStats.packetsReceived - 302 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177966042709728E17 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177966042710016E17 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177966042710016E17 == 0
zksInstance.serverStats.totalLatency - 8 * zksInstance.sessionTracker.nextSessionId - 58 * zksInstance.zkDb.minCommittedLog + 5.7647457611389338E17 == 0
zksInstance.serverStats.totalLatency - 62 * zksInstance.sessionTracker.nextSessionId - 92 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 4.4676779648826737E18 == 0
zksInstance.serverStats.totalLatency - 62 * zksInstance.sessionTracker.nextSessionId - 92 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 4.4676779648826737E18 == 0
zksInstance.sessionTracker.currentTime == 26170667 || zksInstance.sessionTracker.currentTime == 26172000 || zksInstance.sessionTracker.currentTime == 26175000
zksInstance.sessionTracker.nextExpirationTime == 26172000 || zksInstance.sessionTracker.nextExpirationTime == 26175000 || zksInstance.sessionTracker.nextExpirationTime == 26178000
zksInstance.sessionTracker.nextSessionId == 72059309158694913L || zksInstance.sessionTracker.nextSessionId == 72059309158694914L
zksInstance.serverStats.maxLatency - 35 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.serverStats.minLatency % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 0
102 * zksInstance.hzxid - 101 * zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177927476084736E17 == 0
29 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 87 * zksInstance.sessionTracker.nextSessionId + 6.2691598968064573E18 == 0
102 * zksInstance.hzxid - 101 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177927476084928E17 == 0
102 * zksInstance.hzxid - 101 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177927476084832E17 == 0
29 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 75 * zksInstance.sessionTracker.nextSessionId + 5.4044481869021184E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177927476084736E17 == 0
29 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 87 * zksInstance.sessionTracker.nextSessionId + 6.2691598968064573E18 == 0
303 * zksInstance.serverStats.count - 302 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177927476085056E17 == 0
29 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency - 75 * zksInstance.sessionTracker.nextSessionId + 5.4044481869021184E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177927476084736E17 == 0
zksInstance.serverStats.maxLatency - 29 * zksInstance.serverStats.packetsReceived + 87 * zksInstance.sessionTracker.nextSessionId - 6.2691598968064573E18 == 0
zksInstance.serverStats.maxLatency - 29 * zksInstance.serverStats.packetsSent + 87 * zksInstance.sessionTracker.nextSessionId - 6.2691598968064573E18 == 0
303 * zksInstance.serverStats.packetsReceived - 302 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177927476084448E17 == 0
29 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 75 * zksInstance.sessionTracker.nextSessionId + 5.4044481869021184E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177927476084736E17 == 0
29 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 75 * zksInstance.sessionTracker.nextSessionId + 5.4044481869021184E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177927476084736E17 == 0
zksInstance.serverStats.totalLatency - 8 * zksInstance.sessionTracker.nextSessionId - 33 * zksInstance.zkDb.minCommittedLog + 5.764744732695593E17 == 0
zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 7.2059309158694912E16 == 0
zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 7.2059309158694912E16 == 0
zksInstance.serverStats.minLatency == 5 || zksInstance.serverStats.minLatency == 24 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26366172
zksInstance.sessionTracker.nextSessionId == 72059321971310593L || zksInstance.sessionTracker.nextSessionId == 72059321971310594L
zksInstance.sessionTracker.currentTime == 26169933
zksInstance.sessionTracker.nextSessionId == 72059309110591489L || zksInstance.sessionTracker.nextSessionId == 72059309110591490L
zksInstance.serverStats.totalLatency - 50 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.firstProcessor.skipACL == zksInstance.txnLogFactory.snapLog.close
zksInstance.firstProcessor.skipACL == false
zksInstance.sessionTracker.currentTime == 26366438
zksInstance.sessionTracker.nextSessionId == 72059321988808705L || zksInstance.sessionTracker.nextSessionId == 72059321988808706L
27 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 81 * zksInstance.sessionTracker.nextSessionId + 5.836805081093505E18 == 0
18 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 28 * zksInstance.sessionTracker.nextSessionId + 2.01766101568664371E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177965966426112E17 == 0
zksInstance.serverStats.maxLatency - 27 * zksInstance.serverStats.packetsReceived + 81 * zksInstance.sessionTracker.nextSessionId - 5.836805081093505E18 == 0
zksInstance.serverStats.maxLatency - 27 * zksInstance.serverStats.packetsSent + 81 * zksInstance.sessionTracker.nextSessionId - 5.836805081093505E18 == 0
18 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 28 * zksInstance.sessionTracker.nextSessionId + 2.01766101568664371E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177965966426112E17 == 0
18 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 28 * zksInstance.sessionTracker.nextSessionId + 2.01766101568664371E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177965966426112E17 == 0
zksInstance.serverStats.totalLatency - 8 * zksInstance.sessionTracker.nextSessionId - 36 * zksInstance.zkDb.minCommittedLog + 5.7647457591046963E17 == 0
zksInstance.firstProcessor.skipACL == zksInstance.serverCnxnFactory.killed
zksInstance.sessionTracker.currentTime == 26170246
zksInstance.sessionTracker.nextSessionId == 72059309130973185L || zksInstance.sessionTracker.nextSessionId == 72059309130973186L
zksInstance.serverStats.totalLatency - 46 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
34 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 102 * zksInstance.sessionTracker.nextSessionId + 7.3500495313592648E18 == 0
34 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 86 * zksInstance.sessionTracker.nextSessionId + 6.1971005852636938E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177927392919552E17 == 0
zksInstance.serverStats.maxLatency - 34 * zksInstance.serverStats.packetsReceived + 102 * zksInstance.sessionTracker.nextSessionId - 7.3500495313592648E18 == 0
zksInstance.serverStats.maxLatency - 34 * zksInstance.serverStats.packetsSent + 102 * zksInstance.sessionTracker.nextSessionId - 7.3500495313592648E18 == 0
34 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 86 * zksInstance.sessionTracker.nextSessionId + 6.1971005852636938E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177927392919552E17 == 0
34 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 86 * zksInstance.sessionTracker.nextSessionId + 6.1971005852636938E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177927392919552E17 == 0
zksInstance.serverStats.totalLatency - 9 * zksInstance.sessionTracker.nextSessionId - 41 * zksInstance.zkDb.minCommittedLog + 6.4853378217875866E17 == 0
zksInstance.serverStats.minLatency == 17 || zksInstance.serverStats.minLatency == 56 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 56 || zksInstance.serverStats.totalLatency == 73
zksInstance.sessionTracker.currentTime == 26355988
zksInstance.sessionTracker.nextSessionId == 72059321303891969L
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 18
zksInstance.serverStats.minLatency == 7 || zksInstance.serverStats.minLatency == 18 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 18 || zksInstance.serverStats.totalLatency == 25
zksInstance.sessionTracker.currentTime == 26160012
zksInstance.sessionTracker.nextSessionId == 72059308460408833L
zksInstance.sessionTracker.currentTime == 26360323
zksInstance.sessionTracker.nextExpirationTime == 26361000
zksInstance.sessionTracker.nextSessionId == 72059321587990529L || zksInstance.sessionTracker.nextSessionId == 72059321587990530L
5 * zksInstance.hzxid - 4 * zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177964763971584E17 == 0
34 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 102 * zksInstance.sessionTracker.nextSessionId + 7.3500508019750339E18 == 0
5 * zksInstance.hzxid - 4 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177964763971584E17 == 0
5 * zksInstance.hzxid - 4 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177964763971584E17 == 0
34 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 91 * zksInstance.sessionTracker.nextSessionId + 6.557398264507138E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177964763971584E17 == 0
34 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 102 * zksInstance.sessionTracker.nextSessionId + 7.3500508019750339E18 == 0
34 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency - 91 * zksInstance.sessionTracker.nextSessionId + 6.557398264507138E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177964763971584E17 == 0
zksInstance.serverStats.maxLatency - 34 * zksInstance.serverStats.packetsReceived + 102 * zksInstance.sessionTracker.nextSessionId - 7.3500508019750339E18 == 0
zksInstance.serverStats.maxLatency - 34 * zksInstance.serverStats.packetsSent + 102 * zksInstance.sessionTracker.nextSessionId - 7.3500508019750339E18 == 0
34 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 91 * zksInstance.sessionTracker.nextSessionId + 6.557398264507138E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177964763971584E17 == 0
34 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 91 * zksInstance.sessionTracker.nextSessionId + 6.557398264507138E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177964763971584E17 == 0
zksInstance.serverStats.totalLatency - 7 * zksInstance.sessionTracker.nextSessionId - 38 * zksInstance.zkDb.minCommittedLog + 5.044152511159337E17 == 0
zksInstance.sessionTracker.currentTime == 26163985
zksInstance.sessionTracker.nextExpirationTime == 26166000
zksInstance.sessionTracker.nextSessionId == 72059308720783361L || zksInstance.sessionTracker.nextSessionId == 72059308720783362L
5 * zksInstance.hzxid - 4 * zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 2.1617792616235008E17 == 0
28 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 84 * zksInstance.sessionTracker.nextSessionId + 6.0529819325458022E18 == 0
5 * zksInstance.hzxid - 4 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 2.1617792616235008E17 == 0
5 * zksInstance.hzxid - 4 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.1617792616235008E17 == 0
18 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 28 * zksInstance.sessionTracker.nextSessionId + 2.01766064418193408E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617792616235008E17 == 0
28 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 84 * zksInstance.sessionTracker.nextSessionId + 6.0529819325458022E18 == 0
18 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency - 28 * zksInstance.sessionTracker.nextSessionId + 2.01766064418193408E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617792616235008E17 == 0
zksInstance.serverStats.maxLatency - 28 * zksInstance.serverStats.packetsReceived + 84 * zksInstance.sessionTracker.nextSessionId - 6.0529819325458022E18 == 0
zksInstance.serverStats.maxLatency - 28 * zksInstance.serverStats.packetsSent + 84 * zksInstance.sessionTracker.nextSessionId - 6.0529819325458022E18 == 0
18 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 28 * zksInstance.sessionTracker.nextSessionId + 2.01766064418193408E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617792616235008E17 == 0
18 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 28 * zksInstance.sessionTracker.nextSessionId + 2.01766064418193408E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617792616235008E17 == 0
zksInstance.serverStats.totalLatency - 8 * zksInstance.sessionTracker.nextSessionId - 36 * zksInstance.zkDb.minCommittedLog + 5.7647446976626688E17 == 0
zksInstance.sessionTracker.currentTime == 26362850
zksInstance.sessionTracker.nextExpirationTime == 26364000
zksInstance.sessionTracker.nextSessionId == 72059321753665537L || zksInstance.sessionTracker.nextSessionId == 72059321753665538L
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177965260996608E17 == 0
38 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 114 * zksInstance.sessionTracker.nextSessionId + 8.2147626799178711E18 == 0
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177965260996608E17 == 0
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177965260996608E17 == 0
38 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 100 * zksInstance.sessionTracker.nextSessionId + 7.2059321753665536E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177965260996608E17 == 0
38 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 114 * zksInstance.sessionTracker.nextSessionId + 8.2147626799178711E18 == 0
38 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency - 100 * zksInstance.sessionTracker.nextSessionId + 7.2059321753665536E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177965260996608E17 == 0
zksInstance.serverStats.maxLatency - 38 * zksInstance.serverStats.packetsReceived + 114 * zksInstance.sessionTracker.nextSessionId - 8.2147626799178711E18 == 0
zksInstance.serverStats.maxLatency - 38 * zksInstance.serverStats.packetsSent + 114 * zksInstance.sessionTracker.nextSessionId - 8.2147626799178711E18 == 0
38 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 100 * zksInstance.sessionTracker.nextSessionId + 7.2059321753665536E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177965260996608E17 == 0
38 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 100 * zksInstance.sessionTracker.nextSessionId + 7.2059321753665536E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177965260996608E17 == 0
zksInstance.serverStats.totalLatency - 8 * zksInstance.sessionTracker.nextSessionId - 44 * zksInstance.zkDb.minCommittedLog + 5.7647457402932429E17 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 34 || zksInstance.serverStats.maxLatency == 93
zksInstance.sessionTracker.currentTime == 26166484
zksInstance.sessionTracker.nextExpirationTime == 26169000
zksInstance.sessionTracker.nextSessionId == 72059308884557825L || zksInstance.sessionTracker.nextSessionId == 72059308884557826L
zksInstance.serverStats.maxLatency - 93 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177926653673472E17 == 0
34 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 102 * zksInstance.sessionTracker.nextSessionId + 7.350049506224898E18 == 0
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177926653673472E17 == 0
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177926653673472E17 == 0
34 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 90 * zksInstance.sessionTracker.nextSessionId + 6.4853377996102042E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177926653673472E17 == 0
34 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 102 * zksInstance.sessionTracker.nextSessionId + 7.350049506224898E18 == 0
34 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency - 90 * zksInstance.sessionTracker.nextSessionId + 6.4853377996102042E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177926653673472E17 == 0
zksInstance.serverStats.maxLatency - 34 * zksInstance.serverStats.packetsReceived + 102 * zksInstance.sessionTracker.nextSessionId - 7.350049506224898E18 == 0
zksInstance.serverStats.maxLatency - 34 * zksInstance.serverStats.packetsSent + 102 * zksInstance.sessionTracker.nextSessionId - 7.350049506224898E18 == 0
34 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 90 * zksInstance.sessionTracker.nextSessionId + 6.4853377996102042E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177926653673472E17 == 0
34 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 90 * zksInstance.sessionTracker.nextSessionId + 6.4853377996102042E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177926653673472E17 == 0
zksInstance.serverStats.totalLatency - 8 * zksInstance.sessionTracker.nextSessionId - 38 * zksInstance.zkDb.minCommittedLog + 5.7647447107646259E17 == 0
zksInstance.sessionTracker.currentTime == 26365994
zksInstance.sessionTracker.nextSessionId == 72059321959710721L || zksInstance.sessionTracker.nextSessionId == 72059321959710722L
zksInstance.sessionTracker.expirationInterval % zksInstance.serverStats.packetsReceived == 0
zksInstance.sessionTracker.nextExpirationTime % zksInstance.serverStats.packetsReceived == 0
30 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 90 * zksInstance.sessionTracker.nextSessionId + 6.4853389763739648E18 == 0
19 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 30 * zksInstance.sessionTracker.nextSessionId + 2.1617796587913216E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617796587913216E17 == 0
zksInstance.serverStats.maxLatency - 30 * zksInstance.serverStats.packetsReceived + 90 * zksInstance.sessionTracker.nextSessionId - 6.4853389763739648E18 == 0
zksInstance.serverStats.maxLatency - 30 * zksInstance.serverStats.packetsSent + 90 * zksInstance.sessionTracker.nextSessionId - 6.4853389763739648E18 == 0
19 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 30 * zksInstance.sessionTracker.nextSessionId + 2.1617796587913216E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617796587913216E17 == 0
19 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 30 * zksInstance.sessionTracker.nextSessionId + 2.1617796587913216E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617796587913216E17 == 0
zksInstance.serverStats.totalLatency - 8 * zksInstance.sessionTracker.nextSessionId - 38 * zksInstance.zkDb.minCommittedLog + 5.7647457567768576E17 == 0
zksInstance.sessionTracker.currentTime == 26169744
zksInstance.sessionTracker.nextSessionId == 72059309098205185L || zksInstance.sessionTracker.nextSessionId == 72059309098205186L
28 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 84 * zksInstance.sessionTracker.nextSessionId + 6.0529819642492355E18 == 0
35 * zksInstance.hzxid - 2 * zksInstance.serverStats.totalLatency - 54 * zksInstance.sessionTracker.nextSessionId + 3.8912026913030799E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177927294615552E17 == 0
zksInstance.serverStats.maxLatency - 28 * zksInstance.serverStats.packetsReceived + 84 * zksInstance.sessionTracker.nextSessionId - 6.0529819642492355E18 == 0
zksInstance.serverStats.maxLatency - 28 * zksInstance.serverStats.packetsSent + 84 * zksInstance.sessionTracker.nextSessionId - 6.0529819642492355E18 == 0
35 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.serverStats.totalLatency - 54 * zksInstance.sessionTracker.nextSessionId + 3.8912026913030799E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177927294615552E17 == 0
35 * zksInstance.serverStats.packetsSent - 2 * zksInstance.serverStats.totalLatency - 54 * zksInstance.sessionTracker.nextSessionId + 3.8912026913030799E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177927294615552E17 == 0
zksInstance.serverStats.totalLatency - 8 * zksInstance.sessionTracker.nextSessionId - 35 * zksInstance.zkDb.minCommittedLog + 5.7647447278564147E17 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 458
zksInstance.sessionTracker.currentTime == 26765742 || zksInstance.sessionTracker.currentTime == 26766000
zksInstance.sessionTracker.nextExpirationTime == 26766000 || zksInstance.sessionTracker.nextExpirationTime == 26769000
zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - -2147483648 == 0
zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - -2147483648 == 0
3 * zksInstance.hzxid - 3 * zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 7.2059348157530112E16 == 0
442 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.2233720368547748E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
3 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059348157530112E16 == 0
3 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059348157530112E16 == 0
9546 * zksInstance.hzxid - 774 * zksInstance.serverStats.totalLatency + 1337 * zksInstance.sessionTracker.currentTime - 3.5785797054E10 == 0
111000 * zksInstance.hzxid - 9000 * zksInstance.serverStats.totalLatency + 1337 * zksInstance.sessionTracker.nextExpirationTime - 3.5786142E10 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178044472590336E17 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.16178044472590336E17 == 0
442 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.2233720368547748E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
3 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059348157530112E16 == 0
9546 * zksInstance.serverStats.count - 774 * zksInstance.serverStats.totalLatency + 1337 * zksInstance.sessionTracker.currentTime - 3.5785797054E10 == 0
111000 * zksInstance.serverStats.count - 9000 * zksInstance.serverStats.totalLatency + 1337 * zksInstance.sessionTracker.nextExpirationTime - 3.5786142E10 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178044472590336E17 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.16178044472590336E17 == 0
3 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059348157530112E16 == 0
9546 * zksInstance.serverStats.packetsReceived - 774 * zksInstance.serverStats.totalLatency + 1337 * zksInstance.sessionTracker.currentTime - 3.5785816146E10 == 0
111000 * zksInstance.serverStats.packetsReceived - 9000 * zksInstance.serverStats.totalLatency + 1337 * zksInstance.sessionTracker.nextExpirationTime - 3.5786364E10 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178044472590336E17 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.16178044472590336E17 == 0
9546 * zksInstance.serverStats.packetsSent - 774 * zksInstance.serverStats.totalLatency + 1337 * zksInstance.sessionTracker.currentTime - 3.57858066E10 == 0
111000 * zksInstance.serverStats.packetsSent - 9000 * zksInstance.serverStats.totalLatency + 1337 * zksInstance.sessionTracker.nextExpirationTime - 3.5786253E10 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178044472590336E17 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.16178044472590336E17 == 0
zksInstance.serverStats.totalLatency - 21 * zksInstance.sessionTracker.nextSessionId - 474 * zksInstance.zkDb.minCommittedLog + 1.51324631130813235E18 == 0
zksInstance.serverStats.totalLatency - 21 * zksInstance.sessionTracker.nextSessionId - 474 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 1.51324631130813286E18 == 0
zksInstance.requestsInProcess > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.serverStats.count != zksInstance.zkDb.commitLogCount
zksInstance.serverStats.packetsReceived != zksInstance.zkDb.commitLogBuffer
zksInstance.serverStats.packetsReceived != zksInstance.zkDb.commitLogCount
zksInstance.serverStats.packetsSent != zksInstance.zkDb.commitLogBuffer
zksInstance.txnLogFactory.txnLog.lastZxidSeen != zksInstance.zkDb.commitLogCount
zksInstance.zkDb.commitLogCount != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.zkDb.commitLogCount != zksInstance.zkDb.maxCommittedLog
zksInstance.zkDb.commitLogCount != zksInstance.zkDb.minCommittedLog
zksInstance.hzxid + zksInstance.requestsInProcess - 4 * zksInstance.sessionTracker.nextSessionId + 2.8823736016227533E17 == 0
2 * zksInstance.hzxid - zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 2.8823736016227533E17 == 0
2 * zksInstance.hzxid - 2 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059340040568832E16 == 0
2 * zksInstance.hzxid - zksInstance.serverStats.packetsSent - 4 * zksInstance.sessionTracker.nextSessionId + 2.8823736016227533E17 == 0
8 * zksInstance.hzxid + 2 * zksInstance.sessionTracker.nextSessionId - 9 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 1.44118680081137664E17 == 0
2 * zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.dataTree.lastProcessedZxid + 2.8823736016227533E17 == 0
2 * zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.maxCommittedLog + 2.8823736016227533E17 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178020121706496E17 == 0
2 * zksInstance.requestsInProcess + zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + 2.8823736016227533E17 == 0
zksInstance.requestsInProcess + zksInstance.serverStats.packetsReceived - 4 * zksInstance.sessionTracker.nextSessionId + 2.8823736016227533E17 == 0
2 * zksInstance.requestsInProcess + zksInstance.serverStats.packetsSent - 4 * zksInstance.sessionTracker.nextSessionId + 2.8823736016227533E17 == 0
22 * zksInstance.requestsInProcess + zksInstance.serverStats.totalLatency - 121 * zksInstance.sessionTracker.nextSessionId + 8.7191801449088287E18 == 0
zksInstance.requestsInProcess - 4 * zksInstance.sessionTracker.nextSessionId + zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2.8823736016227533E17 == 0
2 * zksInstance.requestsInProcess - 4 * zksInstance.sessionTracker.nextSessionId + zksInstance.zkDb.dataTree.lastProcessedZxid + 2.8823736016227533E17 == 0
2 * zksInstance.requestsInProcess - 4 * zksInstance.sessionTracker.nextSessionId + zksInstance.zkDb.maxCommittedLog + 2.8823736016227533E17 == 0
zksInstance.serverStats.count - 2 * zksInstance.serverStats.packetsReceived + 4 * zksInstance.sessionTracker.nextSessionId - 2.8823736016227533E17 == 0
53 * zksInstance.serverStats.count - 54 * zksInstance.serverStats.packetsSent + 2 * zksInstance.sessionTracker.nextSessionId - 1.441186800811376E17 == 0
115 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.totalLatency - 97 * zksInstance.sessionTracker.nextSessionId + 6.9897559839351767E18 == 0
zksInstance.serverStats.count + 4 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 2.8823736016227533E17 == 0
42 * zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId - 41 * zksInstance.zkDb.dataTree.lastProcessedZxid + 1.44118680081137664E17 == 0
3 * zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.maxCommittedLog + 2.8823736016227533E17 == 0
zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 1.44118680081137664E17 == 0
2 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.packetsSent - 4 * zksInstance.sessionTracker.nextSessionId + 2.8823736016227533E17 == 0
2 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.2059340040568832E16 == 0
2 * zksInstance.serverStats.packetsReceived - 4 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.dataTree.lastProcessedZxid + 2.8823736016227533E17 == 0
2 * zksInstance.serverStats.packetsReceived - 4 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.maxCommittedLog + 2.8823736016227533E17 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178020121706496E17 == 0
115 * zksInstance.serverStats.packetsSent - 3 * zksInstance.serverStats.totalLatency - 97 * zksInstance.sessionTracker.nextSessionId + 6.9897559839351767E18 == 0
zksInstance.serverStats.packetsSent + 4 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 2.8823736016227533E17 == 0
42 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId - 41 * zksInstance.zkDb.dataTree.lastProcessedZxid + 1.44118680081137632E17 == 0
3 * zksInstance.serverStats.packetsSent - 4 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.maxCommittedLog + 2.8823736016227533E17 == 0
zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 1.44118680081137664E17 == 0
3 * zksInstance.serverStats.totalLatency + 97 * zksInstance.sessionTracker.nextSessionId - 115 * zksInstance.zkDb.dataTree.lastProcessedZxid - 6.9897559839351767E18 == 0
3 * zksInstance.serverStats.totalLatency + 97 * zksInstance.sessionTracker.nextSessionId - 115 * zksInstance.zkDb.maxCommittedLog - 6.9897559839351767E18 == 0
zksInstance.serverStats.totalLatency - 6 * zksInstance.sessionTracker.nextSessionId - 115 * zksInstance.zkDb.minCommittedLog + 4.3235604024341299E17 == 0
4 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + zksInstance.zkDb.dataTree.lastProcessedZxid - 2.8823736016227533E17 == 0
4 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + zksInstance.zkDb.maxCommittedLog - 2.8823736016227533E17 == 0
3 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen + zksInstance.zkDb.minCommittedLog - 2.16178020121706496E17 == 0
4 * zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2 * zksInstance.zkDb.maxCommittedLog - 2.8823736016227533E17 == 0
2 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.dataTree.lastProcessedZxid + zksInstance.zkDb.minCommittedLog - 1.44118680081137664E17 == 0
2 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.maxCommittedLog + zksInstance.zkDb.minCommittedLog - 1.44118680081137664E17 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 102
zksInstance.sessionTracker.currentTime == 26673385 || zksInstance.sessionTracker.currentTime == 26682000
zksInstance.sessionTracker.nextExpirationTime == 26676000 || zksInstance.sessionTracker.nextExpirationTime == 26685000
zksInstance.sessionTracker.expirationInterval % zksInstance.requestsInProcess == 0
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 % zksInstance.requestsInProcess == 0
daikon.Quant.subsetOf(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.expirationInterval % daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 0
zksInstance.sessionTracker.expirationInterval % daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) == 0
zksInstance.sessionTracker.expirationInterval % daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 0
zksInstance.sessionTracker.nextExpirationTime % daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) == 0
zksInstance.sessionTracker.nextExpirationTime % daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 0
daikon.Quant.subsetOf(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 % daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 0
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) <= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 0
daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 0
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 % daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) == 0
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 % daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 0
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
2 * zksInstance.hzxid - 2 * zksInstance.requestsInProcess - 3 * zksInstance.sessionTracker.nextSessionId + 2.1617802631446528E17 == 0
2 * zksInstance.hzxid - 2 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.205934210482176E16 == 0
97 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
2 * zksInstance.hzxid - 2 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.205934210482176E16 == 0
4 * zksInstance.hzxid - zksInstance.sessionTracker.nextSessionId - 4 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.205934210482176E16 == 0
2 * zksInstance.hzxid - zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.dataTree.lastProcessedZxid + 7.205934210482176E16 == 0
2 * zksInstance.hzxid - zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.maxCommittedLog + 7.205934210482176E16 == 0
zksInstance.hzxid - zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.minCommittedLog + 7.205934210482176E16 == 0
2 * zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.1617802631446528E17 == 0
2 * zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.1617802631446528E17 == 0
2 * zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 2.1617802631446528E17 == 0
2 * zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 2.1617802631446528E17 == 0
2 * zksInstance.requestsInProcess + 3 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 2.1617802631446528E17 == 0
97 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
2 * zksInstance.serverStats.count - 4 * zksInstance.serverStats.packetsReceived + 5 * zksInstance.sessionTracker.nextSessionId - 3.602967105241088E17 == 0
2 * zksInstance.serverStats.count - 2 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.205934210482176E16 == 0
2 * zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 7.205934210482176E16 == 0
29 * zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 29 * zksInstance.zkDb.dataTree.lastProcessedZxid - 7.205934210482176E16 == 0
2 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.maxCommittedLog + 7.205934210482176E16 == 0
zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 1.4411868420964352E17 == 0
zksInstance.serverStats.minLatency + 97 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.minLatency + 97 * zksInstance.zkDb.dataTree.lastProcessedZxid + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.minLatency + 97 * zksInstance.zkDb.maxCommittedLog + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
2 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.205934210482176E16 == 0
4 * zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.dataTree.lastProcessedZxid + 3.602967105241088E17 == 0
2 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.maxCommittedLog + 7.205934210482176E16 == 0
zksInstance.serverStats.packetsReceived - 2 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 1.4411868420964352E17 == 0
2 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 7.205934210482176E16 == 0
2 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.dataTree.lastProcessedZxid - 7.205934210482176E16 == 0
167 * zksInstance.serverStats.packetsSent + 3 * zksInstance.sessionTracker.nextSessionId - 169 * zksInstance.zkDb.maxCommittedLog - 2.1617802631446544E17 == 0
zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.minCommittedLog + 7.205934210482176E16 == 0
zksInstance.serverStats.totalLatency - 7 * zksInstance.sessionTracker.nextSessionId - 107 * zksInstance.zkDb.minCommittedLog + 5.0441539473375232E17 == 0
zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2 * zksInstance.zkDb.dataTree.lastProcessedZxid - 7.205934210482176E16 == 0
zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2 * zksInstance.zkDb.maxCommittedLog - 7.205934210482176E16 == 0
zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2 * zksInstance.zkDb.minCommittedLog - 7.205934210482176E16 == 0
3 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 2.1617802631446528E17 == 0
3 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 2.1617802631446528E17 == 0
3 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 2.1617802631446528E17 == 0
3 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2.1617802631446528E17 == 0
zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2 * zksInstance.zkDb.maxCommittedLog - 7.205934210482176E16 == 0
2 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.dataTree.lastProcessedZxid + zksInstance.zkDb.minCommittedLog - 1.4411868420964352E17 == 0
zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.maxCommittedLog + 2 * zksInstance.zkDb.minCommittedLog - 7.205934210482176E16 == 0
zksInstance.serverStats.packetsSent == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 298
zksInstance.serverStats.minLatency == 298 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 25379696 || zksInstance.sessionTracker.currentTime == 25380000
zksInstance.sessionTracker.nextExpirationTime == 25380000 || zksInstance.sessionTracker.nextExpirationTime == 25383000
zksInstance.sessionTracker.nextSessionId == 72059257321684993L
zksInstance.sessionTracker.currentTime == 26070239
zksInstance.sessionTracker.nextExpirationTime == 26073000
zksInstance.sessionTracker.nextSessionId == 72059302577045505L || zksInstance.sessionTracker.nextSessionId == 72059302577045506L || zksInstance.sessionTracker.nextSessionId == 72059302577045507L
zksInstance.hzxid - zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 7.2059302577045504E16 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 62
zksInstance.sessionTracker.currentTime == 26176186
zksInstance.sessionTracker.nextExpirationTime == 26178000
zksInstance.sessionTracker.nextSessionId == 72059309520453633L || zksInstance.sessionTracker.nextSessionId == 72059309520453634L || zksInstance.sessionTracker.nextSessionId == 72059309520453635L
zksInstance.serverStats.maxLatency - 31 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.hzxid - zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 7.2059309520453632E16 == 0
53 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
53 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 41 || zksInstance.serverStats.maxLatency == 48
zksInstance.sessionTracker.currentTime == 26080817 || zksInstance.sessionTracker.currentTime == 26082000
zksInstance.sessionTracker.nextExpirationTime == 26082000 || zksInstance.sessionTracker.nextExpirationTime == 26085000
zksInstance.serverStats.count != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.packetsSent != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.memberOf(daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) , zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE )
zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId + 3 * zksInstance.zkDb.minCommittedLog + 7.2059303270350848E16 == 0
26 * zksInstance.serverStats.count - 26 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.205930327035088E16 == 0
18 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId - 18 * zksInstance.zkDb.maxCommittedLog + 7.2059303270350848E16 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 33 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 9.223372036854776E18 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 33 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 9.223372036854776E18 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 33 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 9.223372036854776E18 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 33 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 9.223372036854776E18 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 33 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 9.223372036854776E18 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 33 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 9.223372036854776E18 == 0
18 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId - 18 * zksInstance.zkDb.maxCommittedLog + 7.2059303270350832E16 == 0
zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.zkDb.minCommittedLog - daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 7.2059303270350848E16 == 0
zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.zkDb.minCommittedLog - daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 7.2059303270350848E16 == 0
zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.zkDb.minCommittedLog - daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 7.2059303270350848E16 == 0
zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.zkDb.minCommittedLog - daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 7.2059303270350848E16 == 0
zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.zkDb.minCommittedLog - daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 7.2059303270350848E16 == 0
zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.zkDb.minCommittedLog - daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 7.2059303270350848E16 == 0
zksInstance.sessionTracker.currentTime == 26186610 || zksInstance.sessionTracker.currentTime == 26187000
zksInstance.sessionTracker.nextExpirationTime == 26187000 || zksInstance.sessionTracker.nextExpirationTime == 26190000
zksInstance.sessionTracker.currentTime % zksInstance.requestsInProcess == 0
zksInstance.serverCnxnFactory.maxClientCnxns < daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
daikon.Quant.memberOf(daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) , zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE )
zksInstance.serverStats.minLatency > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.serverStats.minLatency > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.currentTime % daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) == 0
zksInstance.sessionTracker.currentTime % daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 0
zksInstance.zkDb.dataTree.lastProcessedZxid != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.minCommittedLog < daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
daikon.Quant.memberOf(daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) , zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE )
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.requestsInProcess - 3 * zksInstance.sessionTracker.nextSessionId + 2 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.1617793061060608E17 == 0
zksInstance.requestsInProcess - 3 * zksInstance.sessionTracker.nextSessionId + 2 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.1617793061060608E17 == 0
12 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 12 * zksInstance.sessionTracker.nextSessionId + 8.6471172244242432E17 == 0
390 * zksInstance.serverStats.count - 390 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.currentTime + 26187000 == 0
20 * zksInstance.serverStats.count - 20 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059310203535376E16 == 0
390 * zksInstance.serverStats.count + zksInstance.sessionTracker.currentTime - 390 * zksInstance.zkDb.dataTree.lastProcessedZxid - 26186610 == 0
390 * zksInstance.serverStats.count - zksInstance.sessionTracker.currentTime - 390 * zksInstance.zkDb.maxCommittedLog + 26186610 == 0
18 * zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 18 * zksInstance.zkDb.dataTree.lastProcessedZxid - 7.205931020353536E16 == 0
20 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId - 20 * zksInstance.zkDb.maxCommittedLog + 7.205931020353536E16 == 0
zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId + 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) + 1.4411862040707072E17 == 0
zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId + 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 + 1.4411862040707072E17 == 0
zksInstance.serverStats.maxLatency - 12 * zksInstance.serverStats.packetsSent + 12 * zksInstance.sessionTracker.nextSessionId - 8.6471172244242432E17 == 0
zksInstance.serverStats.maxLatency + 12 * zksInstance.sessionTracker.nextSessionId - 12 * zksInstance.zkDb.dataTree.lastProcessedZxid - 8.6471172244242432E17 == 0
zksInstance.serverStats.maxLatency + 12 * zksInstance.sessionTracker.nextSessionId - 12 * zksInstance.zkDb.maxCommittedLog - 8.6471172244242432E17 == 0
390 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.currentTime - 390 * zksInstance.zkDb.dataTree.lastProcessedZxid - 26187000 == 0
18 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 18 * zksInstance.zkDb.dataTree.lastProcessedZxid - 7.2059310203535376E16 == 0
zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) + 1.4411862040707072E17 == 0
zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 + 1.4411862040707072E17 == 0
zksInstance.sessionTracker.currentTime - 390 * zksInstance.zkDb.dataTree.lastProcessedZxid + 390 * zksInstance.zkDb.maxCommittedLog - 26186610 == 0
zksInstance.sessionTracker.nextSessionId - 18 * zksInstance.zkDb.dataTree.lastProcessedZxid + 18 * zksInstance.zkDb.maxCommittedLog - 7.205931020353536E16 == 0
2 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.dataTree.lastProcessedZxid - 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 1.4411862040707072E17 == 0
2 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.dataTree.lastProcessedZxid - 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 1.4411862040707072E17 == 0
2 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.maxCommittedLog - 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 1.4411862040707072E17 == 0
2 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.maxCommittedLog - 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 1.4411862040707072E17 == 0
zksInstance.sessionTracker.nextSessionId + zksInstance.zkDb.minCommittedLog - daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 7.205931020353536E16 == 0
zksInstance.sessionTracker.nextSessionId + zksInstance.zkDb.minCommittedLog - daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 7.205931020353536E16 == 0
zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.zkDb.minCommittedLog - daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 7.205931020353536E16 == 0
zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.zkDb.minCommittedLog - daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 7.205931020353536E16 == 0
zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.zkDb.minCommittedLog - daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 7.205931020353536E16 == 0
4 * zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 2.8823724081414144E17 == 0
4 * zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 2.8823724081414144E17 == 0
4 * zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 2.8823724081414144E17 == 0
4 * zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 2.8823724081414144E17 == 0
zksInstance.sessionTracker.currentTime == 26084601 || zksInstance.sessionTracker.currentTime == 26085000
zksInstance.sessionTracker.nextExpirationTime == 26085000 || zksInstance.sessionTracker.nextExpirationTime == 26088000
zksInstance.sessionTracker.nextSessionId == 72059303518273537L || zksInstance.sessionTracker.nextSessionId == 72059303518273538L
zksInstance.hzxid - zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 7.2059303518273536E16 == 0
12 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059303518273536E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059303518273536E16 == 0
12 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059303518273536E16 == 0
zksInstance.serverStats.packetsReceived - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059303518273536E16 == 0
zksInstance.sessionTracker.currentTime == 26190432
zksInstance.sessionTracker.nextExpirationTime == 26193000
zksInstance.sessionTracker.nextSessionId == 72059310454079489L || zksInstance.sessionTracker.nextSessionId == 72059310454079490L
zksInstance.hzxid - zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 7.2059310454079488E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059310454079488E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059310454079488E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059310454079488E16 == 0
zksInstance.serverStats.packetsReceived - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059310454079488E16 == 0
zksInstance.sessionTracker.currentTime == 26087687 || zksInstance.sessionTracker.currentTime == 26088000
zksInstance.sessionTracker.nextExpirationTime == 26088000 || zksInstance.sessionTracker.nextExpirationTime == 26091000
zksInstance.sessionTracker.nextSessionId == 72059303720517633L || zksInstance.sessionTracker.nextSessionId == 72059303720517634L
zksInstance.hzxid - zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 7.2059303720517632E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059303720517632E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059303720517632E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059303720517632E16 == 0
zksInstance.serverStats.packetsReceived - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059303720517632E16 == 0
zksInstance.sessionTracker.currentTime == 26193569
zksInstance.sessionTracker.nextExpirationTime == 26196000
zksInstance.sessionTracker.nextSessionId == 72059310659600385L || zksInstance.sessionTracker.nextSessionId == 72059310659600386L
zksInstance.hzxid - zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 7.2059310659600384E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059310659600384E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059310659600384E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059310659600384E16 == 0
zksInstance.serverStats.packetsReceived - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059310659600384E16 == 0
zksInstance.sessionTracker.currentTime == 26082151
zksInstance.sessionTracker.nextExpirationTime == 26085000
zksInstance.sessionTracker.nextSessionId == 72059303357710337L || zksInstance.sessionTracker.nextSessionId == 72059303357710338L
zksInstance.hzxid - zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 7.2059303357710336E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059303357710336E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059303357710336E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059303357710336E16 == 0
zksInstance.serverStats.packetsReceived - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059303357710336E16 == 0
zksInstance.sessionTracker.currentTime == 26187976 || zksInstance.sessionTracker.currentTime == 26190000
zksInstance.sessionTracker.nextExpirationTime == 26190000 || zksInstance.sessionTracker.nextExpirationTime == 26193000
zksInstance.sessionTracker.nextSessionId == 72059310293123073L || zksInstance.sessionTracker.nextSessionId == 72059310293123074L
zksInstance.hzxid - zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 7.2059310293123072E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059310293123072E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059310293123072E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059310293123072E16 == 0
zksInstance.serverStats.packetsReceived - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059310293123072E16 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 72
zksInstance.sessionTracker.currentTime == 26090331
zksInstance.sessionTracker.nextExpirationTime == 26091000
zksInstance.sessionTracker.nextSessionId == 72059303893860353L
65 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.sessionTracker.currentTime == 26196269
zksInstance.sessionTracker.nextExpirationTime == 26199000
zksInstance.sessionTracker.nextSessionId == 72059310836547585L
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 25 || zksInstance.serverStats.maxLatency == 37
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 25 || zksInstance.serverStats.totalLatency == 62
zksInstance.sessionTracker.currentTime == 26090625
zksInstance.sessionTracker.nextSessionId == 72059303913127937L
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 30 || zksInstance.serverStats.maxLatency == 37
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 30 || zksInstance.serverStats.totalLatency == 67
zksInstance.sessionTracker.currentTime == 26196552
zksInstance.sessionTracker.nextSessionId == 72059310855159809L
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 24 || zksInstance.serverStats.maxLatency == 62
zksInstance.sessionTracker.currentTime == 26090811 || zksInstance.sessionTracker.currentTime == 26091000 || zksInstance.sessionTracker.currentTime == 26094000
zksInstance.sessionTracker.nextExpirationTime == 26091000 || zksInstance.sessionTracker.nextExpirationTime == 26094000 || zksInstance.sessionTracker.nextExpirationTime == 26097000
zksInstance.sessionTracker.nextSessionId == 72059303925317633L
zksInstance.sessionTracker.currentTime <= zksInstance.sessionTracker.nextExpirationTime
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 26 || zksInstance.serverStats.maxLatency == 65
zksInstance.sessionTracker.currentTime == 26196751 || zksInstance.sessionTracker.currentTime == 26199000 || zksInstance.sessionTracker.currentTime == 26202000
zksInstance.sessionTracker.nextExpirationTime == 26199000 || zksInstance.sessionTracker.nextExpirationTime == 26202000 || zksInstance.sessionTracker.nextExpirationTime == 26205000
zksInstance.sessionTracker.nextSessionId == 72059310868201473L
zksInstance.sessionTracker.currentTime == 26090185
zksInstance.sessionTracker.nextSessionId == 72059303884226561L
zksInstance.sessionTracker.currentTime == 26196097
zksInstance.sessionTracker.nextSessionId == 72059310825275393L
zksInstance.sessionTracker.currentTime == 26090461
zksInstance.sessionTracker.nextSessionId == 72059303902314497L
zksInstance.sessionTracker.currentTime == 26196380
zksInstance.sessionTracker.nextSessionId == 72059310843822081L
zksInstance.sessionTracker.nextSessionId == 72059302595067905L || zksInstance.sessionTracker.nextSessionId == 72059302595067906L
3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - -2147483648 == 0
zksInstance.zkDb.minCommittedLog <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
12 * zksInstance.hzxid - 11 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.2059302595067904E16 == 0
12 * zksInstance.hzxid - 11 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId + 7.205930259506792E16 == 0
12 * zksInstance.hzxid - 11 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.205930259506792E16 == 0
16 * zksInstance.hzxid - 3 * zksInstance.serverStats.totalLatency + 62 * zksInstance.sessionTracker.nextSessionId - 4.46767676089421E18 == 0
23 * zksInstance.serverStats.count - 22 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.205930259506792E16 == 0
16 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.totalLatency + 62 * zksInstance.sessionTracker.nextSessionId - 4.46767676089421E18 == 0
23 * zksInstance.serverStats.packetsReceived - 22 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059302595067888E16 == 0
16 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.totalLatency + 62 * zksInstance.sessionTracker.nextSessionId - 4.46767676089421E18 == 0
16 * zksInstance.serverStats.packetsSent - 3 * zksInstance.serverStats.totalLatency + 62 * zksInstance.sessionTracker.nextSessionId - 4.46767676089421E18 == 0
zksInstance.zkDb.minCommittedLog == daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.nextSessionId == 72059309530873857L || zksInstance.sessionTracker.nextSessionId == 72059309530873858L
daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) == 1 || daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) == 2
zksInstance.serverStats.minLatency >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
daikon.Quant.memberOf(daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog) , zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE )
zksInstance.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
12 * zksInstance.hzxid - 11 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.2059309530873856E16 == 0
12 * zksInstance.hzxid - 11 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId + 7.2059309530873872E16 == 0
12 * zksInstance.hzxid - 11 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059309530873872E16 == 0
19 * zksInstance.hzxid - 3 * zksInstance.serverStats.totalLatency + 53 * zksInstance.sessionTracker.nextSessionId - 3.8191434051363144E18 == 0
23 * zksInstance.serverStats.count - 22 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059309530873872E16 == 0
19 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.totalLatency + 53 * zksInstance.sessionTracker.nextSessionId - 3.8191434051363144E18 == 0
23 * zksInstance.serverStats.packetsReceived - 22 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.205930953087384E16 == 0
19 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.totalLatency + 53 * zksInstance.sessionTracker.nextSessionId - 3.8191434051363144E18 == 0
19 * zksInstance.serverStats.packetsSent - 3 * zksInstance.serverStats.totalLatency + 53 * zksInstance.sessionTracker.nextSessionId - 3.8191434051363144E18 == 0
zksInstance.sessionTracker.currentTime == 26084509
zksInstance.sessionTracker.nextSessionId == 72059303512244225L
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 39
zksInstance.sessionTracker.currentTime == 26190320
zksInstance.sessionTracker.nextSessionId == 72059310446739457L
zksInstance.sessionTracker.currentTime == 26086964
zksInstance.sessionTracker.nextExpirationTime == 26088000
zksInstance.sessionTracker.nextSessionId == 72059303673135105L
37 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
37 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.sessionTracker.currentTime == 26192831 || zksInstance.sessionTracker.currentTime == 26193000
zksInstance.sessionTracker.nextExpirationTime == 26193000 || zksInstance.sessionTracker.nextExpirationTime == 26196000
zksInstance.sessionTracker.nextSessionId == 72059310611234817L
zksInstance.serverStats.minLatency == 39 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26090014
zksInstance.sessionTracker.nextSessionId == 72059303873019905L
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 40
zksInstance.serverStats.minLatency == 40 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26195911
zksInstance.sessionTracker.nextSessionId == 72059310813151233L
zksInstance.sessionTracker.currentTime == 25106113 || zksInstance.sessionTracker.currentTime == 25107001
zksInstance.sessionTracker.nextExpirationTime == 25107000 || zksInstance.sessionTracker.nextExpirationTime == 25110000
zksInstance.sessionTracker.nextSessionId == 72059239392149505L || zksInstance.sessionTracker.nextSessionId == 72059239392149506L || zksInstance.sessionTracker.nextSessionId == 72059239403290624L
zksInstance.serverStats.packetsReceived >= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverStats.packetsSent >= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.sessionTracker.nextSessionId % daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) == 0
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
24 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 72 * zksInstance.sessionTracker.nextSessionId + 5.1882652362347643E18 == 0
24 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 36 * zksInstance.sessionTracker.nextSessionId + 2.5941326181173821E18 == 0
888 * zksInstance.hzxid - 5 * zksInstance.sessionTracker.currentTime - 888 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 125530565 == 0
33423357 * zksInstance.hzxid - 15 * zksInstance.sessionTracker.nextSessionId - 33423352 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 1.08088859088224256E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177718176448512E17 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId + 33423352 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.16177718143025152E17 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId + 33423352 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2.16177718176448512E17 == 0
24 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 72 * zksInstance.sessionTracker.nextSessionId + 5.1882652362347643E18 == 0
888 * zksInstance.serverStats.count - 888 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.currentTime - 25104337 == 0
33423356 * zksInstance.serverStats.count - 33423357 * zksInstance.serverStats.packetsReceived + 3 * zksInstance.sessionTracker.nextSessionId - 2.16177718109601792E17 == 0
5 * zksInstance.serverStats.count - 4 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118478784299008E17 == 0
5 * zksInstance.serverStats.count - 2 * zksInstance.serverStats.totalLatency + 52 * zksInstance.sessionTracker.nextSessionId - 3.7470804483917742E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177718176448512E17 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 33423357 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.16177718143025152E17 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 33423357 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2.16177718176448512E17 == 0
zksInstance.serverStats.maxLatency - 24 * zksInstance.serverStats.packetsReceived + 72 * zksInstance.sessionTracker.nextSessionId - 5.1882652362347643E18 == 0
zksInstance.serverStats.maxLatency - 24 * zksInstance.serverStats.packetsSent + 72 * zksInstance.sessionTracker.nextSessionId - 5.1882652362347643E18 == 0
307248 * zksInstance.serverStats.maxLatency - 692 * zksInstance.sessionTracker.currentTime - 69 * zksInstance.txnLogFactory.txnLog.currentSize + 1.7373430196E10 == 0
37 * zksInstance.serverStats.maxLatency + zksInstance.sessionTracker.currentTime - 888 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 25105225 == 0
37 * zksInstance.serverStats.maxLatency + zksInstance.sessionTracker.currentTime - 888 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 25106113 == 0
zksInstance.serverStats.maxLatency + 72 * zksInstance.sessionTracker.nextSessionId - 24 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 5.1882652362347643E18 == 0
11141119 * zksInstance.serverStats.maxLatency + 24 * zksInstance.sessionTracker.nextSessionId - 267386856 * zksInstance.zkDb.minCommittedLog - 1.7294217454115881E18 == 0
5 * zksInstance.serverStats.packetsReceived - 4 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118478784299008E17 == 0
5 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.serverStats.totalLatency + 52 * zksInstance.sessionTracker.nextSessionId - 3.7470804483917742E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177718176448512E17 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 33423356 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.16177718143025152E17 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 33423356 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2.16177718176448512E17 == 0
5 * zksInstance.serverStats.packetsSent - 2 * zksInstance.serverStats.totalLatency + 52 * zksInstance.sessionTracker.nextSessionId - 3.7470804483917742E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177718176448512E17 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 33423356 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.16177718143025152E17 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 33423356 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2.16177718176448512E17 == 0
zksInstance.serverStats.totalLatency + 36 * zksInstance.sessionTracker.nextSessionId - 24 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 2.5941326181173821E18 == 0
zksInstance.serverStats.totalLatency - 12 * zksInstance.sessionTracker.nextSessionId - 24 * zksInstance.zkDb.minCommittedLog + 8.6471087270579405E17 == 0
zksInstance.serverStats.totalLatency - 34 * zksInstance.sessionTracker.nextSessionId + 378798046 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.4500141389542851E18 == 0
zksInstance.serverStats.totalLatency - 34 * zksInstance.sessionTracker.nextSessionId + 378798046 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2.4500141393330831E18 == 0
346 * zksInstance.sessionTracker.currentTime + 3 * zksInstance.txnLogFactory.txnLog.currentSize - 307248 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 8.68640785E9 == 0
346 * zksInstance.sessionTracker.currentTime + 3 * zksInstance.txnLogFactory.txnLog.currentSize - 307248 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 8.686715098E9 == 0
346 * zksInstance.sessionTracker.currentTime + 3 * zksInstance.txnLogFactory.txnLog.currentSize - 307248 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 8.68640785E9 == 0
346 * zksInstance.sessionTracker.currentTime + 3 * zksInstance.txnLogFactory.txnLog.currentSize - 307248 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 8.686715098E9 == 0
zksInstance.sessionTracker.currentTime - 888 * zksInstance.zkDb.minCommittedLog + 888 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 25107001 == 0
zksInstance.sessionTracker.currentTime - 888 * zksInstance.zkDb.minCommittedLog + 888 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 25106113 == 0
zksInstance.sessionTracker.currentTime - 888 * zksInstance.zkDb.minCommittedLog + 888 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 25107001 == 0
zksInstance.sessionTracker.currentTime - 888 * zksInstance.zkDb.minCommittedLog + 888 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 25106113 == 0
zksInstance.sessionTracker.currentTime + 888 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 888 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 25106113 == 0
zksInstance.sessionTracker.currentTime + 888 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 888 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 25107001 == 0
zksInstance.sessionTracker.currentTime + 888 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 888 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 25105225 == 0
zksInstance.sessionTracker.currentTime + 888 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 888 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 25106113 == 0
3 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen + zksInstance.zkDb.minCommittedLog - 2.16177718176448512E17 == 0
3 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 33423357 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 2.16177718143025152E17 == 0
3 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 33423357 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 2.16177718176448512E17 == 0
zksInstance.sessionTracker.currentTime == 25104087 || zksInstance.sessionTracker.currentTime == 25104383
zksInstance.sessionTracker.nextExpirationTime == 25107000
zksInstance.sessionTracker.nextSessionId == 72059239259308033L || zksInstance.sessionTracker.nextSessionId == 72059239259308034L || zksInstance.sessionTracker.nextSessionId == 72059239278706688L
zksInstance.hzxid - zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 7.2059239259308032E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059239259308032E16 == 0
zksInstance.hzxid - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059239259308032E16 == 0
296 * zksInstance.hzxid - 7 * zksInstance.sessionTracker.currentTime - 296 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 175728609 == 0
19398655 * zksInstance.hzxid - 7 * zksInstance.sessionTracker.nextSessionId - 19398655 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 5.0441467481515622E17 == 0
296 * zksInstance.serverStats.count - 296 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.currentTime - 25103495 == 0
19398655 * zksInstance.serverStats.count - 19398655 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.205923922051072E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059239259308032E16 == 0
zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.2059239259308032E16 == 0
102416 * zksInstance.serverStats.maxLatency + 6920 * zksInstance.sessionTracker.currentTime - 43 * zksInstance.txnLogFactory.txnLog.currentSize - 1.7372028204E11 == 0
296 * zksInstance.serverStats.maxLatency + 43 * zksInstance.sessionTracker.currentTime - 12728 * zksInstance.zkDb.minCommittedLog - 1079475741 == 0
296 * zksInstance.serverStats.maxLatency + 43 * zksInstance.sessionTracker.currentTime - 12728 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 1079463013 == 0
296 * zksInstance.serverStats.maxLatency + 43 * zksInstance.sessionTracker.currentTime - 12728 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 1079475741 == 0
19398655 * zksInstance.serverStats.maxLatency + 43 * zksInstance.sessionTracker.nextSessionId - 834142165 * zksInstance.zkDb.minCommittedLog - 3.0985472881502454E18 == 0
zksInstance.serverStats.packetsReceived - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059239259308032E16 == 0
zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.2059239259308032E16 == 0
zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.2059239259308032E16 == 0
346 * zksInstance.sessionTracker.currentTime + zksInstance.txnLogFactory.txnLog.currentSize - 102416 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 8.685911686E9 == 0
346 * zksInstance.sessionTracker.currentTime + zksInstance.txnLogFactory.txnLog.currentSize - 102416 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 8.686014102E9 == 0
346 * zksInstance.sessionTracker.currentTime + zksInstance.txnLogFactory.txnLog.currentSize - 102416 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 8.685911686E9 == 0
346 * zksInstance.sessionTracker.currentTime + zksInstance.txnLogFactory.txnLog.currentSize - 102416 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 8.686014102E9 == 0
zksInstance.sessionTracker.currentTime - 296 * zksInstance.zkDb.minCommittedLog + 296 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 25104383 == 0
zksInstance.sessionTracker.currentTime - 296 * zksInstance.zkDb.minCommittedLog + 296 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 25104087 == 0
zksInstance.sessionTracker.currentTime - 296 * zksInstance.zkDb.minCommittedLog + 296 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 25104383 == 0
zksInstance.sessionTracker.currentTime - 296 * zksInstance.zkDb.minCommittedLog + 296 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 25104087 == 0
zksInstance.sessionTracker.currentTime + 296 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 296 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 25104087 == 0
zksInstance.sessionTracker.currentTime + 296 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 296 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 25104383 == 0
zksInstance.sessionTracker.currentTime + 296 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 296 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 25103791 == 0
zksInstance.sessionTracker.currentTime + 296 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 296 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 25104087 == 0
zksInstance.requestsInProcess == 1 || zksInstance.requestsInProcess == 2
zksInstance.sessionTracker.currentTime == 25107778 || zksInstance.sessionTracker.currentTime == 25107949
zksInstance.sessionTracker.nextExpirationTime == 25110000
zksInstance.sessionTracker.nextSessionId == 72059239501201409L || zksInstance.sessionTracker.nextSessionId == 72059239501201410L || zksInstance.sessionTracker.nextSessionId == 72059239512473600L
zksInstance.hzxid <= zksInstance.serverStats.packetsReceived
zksInstance.serverStats.count % zksInstance.requestsInProcess == 0
zksInstance.serverStats.maxLatency % zksInstance.requestsInProcess == 0
zksInstance.sessionTracker.nextSessionId % zksInstance.requestsInProcess == 0
zksInstance.txnLogFactory.txnLog.lastZxidSeen % zksInstance.requestsInProcess == 0
zksInstance.hzxid + 33816568 * zksInstance.requestsInProcess - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177718469787648E17 == 0
23 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 69 * zksInstance.sessionTracker.nextSessionId + 4.9720875255828972E18 == 0
23 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 33 * zksInstance.sessionTracker.nextSessionId + 2.3779549035396465E18 == 0
171 * zksInstance.hzxid - 5 * zksInstance.sessionTracker.currentTime - 171 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 125538890 == 0
33816573 * zksInstance.hzxid - 15 * zksInstance.sessionTracker.nextSessionId - 33816568 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 1.08088859251802112E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177718503604224E17 == 0
33816573 * zksInstance.requestsInProcess + zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177718469787648E17 == 0
4446 * zksInstance.requestsInProcess + 171 * zksInstance.serverStats.maxLatency - 26 * zksInstance.sessionTracker.currentTime + 652797782 == 0
33816570 * zksInstance.requestsInProcess + zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177718469787648E17 == 0
33816571 * zksInstance.requestsInProcess + zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177718469787648E17 == 0
394526685 * zksInstance.requestsInProcess + zksInstance.serverStats.totalLatency - 35 * zksInstance.sessionTracker.nextSessionId + 2.5220733821475226E18 == 0
17513136 * zksInstance.requestsInProcess - 102416 * zksInstance.sessionTracker.currentTime + 171 * zksInstance.txnLogFactory.txnLog.currentSize + 2.571420678512E12 == 0
171 * zksInstance.requestsInProcess - zksInstance.sessionTracker.currentTime - 171 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 25107949 == 0
171 * zksInstance.requestsInProcess - zksInstance.sessionTracker.currentTime - 171 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 25107778 == 0
33816573 * zksInstance.requestsInProcess - 3 * zksInstance.sessionTracker.nextSessionId + zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2.16177718469787648E17 == 0
23 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 69 * zksInstance.sessionTracker.nextSessionId + 4.9720875255828972E18 == 0
57 * zksInstance.serverStats.count - 57 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.currentTime - 25107664 == 0
11272190 * zksInstance.serverStats.count - 11272191 * zksInstance.serverStats.packetsReceived + 3 * zksInstance.sessionTracker.nextSessionId - 2.1617771848105984E17 == 0
5 * zksInstance.serverStats.count - 4 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118479002402816E17 == 0
zksInstance.serverStats.count - zksInstance.serverStats.totalLatency + 32 * zksInstance.sessionTracker.nextSessionId - 2.3058956640384451E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177718503604224E17 == 0
zksInstance.serverStats.maxLatency - 23 * zksInstance.serverStats.packetsReceived + 69 * zksInstance.sessionTracker.nextSessionId - 4.9720875255828972E18 == 0
zksInstance.serverStats.maxLatency - 23 * zksInstance.serverStats.packetsSent + 69 * zksInstance.sessionTracker.nextSessionId - 4.9720875255828972E18 == 0
2918856 * zksInstance.serverStats.maxLatency - 51208 * zksInstance.sessionTracker.currentTime - 741 * zksInstance.txnLogFactory.txnLog.currentSize + 1.285727852392E12 == 0
171 * zksInstance.serverStats.maxLatency + 23 * zksInstance.sessionTracker.currentTime - 3933 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 577474961 == 0
171 * zksInstance.serverStats.maxLatency + 23 * zksInstance.sessionTracker.currentTime - 3933 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 577478894 == 0
zksInstance.serverStats.maxLatency + 69 * zksInstance.sessionTracker.nextSessionId - 23 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 4.9720875255828972E18 == 0
11272191 * zksInstance.serverStats.maxLatency + 23 * zksInstance.sessionTracker.nextSessionId - 259260393 * zksInstance.zkDb.minCommittedLog - 1.65736250852763238E18 == 0
5 * zksInstance.serverStats.packetsReceived - 4 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118479002402816E17 == 0
zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency + 32 * zksInstance.sessionTracker.nextSessionId - 2.3058956640384451E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177718503604224E17 == 0
zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 32 * zksInstance.sessionTracker.nextSessionId - 2.3058956640384451E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177718503604224E17 == 0
zksInstance.serverStats.totalLatency + 33 * zksInstance.sessionTracker.nextSessionId - 23 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 2.3779549035396465E18 == 0
zksInstance.serverStats.totalLatency - 13 * zksInstance.sessionTracker.nextSessionId - 23 * zksInstance.zkDb.minCommittedLog + 9.367701135156183E17 == 0
102416 * zksInstance.sessionTracker.currentTime + 171 * zksInstance.txnLogFactory.txnLog.currentSize - 17513136 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 2.571420678512E12 == 0
102416 * zksInstance.sessionTracker.currentTime + 171 * zksInstance.txnLogFactory.txnLog.currentSize - 17513136 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 2.571438191648E12 == 0
zksInstance.sessionTracker.currentTime - 171 * zksInstance.zkDb.minCommittedLog + 171 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 25107949 == 0
zksInstance.sessionTracker.currentTime - 171 * zksInstance.zkDb.minCommittedLog + 171 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 25107778 == 0
3 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen + zksInstance.zkDb.minCommittedLog - 2.16177718503604224E17 == 0
zksInstance.sessionTracker.nextSessionId == 72059239626833921L || zksInstance.sessionTracker.nextSessionId == 72059239626833922L || zksInstance.sessionTracker.nextSessionId == 72059244722257920L
zksInstance.serverStats.packetsReceived != zksInstance.serverStats.packetsSent
zksInstance.txnLogFactory.txnLog.currentSize % daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 0
1537 * zksInstance.hzxid - 1536 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId + 7.2059239626836992E16 == 0
19 * zksInstance.hzxid - 3 * zksInstance.serverStats.totalLatency + 47 * zksInstance.sessionTracker.nextSessionId - 3.3867842624611942E18 == 0
47 * zksInstance.requestsInProcess - zksInstance.serverStats.maxLatency + 22 * zksInstance.sessionTracker.nextSessionId - 1.58530327179034624E18 == 0
1536 * zksInstance.serverStats.count - 1535 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId + 7.2059239626836992E16 == 0
19 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.totalLatency + 47 * zksInstance.sessionTracker.nextSessionId - 3.3867842624611942E18 == 0
1535 * zksInstance.serverStats.packetsReceived - 1536 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059239626835456E16 == 0
19 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.totalLatency + 47 * zksInstance.sessionTracker.nextSessionId - 3.3867842624611942E18 == 0
1536 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 1537 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 7.2059239626836992E16 == 0
1535 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 1536 * zksInstance.zkDb.dataTree.lastProcessedZxid - 7.2059239626836992E16 == 0
1535 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 1536 * zksInstance.zkDb.maxCommittedLog - 7.2059239626836992E16 == 0
19 * zksInstance.serverStats.packetsSent - 3 * zksInstance.serverStats.totalLatency + 47 * zksInstance.sessionTracker.nextSessionId - 3.3867842624611942E18 == 0
3 * zksInstance.serverStats.totalLatency - 47 * zksInstance.sessionTracker.nextSessionId - 19 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 3.3867842624611942E18 == 0
3 * zksInstance.serverStats.totalLatency - 47 * zksInstance.sessionTracker.nextSessionId - 19 * zksInstance.zkDb.dataTree.lastProcessedZxid + 3.3867842624611942E18 == 0
3 * zksInstance.serverStats.totalLatency - 47 * zksInstance.sessionTracker.nextSessionId - 19 * zksInstance.zkDb.maxCommittedLog + 3.3867842624611942E18 == 0
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.lastZxidSeen)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.lastZxidSeen)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.lastZxidSeen)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.lastZxidSeen)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.lastProcessedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.lastZxidSeen)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.lastProcessedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog)
zksInstance.self.zkDb.maxCommittedLog == 0 || zksInstance.self.zkDb.maxCommittedLog == 4294967297L
zksInstance.sessionTracker.currentTime == 25666000
zksInstance.sessionTracker.nextExpirationTime == 25668000
zksInstance.sessionTracker.nextSessionId == 216174464148897792L
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) != null
zksInstance.self.tick == 0 || zksInstance.self.tick == 8
zksInstance.sessionTracker.currentTime == 25716812 || zksInstance.sessionTracker.currentTime == 25734000
zksInstance.sessionTracker.nextExpirationTime == 25718000 || zksInstance.sessionTracker.nextExpirationTime == 25736000
zksInstance.sessionTracker.nextSessionId == 216174467490709504L
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 1 || daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 3
102416 * zksInstance.firstProcessor.zks.hzxid - 38406 * zksInstance.self.tick - zksInstance.txnLogFactory.txnLog.currentSize - 4.39873370587136E14 == 0
4 * zksInstance.firstProcessor.zks.hzxid - zksInstance.self.tick - 8 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.7179869184E10 == 0
4 * zksInstance.firstProcessor.zks.hzxid - zksInstance.self.tick - 8 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.7179869192E10 == 0
4 * zksInstance.firstProcessor.zks.hzxid + zksInstance.self.tick - 8 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1.7179869184E10 == 0
4 * zksInstance.firstProcessor.zks.hzxid + zksInstance.self.tick - 8 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1.7179869192E10 == 0
440081552 * zksInstance.firstProcessor.zks.hzxid - 76812 * zksInstance.sessionTracker.currentTime - 4297 * zksInstance.txnLogFactory.txnLog.currentSize - 1.89013389805315994E18 == 0
8594 * zksInstance.firstProcessor.zks.hzxid - zksInstance.sessionTracker.currentTime - 17188 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 3.6910923225012E13 == 0
8594 * zksInstance.firstProcessor.zks.hzxid - zksInstance.sessionTracker.currentTime - 17188 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 3.69109232422E13 == 0
8594 * zksInstance.firstProcessor.zks.hzxid + zksInstance.sessionTracker.currentTime - 17188 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 3.6910974658636E13 == 0
8594 * zksInstance.firstProcessor.zks.hzxid + zksInstance.sessionTracker.currentTime - 17188 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 3.6910974675824E13 == 0
38406000 * zksInstance.firstProcessor.zks.hzxid - 6401 * zksInstance.sessionTracker.nextExpirationTime - 375 * zksInstance.txnLogFactory.txnLog.currentSize - 1.64952349349258016E17 == 0
9000 * zksInstance.firstProcessor.zks.hzxid - zksInstance.sessionTracker.nextExpirationTime - 18000 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 3.8654679946E13 == 0
9000 * zksInstance.firstProcessor.zks.hzxid - zksInstance.sessionTracker.nextExpirationTime - 18000 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 3.8654679964E13 == 0
9000 * zksInstance.firstProcessor.zks.hzxid + zksInstance.sessionTracker.nextExpirationTime - 18000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 3.8654731382E13 == 0
9000 * zksInstance.firstProcessor.zks.hzxid + zksInstance.sessionTracker.nextExpirationTime - 18000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 3.86547314E13 == 0
204832 * zksInstance.firstProcessor.zks.hzxid + zksInstance.txnLogFactory.txnLog.currentSize - 307248 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 8.79746741174272E14 == 0
204832 * zksInstance.firstProcessor.zks.hzxid + zksInstance.txnLogFactory.txnLog.currentSize - 307248 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 8.7974674148152E14 == 0
3 * zksInstance.firstProcessor.zks.hzxid + 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 5 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
3 * zksInstance.firstProcessor.zks.hzxid + 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 5 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1.2884901893E10 == 0
3 * zksInstance.firstProcessor.zks.hzxid + 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 5 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1.2884901885E10 == 0
3 * zksInstance.firstProcessor.zks.hzxid + 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 5 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1.288490189E10 == 0
4.294967297E9 * zksInstance.self.tick + 4 * zksInstance.self.zkDb.maxCommittedLog - 1.7179869192E10 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1.7179869192E10 == 0
8594 * zksInstance.self.zkDb.maxCommittedLog + 4.294967297E9 * zksInstance.sessionTracker.currentTime - 3.6910948959012E13 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1.10452866523097168E17 == 0
8594 * zksInstance.self.zkDb.maxCommittedLog + 4.294967297E9 * zksInstance.sessionTracker.currentTime - 3.6910948959012E13 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1.10489777472056176E17 == 0
9000 * zksInstance.self.zkDb.maxCommittedLog + 4.294967297E9 * zksInstance.sessionTracker.nextExpirationTime - 3.8654705682E13 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1.10457968944246E17 == 0
9000 * zksInstance.self.zkDb.maxCommittedLog + 4.294967297E9 * zksInstance.sessionTracker.nextExpirationTime - 3.8654705682E13 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1.10496623649928E17 == 0
zksInstance.firstProcessor.zks.requestsInProcess == daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedEpoch == daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.self.electionAlg.proposedEpoch == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.count) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.count) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
zksInstance.self.bcVote.zxid == 0 || zksInstance.self.bcVote.zxid == 4294967299L
zksInstance.self.electionTimeTaken == 33 || zksInstance.self.electionTimeTaken == 216
zksInstance.self.myid == 2 || zksInstance.self.myid == 3
zksInstance.self.zkDb.minCommittedLog == 0 || zksInstance.self.zkDb.minCommittedLog == 4294967297L || zksInstance.self.zkDb.minCommittedLog == 8589934593L
zksInstance.serverStats.count == 0 || zksInstance.serverStats.count == 2
zksInstance.serverStats.minLatency == 0 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.packetsSent == 1 || zksInstance.serverStats.packetsSent == 3
zksInstance.sessionTracker.currentTime == 25644001
zksInstance.sessionTracker.nextExpirationTime == 25646000
zksInstance.sessionTracker.nextSessionId == 144116868679794688L || zksInstance.sessionTracker.nextSessionId == 216174462823497728L || zksInstance.sessionTracker.nextSessionId == 216174462823497729L
zksInstance.syncProcessor.randRoll == 7811
zksInstance.syncProcessor.requestOfDeath.createTime == 25643991
zksInstance.syncProcessor.zks.requestsInProcess == 0 || zksInstance.syncProcessor.zks.requestsInProcess == 1
zksInstance.zkDb.dataTree.scount == 0 || zksInstance.zkDb.dataTree.scount == 4
zksInstance.hzxid != zksInstance.self.bcVote.zxid
zksInstance.hzxid != zksInstance.self.electionAlg.proposedEpoch
zksInstance.hzxid % zksInstance.serverStats.packetsSent == 0
zksInstance.requestsInProcess <= zksInstance.self.bcVote.electionEpoch
zksInstance.requestsInProcess < zksInstance.self.myid
zksInstance.requestsInProcess <= zksInstance.self.zkDb.minCommittedLog
zksInstance.requestsInProcess < zksInstance.sessionTracker.serverId
zksInstance.self.OBSERVER_ID > zksInstance.self.qcm.threadCnt
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > zksInstance.self.qcm.threadCnt
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.acceptedEpoch <= zksInstance.self.bcVote.id
zksInstance.self.acceptedEpoch >= zksInstance.serverStats.count
zksInstance.self.bcVote.electionEpoch != zksInstance.self.bcVote.peerEpoch
zksInstance.self.bcVote.electionEpoch >= zksInstance.self.electionAlg.proposedEpoch
zksInstance.self.bcVote.electionEpoch != zksInstance.serverStats.count
zksInstance.self.bcVote.electionEpoch >= zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.bcVote.electionEpoch != zksInstance.zkDb.dataTree.scount
zksInstance.self.bcVote.electionEpoch >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.electionEpoch >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id >= zksInstance.self.bcVote.peerEpoch
zksInstance.self.bcVote.id <= zksInstance.self.myid
zksInstance.self.bcVote.id <= zksInstance.self.qcm.threadCnt
zksInstance.self.bcVote.id >= zksInstance.serverStats.count
zksInstance.self.bcVote.id >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.id >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.peerEpoch >= zksInstance.serverStats.count
zksInstance.self.bcVote.peerEpoch != zksInstance.serverStats.minLatency
zksInstance.self.bcVote.peerEpoch != zksInstance.serverStats.packetsSent
zksInstance.self.bcVote.peerEpoch > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.bcVote.peerEpoch >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.version < zksInstance.self.qcm.threadCnt
zksInstance.self.bcVote.zxid >= zksInstance.serverStats.count
zksInstance.self.bcVote.zxid >= zksInstance.serverStats.maxLatency
zksInstance.self.bcVote.zxid > zksInstance.sessionTracker.serverId
zksInstance.self.bcVote.zxid > zksInstance.syncProcessor.randRoll
zksInstance.self.bcVote.zxid > zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.self.bcVote.zxid > zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.bcVote.zxid > zksInstance.syncProcessor.snapCount
zksInstance.self.bcVote.zxid > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.bcVote.zxid > zksInstance.syncProcessor.zks.superSecret
zksInstance.self.bcVote.zxid > zksInstance.syncProcessor.zks.tickTime
zksInstance.self.bcVote.zxid >= zksInstance.zkDb.dataTree.scount
zksInstance.self.bcVote.zxid >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.zxid >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid))
daikon.Quant.eltsEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess))
zksInstance.self.electionAlg.finalizeWait > zksInstance.self.qcm.threadCnt
zksInstance.self.electionAlg.finalizeWait > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.electionAlg.maxNotificationInterval > zksInstance.self.qcm.threadCnt
zksInstance.self.electionAlg.proposedEpoch != zksInstance.serverStats.minLatency
zksInstance.self.electionAlg.proposedEpoch <= zksInstance.serverStats.packetsReceived
zksInstance.self.electionAlg.proposedEpoch <= zksInstance.serverStats.packetsSent
zksInstance.self.electionAlg.proposedEpoch > zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.electionAlg.proposedEpoch >= zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.electionAlg.proposedEpoch >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.electionTimeTaken > zksInstance.zkDb.dataTree.scount
zksInstance.self.electionType >= zksInstance.self.myid
zksInstance.self.electionType != zksInstance.self.qcm.threadCnt
zksInstance.self.electionType >= zksInstance.serverStats.packetsSent
zksInstance.self.electionType >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.electionType >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.myid <= zksInstance.self.qcm.threadCnt
zksInstance.self.myid > zksInstance.serverStats.count
zksInstance.self.myid >= zksInstance.serverStats.packetsSent
zksInstance.self.myid > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.myid > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.myid >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.myid >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.qcm.PACKETMAXSIZE > zksInstance.self.qcm.threadCnt
zksInstance.self.qcm.RECV_CAPACITY > zksInstance.self.qcm.threadCnt
zksInstance.self.qcm.RECV_CAPACITY > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.qcm.cnxTO > zksInstance.self.qcm.threadCnt
daikon.Quant.subsetOf(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.maxBuffer > zksInstance.self.qcm.threadCnt
daikon.Quant.subsetOf(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.socketTimeout > zksInstance.self.qcm.threadCnt
zksInstance.self.qcm.threadCnt < zksInstance.self.tickTime
zksInstance.self.qcm.threadCnt < zksInstance.self.zkDb.commitLogBuffer
zksInstance.self.qcm.threadCnt < zksInstance.self.zkDb.commitLogCount
zksInstance.self.qcm.threadCnt < zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.self.qcm.threadCnt >= zksInstance.serverStats.packetsReceived
zksInstance.self.qcm.threadCnt > zksInstance.serverStats.packetsSent
zksInstance.self.qcm.threadCnt < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.self.qcm.threadCnt > zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.qcm.threadCnt > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.self.qcm.threadCnt < zksInstance.syncProcessor.snapCount
zksInstance.self.qcm.threadCnt > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.qcm.threadCnt < zksInstance.syncProcessor.zks.superSecret
zksInstance.self.qcm.threadCnt < zksInstance.syncProcessor.zks.tickTime
zksInstance.self.qcm.threadCnt < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.self.qcm.threadCnt < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.self.qcm.threadCnt < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.self.qcm.threadCnt >= zksInstance.zkDb.dataTree.scount
zksInstance.self.zkDb.maxCommittedLog >= zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog % zksInstance.serverStats.packetsSent == 0
zksInstance.self.zkDb.minCommittedLog >= zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.serverStats.count < zksInstance.sessionTracker.serverId
zksInstance.serverStats.count < zksInstance.syncProcessor.zks.tickTime
zksInstance.serverStats.count <= zksInstance.zkDb.dataTree.scount
zksInstance.serverStats.packetsReceived >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) % zksInstance.serverStats.packetsReceived == 0
zksInstance.serverStats.packetsReceived >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.nextSessionId % zksInstance.serverStats.packetsSent == 0
zksInstance.serverStats.packetsSent <= zksInstance.sessionTracker.serverId
zksInstance.serverStats.packetsSent >= zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.serverStats.packetsSent < zksInstance.syncProcessor.zks.tickTime
zksInstance.serverStats.packetsSent != zksInstance.zkDb.dataTree.scount
zksInstance.serverStats.packetsSent >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.serverId > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.sessionTracker.serverId > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.serverId >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.serverId >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid))
zksInstance.syncProcessor.requestOfDeath.cxid >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.zks.requestsInProcess <= zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.syncProcessor.zks.requestsInProcess < zksInstance.zkDb.dataTree.scount
zksInstance.syncProcessor.zks.requestsInProcess <= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.requestsInProcess >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.zks.requestsInProcess <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.requestsInProcess <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.scount >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.scount >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.hzxid + 8.589934593E9 * zksInstance.self.acceptedEpoch - zksInstance.zkDb.dataTree.lastProcessedZxid - 8.589934593E9 == 0
61 * zksInstance.hzxid - 2.863311531E9 * zksInstance.self.electionTimeTaken - 61 * zksInstance.zkDb.dataTree.lastProcessedZxid + 6.18475290696E11 == 0
zksInstance.hzxid + 8.589934593E9 * zksInstance.self.myid - zksInstance.zkDb.dataTree.lastProcessedZxid - 1.7179869186E10 == 0
2 * zksInstance.hzxid + 8.589934593E9 * zksInstance.self.qcm.threadCnt - 2 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.7179869186E10 == 0
7.205759414370304E16 * zksInstance.self.acceptedEpoch + zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId + 7.2059274536091648E16 == 0
3.602879707185152E16 * zksInstance.self.bcVote.peerEpoch + zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId + 1.44116868679794688E17 == 0
2.19936685293568E14 * zksInstance.self.bcVote.peerEpoch + zksInstance.txnLogFactory.txnLog.currentSize - 102416 * zksInstance.zkDb.dataTree.lastProcessedZxid + 4.39873370587136E14 == 0
2.147483648E9 * zksInstance.self.bcVote.peerEpoch - zksInstance.zkDb.dataTree.lastProcessedZxid + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 4.294967296E9 == 0
2.147483648E9 * zksInstance.self.bcVote.peerEpoch - zksInstance.zkDb.dataTree.lastProcessedZxid + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 4.294967297E9 == 0
4.294967297E9 * zksInstance.self.bcVote.peerEpoch - 2 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 8.589934592E9 == 0
4.294967297E9 * zksInstance.self.bcVote.peerEpoch - 2 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 8.589934594E9 == 0
7.205759414370304E16 * zksInstance.self.electionAlg.proposedEpoch + zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId + 1.44116868679794688E17 == 0
4.39873370587136E14 * zksInstance.self.electionAlg.proposedEpoch + zksInstance.txnLogFactory.txnLog.currentSize - 102416 * zksInstance.zkDb.dataTree.lastProcessedZxid + 4.39873370587136E14 == 0
4.294967296E9 * zksInstance.self.electionAlg.proposedEpoch - zksInstance.zkDb.dataTree.lastProcessedZxid + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 4.294967296E9 == 0
4.294967296E9 * zksInstance.self.electionAlg.proposedEpoch - zksInstance.zkDb.dataTree.lastProcessedZxid + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 4.294967297E9 == 0
4.294967297E9 * zksInstance.self.electionAlg.proposedEpoch - zksInstance.zkDb.dataTree.lastProcessedZxid + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 4.294967296E9 == 0
4.294967297E9 * zksInstance.self.electionAlg.proposedEpoch - zksInstance.zkDb.dataTree.lastProcessedZxid + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 4.294967297E9 == 0
4.39873370587136E14 * zksInstance.self.electionTimeTaken - 183 * zksInstance.txnLogFactory.txnLog.currentSize + 18742128 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.75509474864267264E17 == 0
4.294967296E9 * zksInstance.self.electionTimeTaken + 183 * zksInstance.zkDb.dataTree.lastProcessedZxid - 183 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.713691951104E12 == 0
4.294967296E9 * zksInstance.self.electionTimeTaken + 183 * zksInstance.zkDb.dataTree.lastProcessedZxid - 183 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.713691951287E12 == 0
4.294967297E9 * zksInstance.self.electionTimeTaken + 183 * zksInstance.zkDb.dataTree.lastProcessedZxid - 183 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1.71369195132E12 == 0
4.294967297E9 * zksInstance.self.electionTimeTaken + 183 * zksInstance.zkDb.dataTree.lastProcessedZxid - 183 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1.713691951503E12 == 0
7.205759414370304E16 * zksInstance.self.myid + zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId + 1.680392388607E12 == 0
4.39873370587136E14 * zksInstance.self.myid + zksInstance.txnLogFactory.txnLog.currentSize - 102416 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4.39873370587136E14 == 0
4.294967296E9 * zksInstance.self.myid - zksInstance.zkDb.dataTree.lastProcessedZxid + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
4.294967296E9 * zksInstance.self.myid - zksInstance.zkDb.dataTree.lastProcessedZxid + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.294967295E9 == 0
4.294967297E9 * zksInstance.self.myid - zksInstance.zkDb.dataTree.lastProcessedZxid + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967298E9 == 0
4.294967297E9 * zksInstance.self.myid - zksInstance.zkDb.dataTree.lastProcessedZxid + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.294967297E9 == 0
3.602879707185152E16 * zksInstance.self.qcm.threadCnt + zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId + 7.2059274536091648E16 == 0
51208 * zksInstance.self.zkDb.maxCommittedLog - 4.294967297E9 * zksInstance.txnLogFactory.txnLog.currentSize + 2.19936685344776E14 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2.19936685344776E14 == 0
zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId + 1.801439853592576E16 * zksInstance.zkDb.dataTree.scount + 1.44116868679794688E17 == 0
3 * zksInstance.sessionTracker.nextSessionId - zksInstance.syncProcessor.zks.requestsInProcess - zksInstance.zkDb.dataTree.lastProcessedZxid - 6.4852337988055859E17 == 0
3 * zksInstance.sessionTracker.nextSessionId - zksInstance.syncProcessor.zks.requestsInProcess - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 6.4852338847049318E17 == 0
3 * zksInstance.sessionTracker.nextSessionId - zksInstance.syncProcessor.zks.requestsInProcess - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 6.4852338847049318E17 == 0
zksInstance.syncProcessor.zks.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 8.589934592E9 == 0
zksInstance.syncProcessor.zks.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 8.589934595E9 == 0
zksInstance.syncProcessor.zks.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 8.589934592E9 == 0
zksInstance.syncProcessor.zks.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 8.589934593E9 == 0
zksInstance.txnLogFactory.txnLog.currentSize - 102416 * zksInstance.zkDb.dataTree.lastProcessedZxid + 1.09968342646784E14 * zksInstance.zkDb.dataTree.scount + 4.39873370587136E14 == 0
zksInstance.zkDb.dataTree.lastProcessedZxid - 1073741824 * zksInstance.zkDb.dataTree.scount - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.zkDb.dataTree.lastProcessedZxid - 1073741824 * zksInstance.zkDb.dataTree.scount - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.294967297E9 == 0
4 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4.294967297E9 * zksInstance.zkDb.dataTree.scount - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1.7179869184E10 == 0
4 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4.294967297E9 * zksInstance.zkDb.dataTree.scount - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1.7179869188E10 == 0
zksInstance.firstProcessor.failCreate == zksInstance.self.authInitialized
zksInstance.firstProcessor.failCreate == zksInstance.self.electionAlg.stop
zksInstance.firstProcessor.finished == zksInstance.self.electionAlg.stop
zksInstance.self.authInitialized == zksInstance.self.qcm.listenOnAllIPs
zksInstance.self.authInitialized == zksInstance.self.qcm.tcpKeepAlive
zksInstance.self.authInitialized == zksInstance.self.quorumLearnerSaslAuthRequired
zksInstance.self.authInitialized == zksInstance.self.quorumListenOnAllIPs
zksInstance.self.authInitialized == zksInstance.self.quorumServerSaslAuthRequired
zksInstance.self.bcVote.electionEpoch == zksInstance.sessionTracker.serverId
zksInstance.self.bcVote.peerEpoch == zksInstance.sessionTracker.serverId
zksInstance.self.bcVote.version == zksInstance.self.bcVote.zxid
zksInstance.self.currentVote.id == zksInstance.self.electionType
zksInstance.self.currentVote.id == zksInstance.self.initLimit
zksInstance.self.currentVote.id == zksInstance.self.syncLimit
zksInstance.self.currentVote.id == daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.self.currentVote.id == daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.self.currentVote.version == zksInstance.self.currentVote.zxid
zksInstance.self.currentVote.version == zksInstance.self.end_fle
zksInstance.self.currentVote.version == zksInstance.self.qcm.connectionThreadCnt
zksInstance.self.currentVote.version == zksInstance.self.start_fle
zksInstance.self.currentVote.version == zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.currentVote.version == zksInstance.txnLogFactory.txnLog.dbId
zksInstance.self.electionAlg.proposedEpoch == zksInstance.sessionTracker.serverId
zksInstance.self.electionAlg.stop == zksInstance.self.qcm.shutdown
zksInstance.self.electionAlg.stop == zksInstance.txnLogFactory.snapLog.close
zksInstance.self.running == zksInstance.sessionTracker.running
zksInstance.serverCnxnFactory.maxClientCnxns == zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout
zksInstance.serverCnxnFactory.maxClientCnxns == zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.serverCnxnFactory.zkServer.hzxid == zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout == zksInstance.serverCnxnFactory.zkServer.minSessionTimeout
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout == zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.serverCnxnFactory.zkServer.tickTime == zksInstance.syncProcessor.zks.tickTime
zksInstance.superSecret == zksInstance.syncProcessor.zks.superSecret
zksInstance.syncProcessor.requestOfDeath.cxid == zksInstance.zkDb.dataTree.scount
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1) == daikon.Quant.getElement_Object(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
zksInstance.firstProcessor.zks.requestsInProcess >= 0
zksInstance.self.authInitialized == false
zksInstance.self.bcVote.version == 0
zksInstance.self.currentVote.id == 3
zksInstance.self.currentVote.version == 0
zksInstance.self.electionAlg.proposedEpoch == 0 || zksInstance.self.electionAlg.proposedEpoch == 1
zksInstance.self.electionAlg.proposedLeader == 1 || zksInstance.self.electionAlg.proposedLeader == 3
zksInstance.self.electionAlg.proposedZxid == 0 || zksInstance.self.electionAlg.proposedZxid == 4294967309L || zksInstance.self.electionAlg.proposedZxid == 4294967667L
zksInstance.self.electionTimeTaken == 3 || zksInstance.self.electionTimeTaken == 5 || zksInstance.self.electionTimeTaken == 203
daikon.Quant.eltsNotEqual(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, null)
zksInstance.self.qcm.threadCnt == 0 || zksInstance.self.qcm.threadCnt == 2 || zksInstance.self.qcm.threadCnt == 4
zksInstance.serverCnxnFactory.maxClientCnxns == -1
zksInstance.serverCnxnFactory.zkServer.hzxid >= 0
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout == -1
zksInstance.serverCnxnFactory.zkServer.tickTime == 2000
zksInstance.serverStats.packetsReceived >= 0
zksInstance.serverStats.packetsSent >= 0
zksInstance.sessionTracker.serverId == 1
zksInstance.syncProcessor.randRoll == 41415 || zksInstance.syncProcessor.randRoll == 49703
zksInstance.zkDb.dataTree.scount == 0 || zksInstance.zkDb.dataTree.scount == 3
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 1 || daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 2
daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) == 1 || daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) == 2
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 1 || daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 2
daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) == 1 || daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) == 3
daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) == 1
daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) == 1 || daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) == 2
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) != null
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1) != null
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) != null
zksInstance.firstProcessor.zks.hzxid > zksInstance.maxSessionTimeout
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.currentVote.id
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.currentVote.version
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.electionAlg.proposedEpoch
zksInstance.self.electionAlg.proposedEpoch % zksInstance.firstProcessor.zks.hzxid == 0
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.electionAlg.proposedLeader
zksInstance.firstProcessor.zks.hzxid > zksInstance.self.electionAlg.proposedZxid
zksInstance.firstProcessor.zks.hzxid > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.firstProcessor.zks.hzxid > zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout
zksInstance.firstProcessor.zks.hzxid > zksInstance.serverCnxnFactory.zkServer.tickTime
zksInstance.firstProcessor.zks.hzxid > zksInstance.superSecret
zksInstance.firstProcessor.zks.hzxid > zksInstance.zkDb.dataTree.scount
zksInstance.firstProcessor.zks.hzxid >= zksInstance.zkDb.minCommittedLog
zksInstance.firstProcessor.zks.hzxid > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.hzxid > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.self.electionAlg.proposedEpoch
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.self.electionAlg.proposedLeader
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.self.electionAlg.proposedZxid
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.self.qcm.threadCnt
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.firstProcessor.zks.maxSessionTimeout < zksInstance.zkDb.dataTree.scount
zksInstance.firstProcessor.zks.maxSessionTimeout < daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.maxSessionTimeout <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.requestsInProcess > zksInstance.maxSessionTimeout
zksInstance.firstProcessor.zks.requestsInProcess != zksInstance.self.currentVote.id
zksInstance.firstProcessor.zks.requestsInProcess >= zksInstance.self.currentVote.version
zksInstance.firstProcessor.zks.requestsInProcess >= zksInstance.self.electionAlg.proposedEpoch
zksInstance.firstProcessor.zks.requestsInProcess != zksInstance.self.electionAlg.proposedLeader
zksInstance.firstProcessor.zks.requestsInProcess >= zksInstance.self.electionAlg.proposedZxid
zksInstance.firstProcessor.zks.requestsInProcess > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.firstProcessor.zks.requestsInProcess > zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.serverCnxnFactory.zkServer.tickTime
zksInstance.firstProcessor.zks.requestsInProcess - 26 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.firstProcessor.zks.requestsInProcess < zksInstance.superSecret
zksInstance.firstProcessor.zks.requestsInProcess != zksInstance.zkDb.dataTree.scount
zksInstance.firstProcessor.zks.requestsInProcess <= zksInstance.zkDb.maxCommittedLog
zksInstance.firstProcessor.zks.requestsInProcess <= zksInstance.zkDb.minCommittedLog
zksInstance.firstProcessor.zks.requestsInProcess >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.requestsInProcess >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.requestsInProcess >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.superSecret > zksInstance.self.electionAlg.proposedEpoch
zksInstance.firstProcessor.zks.superSecret > zksInstance.self.electionAlg.proposedLeader
zksInstance.firstProcessor.zks.superSecret > zksInstance.self.electionAlg.proposedZxid
zksInstance.firstProcessor.zks.superSecret > zksInstance.self.qcm.threadCnt
zksInstance.firstProcessor.zks.superSecret < zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.firstProcessor.zks.superSecret > zksInstance.zkDb.dataTree.scount
zksInstance.firstProcessor.zks.superSecret > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.superSecret > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.tickTime > zksInstance.self.electionAlg.proposedEpoch
zksInstance.firstProcessor.zks.tickTime > zksInstance.self.electionAlg.proposedLeader
zksInstance.firstProcessor.zks.tickTime > zksInstance.self.electionAlg.proposedZxid
zksInstance.firstProcessor.zks.tickTime > zksInstance.self.qcm.threadCnt
zksInstance.firstProcessor.zks.tickTime < zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.firstProcessor.zks.tickTime > zksInstance.zkDb.dataTree.scount
zksInstance.firstProcessor.zks.tickTime > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.tickTime > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.hzxid != zksInstance.self.currentVote.id
zksInstance.hzxid >= zksInstance.self.currentVote.version
zksInstance.hzxid != zksInstance.self.electionAlg.proposedZxid
zksInstance.hzxid > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.hzxid > zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout
zksInstance.hzxid != zksInstance.serverCnxnFactory.zkServer.tickTime
zksInstance.hzxid != zksInstance.superSecret
zksInstance.hzxid >= zksInstance.zkDb.dataTree.scount
zksInstance.hzxid != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.hzxid >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.hzxid != daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.maxSessionTimeout < zksInstance.self.electionAlg.proposedEpoch
zksInstance.maxSessionTimeout < zksInstance.self.qcm.threadCnt
zksInstance.maxSessionTimeout < zksInstance.self.tick
zksInstance.maxSessionTimeout < zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.maxSessionTimeout < zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.maxSessionTimeout < zksInstance.sessionTracker.currentTime
zksInstance.maxSessionTimeout < zksInstance.sessionTracker.nextExpirationTime
zksInstance.maxSessionTimeout < zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.maxSessionTimeout < zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.maxSessionTimeout < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.maxSessionTimeout < zksInstance.zkDb.dataTree.scount
zksInstance.maxSessionTimeout < zksInstance.zkDb.maxCommittedLog
zksInstance.maxSessionTimeout <= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess != zksInstance.self.currentVote.id
zksInstance.requestsInProcess >= zksInstance.self.currentVote.version
zksInstance.requestsInProcess > zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout
zksInstance.requestsInProcess < zksInstance.serverCnxnFactory.zkServer.tickTime
zksInstance.requestsInProcess <= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.requestsInProcess <= zksInstance.zkDb.maxCommittedLog
zksInstance.requestsInProcess <= zksInstance.zkDb.minCommittedLog
zksInstance.requestsInProcess >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.self.OBSERVER_ID > zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.OBSERVER_ID > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != zksInstance.serverStats.packetsSent
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.acceptedEpoch >= zksInstance.self.electionAlg.proposedEpoch
zksInstance.self.acceptedEpoch != zksInstance.self.qcm.threadCnt
zksInstance.self.acceptedEpoch != zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.acceptedEpoch >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.acceptedEpoch >= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.self.acceptedEpoch >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.acceptedEpoch != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.self.acceptedEpoch >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.acceptedEpoch >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.electionEpoch <= zksInstance.self.electionAlg.proposedLeader
zksInstance.self.bcVote.electionEpoch != zksInstance.self.electionAlg.proposedZxid
zksInstance.self.bcVote.electionEpoch != zksInstance.self.qcm.threadCnt
zksInstance.self.bcVote.electionEpoch != zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.bcVote.electionEpoch < zksInstance.syncProcessor.randRoll
zksInstance.self.bcVote.electionEpoch >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.electionEpoch >= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.electionEpoch >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.electionEpoch != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.electionEpoch >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.electionEpoch >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.id > zksInstance.self.bcVote.peerEpoch
zksInstance.self.bcVote.id > zksInstance.self.electionAlg.proposedEpoch
zksInstance.self.bcVote.id <= zksInstance.self.electionTimeTaken
zksInstance.self.bcVote.id != zksInstance.self.qcm.threadCnt
zksInstance.self.bcVote.id != zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.bcVote.id < zksInstance.serverStats.minLatency
zksInstance.self.bcVote.id >= zksInstance.zkDb.dataTree.scount
zksInstance.self.bcVote.id > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.peerEpoch >= zksInstance.self.currentVote.version
zksInstance.self.bcVote.peerEpoch != zksInstance.self.qcm.threadCnt
zksInstance.self.bcVote.peerEpoch > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.self.bcVote.peerEpoch != zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.bcVote.peerEpoch > zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout
zksInstance.self.bcVote.peerEpoch < zksInstance.serverCnxnFactory.zkServer.tickTime
zksInstance.self.bcVote.peerEpoch % zksInstance.sessionTracker.currentTime == 0
zksInstance.self.bcVote.peerEpoch % zksInstance.sessionTracker.nextExpirationTime == 0
zksInstance.self.bcVote.peerEpoch < zksInstance.superSecret
zksInstance.syncProcessor.zks.requestsInProcess % zksInstance.self.bcVote.peerEpoch == 0
zksInstance.self.bcVote.peerEpoch <= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.bcVote.peerEpoch != zksInstance.zkDb.dataTree.scount
zksInstance.self.bcVote.peerEpoch != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.peerEpoch >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.peerEpoch >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.peerEpoch <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.version <= zksInstance.self.qcm.threadCnt
zksInstance.self.bcVote.version <= zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.bcVote.version <= zksInstance.serverStats.packetsReceived
zksInstance.self.bcVote.version <= zksInstance.serverStats.packetsSent
zksInstance.self.bcVote.version <= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.version >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.version <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.currentVote.id >= zksInstance.self.electionAlg.proposedLeader
zksInstance.self.currentVote.id != zksInstance.self.electionAlg.proposedZxid
zksInstance.self.currentVote.id <= zksInstance.self.electionTimeTaken
zksInstance.self.currentVote.id != zksInstance.self.qcm.threadCnt
zksInstance.self.currentVote.id >= zksInstance.self.tick
zksInstance.self.currentVote.id != zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.currentVote.id != zksInstance.self.zkDb.minCommittedLog
zksInstance.self.currentVote.id != zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.currentVote.id != zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.currentVote.id != zksInstance.serverStats.count
zksInstance.self.currentVote.id != zksInstance.serverStats.maxLatency
zksInstance.self.currentVote.id < zksInstance.serverStats.minLatency
zksInstance.self.currentVote.id != zksInstance.serverStats.totalLatency
zksInstance.self.currentVote.id < zksInstance.sessionTracker.currentTime
zksInstance.self.currentVote.id < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.currentVote.id < zksInstance.sessionTracker.nextSessionId
zksInstance.self.currentVote.id < zksInstance.syncProcessor.randRoll
zksInstance.self.currentVote.id != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.currentVote.id != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.currentVote.id != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.currentVote.id < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.currentVote.id >= zksInstance.zkDb.dataTree.scount
zksInstance.self.currentVote.id != zksInstance.zkDb.maxCommittedLog
zksInstance.self.currentVote.id != zksInstance.zkDb.minCommittedLog
zksInstance.self.currentVote.id >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.currentVote.id >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.currentVote.version <= zksInstance.self.electionAlg.proposedEpoch
zksInstance.self.currentVote.version < zksInstance.self.electionAlg.proposedLeader
zksInstance.self.currentVote.version <= zksInstance.self.electionAlg.proposedZxid
zksInstance.self.currentVote.version < zksInstance.self.electionTimeTaken
zksInstance.self.currentVote.version <= zksInstance.self.qcm.threadCnt
zksInstance.self.currentVote.version <= zksInstance.self.tick
zksInstance.self.currentVote.version <= zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.currentVote.version <= zksInstance.self.zkDb.minCommittedLog
zksInstance.self.currentVote.version <= zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.currentVote.version <= zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.currentVote.version <= zksInstance.serverStats.count
zksInstance.self.currentVote.version <= zksInstance.serverStats.maxLatency
zksInstance.self.currentVote.version < zksInstance.serverStats.minLatency
zksInstance.self.currentVote.version <= zksInstance.serverStats.packetsReceived
zksInstance.self.currentVote.version <= zksInstance.serverStats.packetsSent
zksInstance.self.currentVote.version <= zksInstance.serverStats.totalLatency
zksInstance.self.currentVote.version < zksInstance.sessionTracker.currentTime
zksInstance.self.currentVote.version < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.currentVote.version < zksInstance.sessionTracker.nextSessionId
zksInstance.self.currentVote.version < zksInstance.syncProcessor.randRoll
zksInstance.self.currentVote.version <= zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.currentVote.version <= zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.currentVote.version <= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.currentVote.version < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.currentVote.version <= zksInstance.zkDb.dataTree.scount
zksInstance.self.currentVote.version <= zksInstance.zkDb.maxCommittedLog
zksInstance.self.currentVote.version <= zksInstance.zkDb.minCommittedLog
zksInstance.self.currentVote.version <= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.currentVote.version <= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.currentVote.version <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.currentVote.version <= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.currentVote.version <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.currentVote.version <= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.currentVote.version <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.currentVote.version >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.self.currentVote.version <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.finalizeWait != zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.electionAlg.finalizeWait > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.maxNotificationInterval != zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.electionAlg.maxNotificationInterval > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedEpoch <= zksInstance.self.electionAlg.proposedLeader
zksInstance.self.electionAlg.proposedEpoch != zksInstance.self.qcm.threadCnt
zksInstance.self.electionAlg.proposedEpoch <= zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.electionAlg.proposedEpoch <= zksInstance.self.zkDb.minCommittedLog
zksInstance.self.electionAlg.proposedEpoch > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.self.electionAlg.proposedEpoch != zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.electionAlg.proposedEpoch > zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout
zksInstance.self.electionAlg.proposedEpoch < zksInstance.serverCnxnFactory.zkServer.tickTime
zksInstance.self.electionAlg.proposedEpoch < zksInstance.serverStats.minLatency
zksInstance.self.electionAlg.proposedEpoch % zksInstance.sessionTracker.currentTime == 0
zksInstance.self.electionAlg.proposedEpoch < zksInstance.sessionTracker.currentTime
zksInstance.self.electionAlg.proposedEpoch % zksInstance.sessionTracker.nextExpirationTime == 0
zksInstance.self.electionAlg.proposedEpoch < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.electionAlg.proposedEpoch < zksInstance.superSecret
zksInstance.syncProcessor.zks.requestsInProcess % zksInstance.self.electionAlg.proposedEpoch == 0
zksInstance.self.electionAlg.proposedEpoch != zksInstance.zkDb.dataTree.scount
zksInstance.self.electionAlg.proposedEpoch <= zksInstance.zkDb.maxCommittedLog
zksInstance.self.electionAlg.proposedEpoch <= zksInstance.zkDb.minCommittedLog
zksInstance.self.electionAlg.proposedEpoch >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.electionAlg.proposedEpoch != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedEpoch <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedEpoch >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.electionAlg.proposedEpoch >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedEpoch <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedLeader != zksInstance.self.qcm.threadCnt
zksInstance.self.electionAlg.proposedLeader >= zksInstance.self.tick
zksInstance.self.electionAlg.proposedLeader > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.self.electionAlg.proposedLeader != zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.electionAlg.proposedLeader > zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout
zksInstance.self.electionAlg.proposedLeader < zksInstance.serverCnxnFactory.zkServer.tickTime
zksInstance.self.electionAlg.proposedLeader != zksInstance.serverStats.count
zksInstance.self.electionAlg.proposedLeader < zksInstance.serverStats.minLatency
zksInstance.self.electionAlg.proposedLeader < zksInstance.sessionTracker.currentTime
zksInstance.self.electionAlg.proposedLeader < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.electionAlg.proposedLeader < zksInstance.superSecret
zksInstance.syncProcessor.zks.requestsInProcess % zksInstance.self.electionAlg.proposedLeader == 0
zksInstance.self.electionAlg.proposedLeader != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.electionAlg.proposedLeader >= zksInstance.zkDb.dataTree.scount
zksInstance.self.electionAlg.proposedLeader != zksInstance.zkDb.maxCommittedLog
zksInstance.self.electionAlg.proposedLeader != zksInstance.zkDb.minCommittedLog
zksInstance.self.electionAlg.proposedLeader >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.electionAlg.proposedLeader != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedLeader != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedLeader >= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.self.electionAlg.proposedLeader >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.electionAlg.proposedLeader >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedLeader >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedLeader >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.self.electionAlg.proposedZxid > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.self.electionAlg.proposedZxid != zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.electionAlg.proposedZxid > zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout
zksInstance.self.electionAlg.proposedZxid != zksInstance.serverCnxnFactory.zkServer.tickTime
zksInstance.self.electionAlg.proposedZxid % zksInstance.sessionTracker.currentTime == 0
zksInstance.self.electionAlg.proposedZxid < zksInstance.sessionTracker.currentTime
zksInstance.self.electionAlg.proposedZxid % zksInstance.sessionTracker.nextExpirationTime == 0
zksInstance.self.electionAlg.proposedZxid < zksInstance.sessionTracker.nextExpirationTime
zksInstance.self.electionAlg.proposedZxid > zksInstance.sessionTracker.serverId
zksInstance.self.electionAlg.proposedZxid != zksInstance.superSecret
zksInstance.self.electionAlg.proposedZxid > zksInstance.syncProcessor.randRoll
zksInstance.self.electionAlg.proposedZxid > zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.self.electionAlg.proposedZxid > zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.electionAlg.proposedZxid > zksInstance.syncProcessor.snapCount
zksInstance.self.electionAlg.proposedZxid > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.electionAlg.proposedZxid > zksInstance.syncProcessor.zks.superSecret
zksInstance.self.electionAlg.proposedZxid > zksInstance.syncProcessor.zks.tickTime
zksInstance.self.electionAlg.proposedZxid != zksInstance.zkDb.dataTree.scount
zksInstance.self.electionAlg.proposedZxid <= zksInstance.zkDb.maxCommittedLog
zksInstance.self.electionAlg.proposedZxid != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedZxid >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.electionAlg.proposedZxid >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.electionTimeTaken > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.self.electionTimeTaken != zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.electionTimeTaken > zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout
zksInstance.self.electionTimeTaken < zksInstance.serverCnxnFactory.zkServer.tickTime
zksInstance.self.electionTimeTaken < zksInstance.superSecret
zksInstance.self.electionTimeTaken != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.electionTimeTaken > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.electionTimeTaken >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.electionTimeTaken > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.qcm.PACKETMAXSIZE != zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.qcm.PACKETMAXSIZE > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.RECV_CAPACITY != zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.qcm.RECV_CAPACITY > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.cnxTO != zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.qcm.cnxTO < zksInstance.syncProcessor.randRoll
zksInstance.self.qcm.cnxTO > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
daikon.Quant.memberOf(daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) , zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE )
zksInstance.self.qcm.maxBuffer != zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.qcm.maxBuffer > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.socketTimeout != zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.qcm.socketTimeout < zksInstance.syncProcessor.randRoll
zksInstance.self.qcm.socketTimeout > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.self.qcm.threadCnt != zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.qcm.threadCnt > zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout
zksInstance.self.qcm.threadCnt < zksInstance.serverCnxnFactory.zkServer.tickTime
zksInstance.self.qcm.threadCnt < zksInstance.serverStats.minLatency
zksInstance.self.qcm.threadCnt != zksInstance.sessionTracker.serverId
zksInstance.self.qcm.threadCnt < zksInstance.superSecret
zksInstance.self.qcm.threadCnt >= zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.self.qcm.threadCnt >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt >= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.self.qcm.threadCnt >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt != daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.self.tick > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.self.tick <= zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.tick > zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout
zksInstance.self.tick < zksInstance.serverCnxnFactory.zkServer.tickTime
zksInstance.self.tick <= zksInstance.serverStats.count
zksInstance.self.tick < zksInstance.serverStats.minLatency
zksInstance.self.tick <= zksInstance.serverStats.packetsReceived
zksInstance.self.tick <= zksInstance.serverStats.packetsSent
zksInstance.self.tick < zksInstance.superSecret
zksInstance.self.tick % zksInstance.syncProcessor.randRoll == 0
zksInstance.self.tick <= zksInstance.zkDb.dataTree.scount
zksInstance.self.tick <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.tick <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.tick <= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.tick >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.self.tickTime != zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.sessionTracker.nextExpirationTime % zksInstance.self.tickTime == 0
zksInstance.self.tickTime < zksInstance.syncProcessor.randRoll
zksInstance.self.tickTime > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.commitLogBuffer != zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.zkDb.commitLogBuffer > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.commitLogCount != zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.zkDb.commitLogCount > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.self.zkDb.maxCommittedLog > zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout
zksInstance.self.zkDb.maxCommittedLog >= zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.zkDb.maxCommittedLog != zksInstance.serverCnxnFactory.zkServer.tickTime
zksInstance.self.zkDb.maxCommittedLog > zksInstance.sessionTracker.serverId
zksInstance.self.zkDb.maxCommittedLog != zksInstance.superSecret
zksInstance.self.zkDb.maxCommittedLog > zksInstance.syncProcessor.randRoll
zksInstance.self.zkDb.maxCommittedLog > zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.self.zkDb.maxCommittedLog > zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.syncProcessor.requestOfDeath.cxid % zksInstance.self.zkDb.maxCommittedLog == 0
zksInstance.self.zkDb.maxCommittedLog > zksInstance.syncProcessor.snapCount
zksInstance.self.zkDb.maxCommittedLog > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.zkDb.maxCommittedLog > zksInstance.syncProcessor.zks.superSecret
zksInstance.self.zkDb.maxCommittedLog > zksInstance.syncProcessor.zks.tickTime
zksInstance.self.zkDb.maxCommittedLog != zksInstance.zkDb.dataTree.scount
zksInstance.self.zkDb.maxCommittedLog >= zksInstance.zkDb.minCommittedLog
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.self.zkDb.minCommittedLog > zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout
zksInstance.self.zkDb.minCommittedLog >= zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.zkDb.minCommittedLog != zksInstance.serverCnxnFactory.zkServer.tickTime
zksInstance.self.zkDb.minCommittedLog > zksInstance.sessionTracker.serverId
zksInstance.self.zkDb.minCommittedLog != zksInstance.superSecret
zksInstance.self.zkDb.minCommittedLog > zksInstance.syncProcessor.randRoll
zksInstance.self.zkDb.minCommittedLog > zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.self.zkDb.minCommittedLog > zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.syncProcessor.requestOfDeath.cxid % zksInstance.self.zkDb.minCommittedLog == 0
zksInstance.self.zkDb.minCommittedLog > zksInstance.syncProcessor.snapCount
zksInstance.self.zkDb.minCommittedLog > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.zkDb.minCommittedLog > zksInstance.syncProcessor.zks.superSecret
zksInstance.self.zkDb.minCommittedLog > zksInstance.syncProcessor.zks.tickTime
zksInstance.self.zkDb.minCommittedLog != zksInstance.zkDb.dataTree.scount
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.serverStats.count
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.serverStats.maxLatency
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.serverStats.totalLatency
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.syncProcessor.randRoll
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.zkDb.dataTree.scount
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.zkDb.maxCommittedLog
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.zkDb.minCommittedLog
zksInstance.serverCnxnFactory.maxClientCnxns <= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.maxClientCnxns <= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.maxClientCnxns <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.maxClientCnxns <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.maxClientCnxns <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
daikon.Quant.subsetOf(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.hzxid > zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout
zksInstance.serverCnxnFactory.zkServer.hzxid != zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.serverCnxnFactory.zkServer.hzxid != zksInstance.serverCnxnFactory.zkServer.tickTime
zksInstance.serverCnxnFactory.zkServer.hzxid != zksInstance.serverStats.minLatency
zksInstance.serverCnxnFactory.zkServer.hzxid > zksInstance.sessionTracker.currentTime
zksInstance.serverCnxnFactory.zkServer.hzxid > zksInstance.sessionTracker.nextExpirationTime
zksInstance.serverCnxnFactory.zkServer.hzxid < zksInstance.sessionTracker.nextSessionId
zksInstance.serverCnxnFactory.zkServer.hzxid < zksInstance.sessionTracker.serverId
zksInstance.serverCnxnFactory.zkServer.hzxid != zksInstance.superSecret
zksInstance.serverCnxnFactory.zkServer.hzxid % zksInstance.syncProcessor.randRoll == 0
zksInstance.serverCnxnFactory.zkServer.hzxid < zksInstance.syncProcessor.randRoll
zksInstance.serverCnxnFactory.zkServer.hzxid % zksInstance.syncProcessor.requestOfDeath.createTime == 0
zksInstance.serverCnxnFactory.zkServer.hzxid < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.serverCnxnFactory.zkServer.hzxid == zksInstance.syncProcessor.requestOfDeath.cxid*zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.syncProcessor.requestOfDeath.cxid == zksInstance.serverCnxnFactory.zkServer.hzxid*zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.serverCnxnFactory.zkServer.hzxid > zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.serverCnxnFactory.zkServer.hzxid % zksInstance.syncProcessor.snapCount == 0
zksInstance.serverCnxnFactory.zkServer.hzxid < zksInstance.syncProcessor.snapCount
zksInstance.serverCnxnFactory.zkServer.hzxid <= zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.serverCnxnFactory.zkServer.hzxid % zksInstance.syncProcessor.zks.superSecret == 0
zksInstance.serverCnxnFactory.zkServer.hzxid < zksInstance.syncProcessor.zks.superSecret
zksInstance.serverCnxnFactory.zkServer.hzxid % zksInstance.syncProcessor.zks.tickTime == 0
zksInstance.serverCnxnFactory.zkServer.hzxid < zksInstance.syncProcessor.zks.tickTime
zksInstance.serverCnxnFactory.zkServer.hzxid != zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.serverCnxnFactory.zkServer.hzxid != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.serverCnxnFactory.zkServer.hzxid != zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.serverCnxnFactory.zkServer.hzxid != zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.serverCnxnFactory.zkServer.hzxid >= zksInstance.zkDb.dataTree.scount
zksInstance.serverCnxnFactory.zkServer.hzxid != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.hzxid != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.hzxid != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.hzxid != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.hzxid >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.hzxid >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.hzxid >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.hzxid != daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout < zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout < zksInstance.serverStats.count
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout < zksInstance.serverStats.maxLatency
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout < zksInstance.serverStats.minLatency
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout < zksInstance.serverStats.packetsReceived
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout < zksInstance.serverStats.packetsSent
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout < zksInstance.serverStats.totalLatency
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout < zksInstance.sessionTracker.currentTime
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout < zksInstance.sessionTracker.nextExpirationTime
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout < zksInstance.sessionTracker.nextSessionId
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout < zksInstance.syncProcessor.randRoll
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout < zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout < zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout < zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout < zksInstance.zkDb.dataTree.scount
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout < zksInstance.zkDb.maxCommittedLog
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout < zksInstance.zkDb.minCommittedLog
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout <= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout < daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout <= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout <= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.requestsInProcess < zksInstance.serverCnxnFactory.zkServer.tickTime
zksInstance.serverCnxnFactory.zkServer.requestsInProcess <= zksInstance.serverStats.packetsReceived
zksInstance.serverCnxnFactory.zkServer.requestsInProcess < zksInstance.superSecret
zksInstance.serverCnxnFactory.zkServer.requestsInProcess <= zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.serverCnxnFactory.zkServer.requestsInProcess <= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverCnxnFactory.zkServer.requestsInProcess <= zksInstance.zkDb.maxCommittedLog
zksInstance.serverCnxnFactory.zkServer.requestsInProcess <= zksInstance.zkDb.minCommittedLog
zksInstance.serverCnxnFactory.zkServer.requestsInProcess >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.superSecret > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.tickTime != zksInstance.serverStats.count
zksInstance.serverCnxnFactory.zkServer.tickTime > zksInstance.serverStats.maxLatency
zksInstance.serverCnxnFactory.zkServer.tickTime != zksInstance.serverStats.minLatency
zksInstance.serverCnxnFactory.zkServer.tickTime != zksInstance.serverStats.packetsReceived
zksInstance.serverCnxnFactory.zkServer.tickTime != zksInstance.serverStats.packetsSent
zksInstance.serverCnxnFactory.zkServer.tickTime != zksInstance.serverStats.totalLatency
zksInstance.serverCnxnFactory.zkServer.tickTime < zksInstance.sessionTracker.currentTime
zksInstance.serverCnxnFactory.zkServer.tickTime < zksInstance.sessionTracker.nextExpirationTime
zksInstance.sessionTracker.nextExpirationTime % zksInstance.serverCnxnFactory.zkServer.tickTime == 0
zksInstance.serverCnxnFactory.zkServer.tickTime < zksInstance.sessionTracker.nextSessionId
zksInstance.serverCnxnFactory.zkServer.tickTime < zksInstance.syncProcessor.randRoll
zksInstance.serverCnxnFactory.zkServer.tickTime > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.serverCnxnFactory.zkServer.tickTime != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.serverCnxnFactory.zkServer.tickTime != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverCnxnFactory.zkServer.tickTime < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverCnxnFactory.zkServer.tickTime > zksInstance.zkDb.dataTree.scount
zksInstance.serverCnxnFactory.zkServer.tickTime != zksInstance.zkDb.maxCommittedLog
zksInstance.serverCnxnFactory.zkServer.tickTime != zksInstance.zkDb.minCommittedLog
zksInstance.serverCnxnFactory.zkServer.tickTime > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.tickTime > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.tickTime > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.tickTime > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.tickTime > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.tickTime > daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.tickTime > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.tickTime > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.serverStats.count <= zksInstance.serverStats.packetsReceived
zksInstance.serverStats.count >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.count != daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.maxLatency >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.minLatency > zksInstance.sessionTracker.serverId
zksInstance.serverStats.minLatency > zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.serverStats.minLatency != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.serverStats.minLatency > zksInstance.zkDb.dataTree.scount
zksInstance.serverStats.minLatency > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.minLatency > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.minLatency > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsReceived >= zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.serverStats.packetsReceived >= zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.serverStats.packetsReceived >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsReceived >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsReceived >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.packetsSent >= zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.serverStats.packetsSent >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.totalLatency >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.currentTime % daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) == 0
zksInstance.sessionTracker.currentTime > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextExpirationTime % daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) == 0
zksInstance.sessionTracker.nextExpirationTime > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextSessionId > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.serverId > zksInstance.zkDb.dataTree.scount
zksInstance.sessionTracker.serverId < zksInstance.zkDb.maxCommittedLog
zksInstance.sessionTracker.serverId < zksInstance.zkDb.minCommittedLog
zksInstance.sessionTracker.serverId >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.serverId != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.serverId >= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.serverId <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.serverId >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.serverId % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 == 0
zksInstance.sessionTracker.serverId == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1*daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.serverId <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.serverId >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1))
zksInstance.superSecret > zksInstance.syncProcessor.randRoll
zksInstance.superSecret > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.superSecret != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.superSecret < zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.superSecret != zksInstance.zkDb.maxCommittedLog
zksInstance.superSecret != zksInstance.zkDb.minCommittedLog
zksInstance.superSecret > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.superSecret > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.superSecret > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.superSecret > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.randRoll > zksInstance.syncProcessor.zks.tickTime
zksInstance.syncProcessor.randRoll < zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.syncProcessor.randRoll < zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.syncProcessor.randRoll < zksInstance.zkDb.maxCommittedLog
zksInstance.syncProcessor.randRoll < zksInstance.zkDb.minCommittedLog
zksInstance.syncProcessor.randRoll > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.randRoll % daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 == 0
daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) % zksInstance.syncProcessor.randRoll == 0
zksInstance.syncProcessor.randRoll % daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 == 0
zksInstance.syncProcessor.requestOfDeath.createTime < zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.syncProcessor.requestOfDeath.createTime < zksInstance.zkDb.maxCommittedLog
zksInstance.syncProcessor.requestOfDeath.createTime < zksInstance.zkDb.minCommittedLog
zksInstance.syncProcessor.requestOfDeath.createTime > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) % zksInstance.syncProcessor.requestOfDeath.createTime == 0
zksInstance.syncProcessor.requestOfDeath.createTime % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 == 0
zksInstance.syncProcessor.requestOfDeath.cxid % zksInstance.txnLogFactory.txnLog.currentSize == 0
zksInstance.syncProcessor.requestOfDeath.cxid < zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.syncProcessor.requestOfDeath.cxid % zksInstance.txnLogFactory.txnLog.lastZxidSeen == 0
zksInstance.syncProcessor.requestOfDeath.cxid < zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.syncProcessor.requestOfDeath.cxid % zksInstance.zkDb.maxCommittedLog == 0
zksInstance.syncProcessor.requestOfDeath.cxid < zksInstance.zkDb.maxCommittedLog
zksInstance.syncProcessor.requestOfDeath.cxid % zksInstance.zkDb.minCommittedLog == 0
zksInstance.syncProcessor.requestOfDeath.cxid < zksInstance.zkDb.minCommittedLog
zksInstance.syncProcessor.requestOfDeath.cxid <= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.requestOfDeath.cxid != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.requestOfDeath.cxid <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == zksInstance.syncProcessor.requestOfDeath.cxid*zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.syncProcessor.requestOfDeath.cxid == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)*daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.requestOfDeath.cxid % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 == 0
zksInstance.syncProcessor.requestOfDeath.cxid >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.requestOfDeath.cxid <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.requestOfDeath.zxid <= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.requestOfDeath.zxid < daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.snapCount < zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.syncProcessor.snapCount < zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.syncProcessor.snapCount < zksInstance.zkDb.maxCommittedLog
zksInstance.syncProcessor.snapCount < zksInstance.zkDb.minCommittedLog
zksInstance.syncProcessor.snapCount > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) % zksInstance.syncProcessor.snapCount == 0
zksInstance.syncProcessor.snapCount % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 == 0
zksInstance.syncProcessor.zks.requestsInProcess < zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.syncProcessor.zks.requestsInProcess < zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.syncProcessor.zks.requestsInProcess >= zksInstance.zkDb.dataTree.scount
zksInstance.syncProcessor.zks.requestsInProcess < zksInstance.zkDb.maxCommittedLog
zksInstance.syncProcessor.zks.requestsInProcess < zksInstance.zkDb.minCommittedLog
zksInstance.syncProcessor.zks.requestsInProcess % daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 == 0
zksInstance.syncProcessor.zks.requestsInProcess != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.requestsInProcess >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.zks.requestsInProcess != daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.superSecret < zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.syncProcessor.zks.superSecret < zksInstance.zkDb.maxCommittedLog
zksInstance.syncProcessor.zks.superSecret < zksInstance.zkDb.minCommittedLog
zksInstance.syncProcessor.zks.superSecret > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) % zksInstance.syncProcessor.zks.superSecret == 0
zksInstance.syncProcessor.zks.superSecret % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 == 0
zksInstance.syncProcessor.zks.superSecret > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.tickTime < zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.syncProcessor.zks.tickTime < zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.syncProcessor.zks.tickTime < zksInstance.zkDb.maxCommittedLog
zksInstance.syncProcessor.zks.tickTime < zksInstance.zkDb.minCommittedLog
zksInstance.syncProcessor.zks.tickTime > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) % zksInstance.syncProcessor.zks.tickTime == 0
zksInstance.syncProcessor.zks.tickTime % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 == 0
zksInstance.syncProcessor.zks.tickTime > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize <= zksInstance.zkDb.maxCommittedLog
zksInstance.txnLogFactory.txnLog.currentSize <= zksInstance.zkDb.minCommittedLog
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.currentSize >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.lastZxidSeen >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.preAllocSize > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.scount != zksInstance.zkDb.maxCommittedLog
zksInstance.zkDb.dataTree.scount != zksInstance.zkDb.minCommittedLog
zksInstance.zkDb.dataTree.scount != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.dataTree.scount >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.scount >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.dataTree.scount != daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) <= daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) <= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.firstProcessor.zks.requestsInProcess - 4 * zksInstance.serverStats.count - 4.294967296E9 == 0
5 * zksInstance.firstProcessor.zks.hzxid - 10 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.serverStats.maxLatency - 2.147483648E10 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.firstProcessor.zks.requestsInProcess - 4 * zksInstance.serverStats.packetsReceived - 4.294967292E9 == 0
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.firstProcessor.zks.requestsInProcess - 4 * zksInstance.serverStats.packetsSent - 4.294967292E9 == 0
5 * zksInstance.firstProcessor.zks.hzxid - 10 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.serverStats.totalLatency - 2.147483648E10 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.firstProcessor.zks.requestsInProcess - 4 * zksInstance.sessionTracker.nextSessionId + 8.6469784728554701E17 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.firstProcessor.zks.requestsInProcess - 4 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.firstProcessor.zks.requestsInProcess - 4 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
3 * zksInstance.firstProcessor.zks.hzxid + 6 * zksInstance.firstProcessor.zks.requestsInProcess - 4 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
3 * zksInstance.firstProcessor.zks.hzxid + 6 * zksInstance.firstProcessor.zks.requestsInProcess - 4 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.2884901892E10 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.firstProcessor.zks.requestsInProcess - 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.firstProcessor.zks.requestsInProcess - 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.firstProcessor.zks.requestsInProcess - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.firstProcessor.zks.requestsInProcess - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
3 * zksInstance.firstProcessor.zks.hzxid + 6 * zksInstance.firstProcessor.zks.requestsInProcess - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
3 * zksInstance.firstProcessor.zks.hzxid + 6 * zksInstance.firstProcessor.zks.requestsInProcess - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 1.2884901892E10 == 0
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.requestsInProcess - 4 * zksInstance.serverStats.count - 4.294967296E9 == 0
5 * zksInstance.firstProcessor.zks.hzxid - 10 * zksInstance.requestsInProcess - zksInstance.serverStats.maxLatency - 2.147483648E10 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.requestsInProcess - 4 * zksInstance.serverStats.packetsReceived - 4.294967292E9 == 0
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.requestsInProcess - 4 * zksInstance.serverStats.packetsSent - 4.294967292E9 == 0
5 * zksInstance.firstProcessor.zks.hzxid - 10 * zksInstance.requestsInProcess - zksInstance.serverStats.totalLatency - 2.147483648E10 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.requestsInProcess - 4 * zksInstance.sessionTracker.nextSessionId + 8.6469784728554701E17 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.requestsInProcess - 4 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.requestsInProcess - 4 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
3 * zksInstance.firstProcessor.zks.hzxid + 6 * zksInstance.requestsInProcess - 4 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
3 * zksInstance.firstProcessor.zks.hzxid + 6 * zksInstance.requestsInProcess - 4 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.2884901892E10 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.requestsInProcess - 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.requestsInProcess - 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.requestsInProcess - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.requestsInProcess - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
3 * zksInstance.firstProcessor.zks.hzxid + 6 * zksInstance.requestsInProcess - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
3 * zksInstance.firstProcessor.zks.hzxid + 6 * zksInstance.requestsInProcess - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 1.2884901892E10 == 0
zksInstance.firstProcessor.zks.hzxid + 10 * zksInstance.self.qcm.threadCnt - 2 * zksInstance.sessionTracker.nextSessionId + 4.3234892149528979E17 == 0
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 4 * zksInstance.serverStats.count - 4.294967296E9 == 0
5 * zksInstance.firstProcessor.zks.hzxid - 10 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - zksInstance.serverStats.maxLatency - 2.147483648E10 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 4 * zksInstance.serverStats.packetsReceived - 4.294967292E9 == 0
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 4 * zksInstance.serverStats.packetsSent - 4.294967292E9 == 0
5 * zksInstance.firstProcessor.zks.hzxid - 10 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - zksInstance.serverStats.totalLatency - 2.147483648E10 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 4 * zksInstance.sessionTracker.nextSessionId + 8.6469784728554701E17 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 4 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 4 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
3 * zksInstance.firstProcessor.zks.hzxid + 6 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 4 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
3 * zksInstance.firstProcessor.zks.hzxid + 6 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 4 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.2884901892E10 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid + 2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
3 * zksInstance.firstProcessor.zks.hzxid + 6 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
3 * zksInstance.firstProcessor.zks.hzxid + 6 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 1.2884901892E10 == 0
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverStats.count - 2 * zksInstance.serverStats.packetsReceived - 4.294967294E9 == 0
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId + 4.3234892149528986E17 == 0
102416 * zksInstance.firstProcessor.zks.hzxid - 307248 * zksInstance.serverStats.count - zksInstance.txnLogFactory.txnLog.currentSize - 4.39873370587136E14 == 0
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverStats.count - 2 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverStats.count - 2 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.294967298E9 == 0
3 * zksInstance.firstProcessor.zks.hzxid - 6 * zksInstance.serverStats.count - 2 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
3 * zksInstance.firstProcessor.zks.hzxid - 6 * zksInstance.serverStats.count - 2 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.288490189E10 == 0
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverStats.count - 2 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverStats.count - 2 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.294967298E9 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.serverStats.count - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.serverStats.count - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.294967297E9 == 0
3 * zksInstance.firstProcessor.zks.hzxid - 6 * zksInstance.serverStats.count - 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
3 * zksInstance.firstProcessor.zks.hzxid - 6 * zksInstance.serverStats.count - 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 1.288490189E10 == 0
10 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.maxLatency - 20 * zksInstance.serverStats.packetsReceived - 4.294967294E10 == 0
10 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.maxLatency - 20 * zksInstance.sessionTracker.nextSessionId + 4.3234892149528986E18 == 0
512080 * zksInstance.firstProcessor.zks.hzxid - 76812 * zksInstance.serverStats.maxLatency - 5 * zksInstance.txnLogFactory.txnLog.currentSize - 2.19936685293568E15 == 0
10 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.maxLatency - 20 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E10 == 0
10 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.maxLatency - 20 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.294967298E10 == 0
30 * zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.serverStats.maxLatency - 20 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.2884901888E11 == 0
30 * zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.serverStats.maxLatency - 20 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.288490189E11 == 0
10 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.maxLatency - 20 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E10 == 0
10 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.maxLatency - 20 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.294967298E10 == 0
10 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.maxLatency - 20 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967296E10 == 0
10 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.maxLatency - 20 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.294967298E10 == 0
30 * zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.serverStats.maxLatency - 20 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 1.2884901888E11 == 0
30 * zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.serverStats.maxLatency - 20 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 1.288490189E11 == 0
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.serverStats.packetsSent - 4.294967292E9 == 0
10 * zksInstance.firstProcessor.zks.hzxid - 20 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 4.294967294E10 == 0
102416 * zksInstance.firstProcessor.zks.hzxid - 307248 * zksInstance.serverStats.packetsReceived - zksInstance.txnLogFactory.txnLog.currentSize - 4.39873370279888E14 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.serverStats.packetsReceived - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967293E9 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.serverStats.packetsReceived - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.294967294E9 == 0
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 4.3234892149528986E17 == 0
102416 * zksInstance.firstProcessor.zks.hzxid - 307248 * zksInstance.serverStats.packetsSent - zksInstance.txnLogFactory.txnLog.currentSize - 4.39873370279888E14 == 0
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverStats.packetsSent - 2 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967294E9 == 0
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverStats.packetsSent - 2 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.294967296E9 == 0
3 * zksInstance.firstProcessor.zks.hzxid - 6 * zksInstance.serverStats.packetsSent - 2 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.2884901882E10 == 0
3 * zksInstance.firstProcessor.zks.hzxid - 6 * zksInstance.serverStats.packetsSent - 2 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.2884901884E10 == 0
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverStats.packetsSent - 2 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967294E9 == 0
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.serverStats.packetsSent - 2 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.serverStats.packetsSent - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967293E9 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.serverStats.packetsSent - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.294967294E9 == 0
3 * zksInstance.firstProcessor.zks.hzxid - 6 * zksInstance.serverStats.packetsSent - 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 1.2884901882E10 == 0
3 * zksInstance.firstProcessor.zks.hzxid - 6 * zksInstance.serverStats.packetsSent - 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 1.2884901884E10 == 0
10 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.totalLatency - 20 * zksInstance.sessionTracker.nextSessionId + 4.3234892149528986E18 == 0
512080 * zksInstance.firstProcessor.zks.hzxid - 76812 * zksInstance.serverStats.totalLatency - 5 * zksInstance.txnLogFactory.txnLog.currentSize - 2.19936685293568E15 == 0
10 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.totalLatency - 20 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E10 == 0
10 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.totalLatency - 20 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.294967298E10 == 0
30 * zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.serverStats.totalLatency - 20 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.2884901888E11 == 0
30 * zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.serverStats.totalLatency - 20 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.288490189E11 == 0
10 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.totalLatency - 20 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E10 == 0
10 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.totalLatency - 20 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.294967298E10 == 0
10 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.totalLatency - 20 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967296E10 == 0
10 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.totalLatency - 20 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.294967298E10 == 0
30 * zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.serverStats.totalLatency - 20 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 1.2884901888E11 == 0
30 * zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.serverStats.totalLatency - 20 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 1.288490189E11 == 0
31 * zksInstance.firstProcessor.zks.hzxid + 20 * zksInstance.sessionTracker.nextSessionId - 41 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4.3234892149528986E18 == 0
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.sessionTracker.nextSessionId + 20 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) + 4.3234892149528979E17 == 0
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.sessionTracker.nextSessionId + 20 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 + 4.3234892149528986E17 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 6.4852338439041843E17 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 6.4852338439041843E17 == 0
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 4.3234892149528986E17 == 0
zksInstance.firstProcessor.zks.hzxid - 2 * zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 4.3234892149528986E17 == 0
6401 * zksInstance.firstProcessor.zks.hzxid + 268435456 * zksInstance.txnLogFactory.txnLog.currentSize - 6401 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 2.7492085661696E13 == 0
6401 * zksInstance.firstProcessor.zks.hzxid + 268435456 * zksInstance.txnLogFactory.txnLog.currentSize - 6401 * zksInstance.zkDb.maxCommittedLog - 2.7492085661696E13 == 0
102416 * zksInstance.firstProcessor.zks.hzxid - zksInstance.txnLogFactory.txnLog.currentSize - 307248 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.39873370587136E14 == 0
204832 * zksInstance.firstProcessor.zks.hzxid + zksInstance.txnLogFactory.txnLog.currentSize - 307248 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 8.79746741174272E14 == 0
204832 * zksInstance.firstProcessor.zks.hzxid + zksInstance.txnLogFactory.txnLog.currentSize - 307248 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 8.7974674148152E14 == 0
102416 * zksInstance.firstProcessor.zks.hzxid - zksInstance.txnLogFactory.txnLog.currentSize - 307248 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.39873370587136E14 == 0
102416 * zksInstance.firstProcessor.zks.hzxid - zksInstance.txnLogFactory.txnLog.currentSize - 307248 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.39873370894384E14 == 0
204832 * zksInstance.firstProcessor.zks.hzxid + zksInstance.txnLogFactory.txnLog.currentSize - 307248 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 8.79746741174272E14 == 0
204832 * zksInstance.firstProcessor.zks.hzxid + zksInstance.txnLogFactory.txnLog.currentSize - 307248 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 8.7974674148152E14 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.294967297E9 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967299E9 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.294967297E9 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967299E9 == 0
zksInstance.firstProcessor.zks.hzxid - 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.hzxid + 4 * zksInstance.serverStats.count + 4.294967296E9 == 0
10 * zksInstance.firstProcessor.zks.requestsInProcess - 5 * zksInstance.hzxid + zksInstance.serverStats.maxLatency + 2.147483648E10 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.hzxid - 4 * zksInstance.serverStats.packetsReceived - 4.294967292E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.hzxid + 4 * zksInstance.serverStats.packetsSent + 4.294967292E9 == 0
10 * zksInstance.firstProcessor.zks.requestsInProcess - 5 * zksInstance.hzxid + zksInstance.serverStats.totalLatency + 2.147483648E10 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 8.6469784728554701E17 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.hzxid - 4 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.hzxid - 4 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
6 * zksInstance.firstProcessor.zks.requestsInProcess + 3 * zksInstance.hzxid - 4 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
6 * zksInstance.firstProcessor.zks.requestsInProcess + 3 * zksInstance.hzxid - 4 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.2884901892E10 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.hzxid - 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.hzxid - 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.hzxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.hzxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
6 * zksInstance.firstProcessor.zks.requestsInProcess + 3 * zksInstance.hzxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
6 * zksInstance.firstProcessor.zks.requestsInProcess + 3 * zksInstance.hzxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 1.2884901892E10 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.serverCnxnFactory.zkServer.hzxid + 4 * zksInstance.serverStats.count + 4.294967296E9 == 0
10 * zksInstance.firstProcessor.zks.requestsInProcess - 5 * zksInstance.serverCnxnFactory.zkServer.hzxid + zksInstance.serverStats.maxLatency + 2.147483648E10 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.serverCnxnFactory.zkServer.hzxid - 4 * zksInstance.serverStats.packetsReceived - 4.294967292E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.serverCnxnFactory.zkServer.hzxid + 4 * zksInstance.serverStats.packetsSent + 4.294967292E9 == 0
10 * zksInstance.firstProcessor.zks.requestsInProcess - 5 * zksInstance.serverCnxnFactory.zkServer.hzxid + zksInstance.serverStats.totalLatency + 2.147483648E10 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.serverCnxnFactory.zkServer.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 8.6469784728554701E17 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.serverCnxnFactory.zkServer.hzxid - 4 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.serverCnxnFactory.zkServer.hzxid - 4 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
6 * zksInstance.firstProcessor.zks.requestsInProcess + 3 * zksInstance.serverCnxnFactory.zkServer.hzxid - 4 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
6 * zksInstance.firstProcessor.zks.requestsInProcess + 3 * zksInstance.serverCnxnFactory.zkServer.hzxid - 4 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.2884901892E10 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.serverCnxnFactory.zkServer.hzxid - 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.serverCnxnFactory.zkServer.hzxid - 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.serverCnxnFactory.zkServer.hzxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.serverCnxnFactory.zkServer.hzxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
6 * zksInstance.firstProcessor.zks.requestsInProcess + 3 * zksInstance.serverCnxnFactory.zkServer.hzxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
6 * zksInstance.firstProcessor.zks.requestsInProcess + 3 * zksInstance.serverCnxnFactory.zkServer.hzxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 1.2884901892E10 == 0
zksInstance.firstProcessor.zks.requestsInProcess - 26 * zksInstance.serverStats.count + 26 * zksInstance.sessionTracker.nextSessionId - 5.620536035273343E18 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + 4 * zksInstance.serverStats.count - zksInstance.zkDb.dataTree.lastProcessedZxid + 4.294967296E9 == 0
10 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.serverStats.maxLatency - 5 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2.147483648E10 == 0
zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 2.16174462895128576E17 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess - 4 * zksInstance.serverStats.packetsReceived + zksInstance.zkDb.dataTree.lastProcessedZxid - 4.294967292E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + 4 * zksInstance.serverStats.packetsSent - zksInstance.zkDb.dataTree.lastProcessedZxid + 4.294967292E9 == 0
10 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.serverStats.totalLatency - 5 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2.147483648E10 == 0
101 * zksInstance.firstProcessor.zks.requestsInProcess + 2 * zksInstance.sessionTracker.currentTime - 2626 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 51293376 == 0
101 * zksInstance.firstProcessor.zks.requestsInProcess + 2 * zksInstance.sessionTracker.currentTime - 2626 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 51296002 == 0
1000 * zksInstance.firstProcessor.zks.requestsInProcess + 13 * zksInstance.sessionTracker.nextExpirationTime - 26000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 333424000 == 0
1000 * zksInstance.firstProcessor.zks.requestsInProcess + 13 * zksInstance.sessionTracker.nextExpirationTime - 26000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 333450000 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess - 4 * zksInstance.sessionTracker.nextSessionId + zksInstance.zkDb.dataTree.lastProcessedZxid + 8.6469784728554701E17 == 0
zksInstance.firstProcessor.zks.requestsInProcess + 26 * zksInstance.sessionTracker.nextSessionId - 26 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 5.620536035273343E18 == 0
zksInstance.firstProcessor.zks.requestsInProcess + 26 * zksInstance.sessionTracker.nextSessionId - 26 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 5.620536035273343E18 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
6 * zksInstance.firstProcessor.zks.requestsInProcess + 3 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
6 * zksInstance.firstProcessor.zks.requestsInProcess + 3 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.2884901892E10 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
2 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
6 * zksInstance.firstProcessor.zks.requestsInProcess + 3 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
6 * zksInstance.firstProcessor.zks.requestsInProcess + 3 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 1.2884901892E10 == 0
zksInstance.requestsInProcess - 3.7469948757051965E18 * zksInstance.self.bcVote.peerEpoch - 26 * zksInstance.sessionTracker.nextSessionId + 5.620536035273343E18 == 0
zksInstance.requestsInProcess - 3.7469948757051965E18 * zksInstance.self.electionAlg.proposedEpoch - 26 * zksInstance.sessionTracker.nextSessionId + 5.620536035273343E18 == 0
zksInstance.requestsInProcess + 1.87349743785259827E18 * zksInstance.self.electionAlg.proposedLeader - 26 * zksInstance.sessionTracker.nextSessionId + 4.372171554816E13 == 0
2 * zksInstance.requestsInProcess + 4 * zksInstance.serverStats.count - zksInstance.zkDb.dataTree.lastProcessedZxid + 4.294967296E9 == 0
10 * zksInstance.requestsInProcess + zksInstance.serverStats.maxLatency - 5 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2.147483648E10 == 0
2 * zksInstance.requestsInProcess - 4 * zksInstance.serverStats.packetsReceived + zksInstance.zkDb.dataTree.lastProcessedZxid - 4.294967292E9 == 0
2 * zksInstance.requestsInProcess + 4 * zksInstance.serverStats.packetsSent - zksInstance.zkDb.dataTree.lastProcessedZxid + 4.294967292E9 == 0
10 * zksInstance.requestsInProcess + zksInstance.serverStats.totalLatency - 5 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2.147483648E10 == 0
101 * zksInstance.requestsInProcess + 2 * zksInstance.sessionTracker.currentTime - 2626 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 51293376 == 0
101 * zksInstance.requestsInProcess + 2 * zksInstance.sessionTracker.currentTime - 2626 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 51296002 == 0
1000 * zksInstance.requestsInProcess + 13 * zksInstance.sessionTracker.nextExpirationTime - 26000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 333424000 == 0
1000 * zksInstance.requestsInProcess + 13 * zksInstance.sessionTracker.nextExpirationTime - 26000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 333450000 == 0
3 * zksInstance.requestsInProcess - 78 * zksInstance.sessionTracker.nextSessionId + 3.7469948757051965E18 * zksInstance.zkDb.dataTree.scount + 5.6206234787044393E18 == 0
2266768 * zksInstance.requestsInProcess + 15 * zksInstance.syncProcessor.randRoll - 20720 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 8.8991729439015E13 == 0
4222736 * zksInstance.requestsInProcess + 25 * zksInstance.syncProcessor.randRoll - 41440 * zksInstance.zkDb.dataTree.lastProcessedZxid + 1.77983459085105E14 == 0
4222736 * zksInstance.requestsInProcess + 25 * zksInstance.syncProcessor.randRoll - 41440 * zksInstance.zkDb.maxCommittedLog + 1.77983459085105E14 == 0
2 * zksInstance.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
2 * zksInstance.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
6 * zksInstance.requestsInProcess + 3 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
6 * zksInstance.requestsInProcess + 3 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.2884901892E10 == 0
2 * zksInstance.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
2 * zksInstance.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
2 * zksInstance.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
2 * zksInstance.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
6 * zksInstance.requestsInProcess + 3 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
6 * zksInstance.requestsInProcess + 3 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 1.2884901892E10 == 0
3.7469948745908224E18 * zksInstance.self.bcVote.peerEpoch - zksInstance.serverCnxnFactory.zkServer.requestsInProcess + 26 * zksInstance.sessionTracker.nextSessionId - 5.620536035273343E18 == 0
1.44115187527122944E17 * zksInstance.self.bcVote.peerEpoch + zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 2.16174462895128576E17 == 0
1.44115187527122944E17 * zksInstance.self.bcVote.peerEpoch + zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 2.16174462895128576E17 == 0
1.44115187527122944E17 * zksInstance.self.bcVote.peerEpoch + zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 2.16174462895128576E17 == 0
1.44115187527122944E17 * zksInstance.self.bcVote.peerEpoch + zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 2.16174462895128576E17 == 0
3.7469948745908224E18 * zksInstance.self.electionAlg.proposedEpoch - zksInstance.serverCnxnFactory.zkServer.requestsInProcess + 26 * zksInstance.sessionTracker.nextSessionId - 5.620536035273343E18 == 0
1.44115187527122944E17 * zksInstance.self.electionAlg.proposedEpoch + zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 2.16174462895128576E17 == 0
1.44115187527122944E17 * zksInstance.self.electionAlg.proposedEpoch + zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 2.16174462895128576E17 == 0
1.44115187527122944E17 * zksInstance.self.electionAlg.proposedEpoch + zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 2.16174462895128576E17 == 0
1.44115187527122944E17 * zksInstance.self.electionAlg.proposedEpoch + zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 2.16174462895128576E17 == 0
1.8734974372954112E18 * zksInstance.self.electionAlg.proposedLeader + zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 26 * zksInstance.sessionTracker.nextSessionId + 4.3723387109376E13 == 0
7.2057593763561472E16 * zksInstance.self.electionAlg.proposedLeader - zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 1.68160444416E12 == 0
7.2057593763561472E16 * zksInstance.self.electionAlg.proposedLeader - zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 1.681604444161E12 == 0
7.2057593763561472E16 * zksInstance.self.electionAlg.proposedLeader - zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 1.68160444416E12 == 0
7.2057593763561472E16 * zksInstance.self.electionAlg.proposedLeader - zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 1.681604444161E12 == 0
125 * zksInstance.self.electionAlg.proposedZxid - 8950 * zksInstance.self.zkDb.maxCommittedLog + 364802 * zksInstance.syncProcessor.zks.requestsInProcess + 3.7903089706025E13 == 0
75 * zksInstance.self.electionAlg.proposedZxid + 195826 * zksInstance.syncProcessor.zks.requestsInProcess - 4475 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 1.889785776165E13 == 0
125 * zksInstance.self.electionAlg.proposedZxid + 364802 * zksInstance.syncProcessor.zks.requestsInProcess - 8950 * zksInstance.zkDb.dataTree.lastProcessedZxid + 3.7903089706025E13 == 0
125 * zksInstance.self.electionAlg.proposedZxid + 364802 * zksInstance.syncProcessor.zks.requestsInProcess - 8950 * zksInstance.zkDb.maxCommittedLog + 3.7903089706025E13 == 0
125 * zksInstance.self.electionTimeTaken + 50 * zksInstance.self.zkDb.maxCommittedLog - 2038 * zksInstance.syncProcessor.zks.requestsInProcess - 2.14748383975E11 == 0
75 * zksInstance.self.electionTimeTaken - 1094 * zksInstance.syncProcessor.zks.requestsInProcess + 25 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 1.0737419205E11 == 0
125 * zksInstance.self.electionTimeTaken - 2038 * zksInstance.syncProcessor.zks.requestsInProcess + 50 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2.14748383975E11 == 0
125 * zksInstance.self.electionTimeTaken - 2038 * zksInstance.syncProcessor.zks.requestsInProcess + 50 * zksInstance.zkDb.maxCommittedLog - 2.14748383975E11 == 0
125 * zksInstance.self.qcm.threadCnt - 100 * zksInstance.self.zkDb.maxCommittedLog + 4076 * zksInstance.syncProcessor.zks.requestsInProcess + 4.294967667E11 == 0
1313 * zksInstance.self.qcm.threadCnt - 2 * zksInstance.sessionTracker.currentTime + 2626 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 51288124 == 0
1000 * zksInstance.self.qcm.threadCnt - zksInstance.sessionTracker.nextExpirationTime + 2000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 25644000 == 0
75 * zksInstance.self.qcm.threadCnt + 2188 * zksInstance.syncProcessor.zks.requestsInProcess - 50 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2.1474838335E11 == 0
125 * zksInstance.self.qcm.threadCnt + 4076 * zksInstance.syncProcessor.zks.requestsInProcess - 100 * zksInstance.zkDb.dataTree.lastProcessedZxid + 4.294967667E11 == 0
125 * zksInstance.self.qcm.threadCnt + 4076 * zksInstance.syncProcessor.zks.requestsInProcess - 100 * zksInstance.zkDb.maxCommittedLog + 4.294967667E11 == 0
1071513600 * zksInstance.self.zkDb.maxCommittedLog - 125 * zksInstance.sessionTracker.nextSessionId - 4.3674894336E10 * zksInstance.syncProcessor.zks.requestsInProcess + 4.4052931542499328E18 == 0
24864 * zksInstance.self.zkDb.maxCommittedLog - 3 * zksInstance.syncProcessor.randRoll - 16576 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 3.5596691899851E13 == 0
150 * zksInstance.self.zkDb.maxCommittedLog - 644 * zksInstance.syncProcessor.zks.requestsInProcess - 125 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 1.07374191675E11 == 0
8288 * zksInstance.self.zkDb.minCommittedLog - 107744 * zksInstance.serverStats.packetsReceived - 13 * zksInstance.syncProcessor.randRoll - 3.5596688311397E13 == 0
8288 * zksInstance.self.zkDb.minCommittedLog - 107744 * zksInstance.serverStats.packetsSent - 13 * zksInstance.syncProcessor.randRoll - 3.5596688311397E13 == 0
1656 * zksInstance.self.zkDb.minCommittedLog + 4.294967297E9 * zksInstance.sessionTracker.currentTime - 7.112465843832E12 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1.10151686236362336E17 == 0
1656 * zksInstance.self.zkDb.minCommittedLog + 4.294967297E9 * zksInstance.sessionTracker.currentTime - 7.112465843832E12 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1.10158798702206176E17 == 0
2000 * zksInstance.self.zkDb.minCommittedLog + 4.294967297E9 * zksInstance.sessionTracker.nextExpirationTime - 8.589934594E12 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1.10157321233456E17 == 0
2000 * zksInstance.self.zkDb.minCommittedLog + 4.294967297E9 * zksInstance.sessionTracker.nextExpirationTime - 8.589934594E12 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1.1016591116805E17 == 0
153328 * zksInstance.self.zkDb.minCommittedLog + 9 * zksInstance.syncProcessor.randRoll - 12432 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 6.05143708051007E14 == 0
95312 * zksInstance.self.zkDb.minCommittedLog + 5 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.dataTree.lastProcessedZxid - 3.73765231194643E14 == 0
95312 * zksInstance.self.zkDb.minCommittedLog + 5 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.maxCommittedLog - 3.73765231194643E14 == 0
2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + 4 * zksInstance.serverStats.count - zksInstance.zkDb.dataTree.lastProcessedZxid + 4.294967296E9 == 0
10 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + zksInstance.serverStats.maxLatency - 5 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2.147483648E10 == 0
2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 4 * zksInstance.serverStats.packetsReceived + zksInstance.zkDb.dataTree.lastProcessedZxid - 4.294967292E9 == 0
2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + 4 * zksInstance.serverStats.packetsSent - zksInstance.zkDb.dataTree.lastProcessedZxid + 4.294967292E9 == 0
10 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + zksInstance.serverStats.totalLatency - 5 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2.147483648E10 == 0
101 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + 2 * zksInstance.sessionTracker.currentTime - 2626 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 51293376 == 0
101 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + 2 * zksInstance.sessionTracker.currentTime - 2626 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 51296002 == 0
1000 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + 13 * zksInstance.sessionTracker.nextExpirationTime - 26000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 333424000 == 0
1000 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + 13 * zksInstance.sessionTracker.nextExpirationTime - 26000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 333450000 == 0
3 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess - 78 * zksInstance.sessionTracker.nextSessionId + 3.7469948745908224E18 * zksInstance.zkDb.dataTree.scount + 5.6206234820475617E18 == 0
2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
6 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + 3 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
6 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + 3 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.2884901892E10 == 0
2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
6 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + 3 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
6 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + 3 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 1.2884901892E10 == 0
2 * zksInstance.serverStats.count + 2 * zksInstance.serverStats.packetsReceived - zksInstance.zkDb.dataTree.lastProcessedZxid + 4.294967294E9 == 0
307248 * zksInstance.serverStats.count + zksInstance.txnLogFactory.txnLog.currentSize - 102416 * zksInstance.zkDb.dataTree.lastProcessedZxid + 4.39873370587136E14 == 0
2 * zksInstance.serverStats.count - zksInstance.zkDb.dataTree.lastProcessedZxid + 2 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 4.294967296E9 == 0
2 * zksInstance.serverStats.count - zksInstance.zkDb.dataTree.lastProcessedZxid + 2 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 4.294967298E9 == 0
6 * zksInstance.serverStats.count - 3 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 1.2884901888E10 == 0
6 * zksInstance.serverStats.count - 3 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 1.288490189E10 == 0
2 * zksInstance.serverStats.count - zksInstance.zkDb.dataTree.lastProcessedZxid + 2 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 4.294967296E9 == 0
2 * zksInstance.serverStats.count - zksInstance.zkDb.dataTree.lastProcessedZxid + 2 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 4.294967298E9 == 0
3 * zksInstance.serverStats.count - zksInstance.zkDb.dataTree.lastProcessedZxid + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 4.294967296E9 == 0
3 * zksInstance.serverStats.count - zksInstance.zkDb.dataTree.lastProcessedZxid + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 4.294967297E9 == 0
6 * zksInstance.serverStats.count - 3 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) + 1.2884901888E10 == 0
6 * zksInstance.serverStats.count - 3 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 + 1.288490189E10 == 0
zksInstance.serverStats.maxLatency + 20 * zksInstance.serverStats.packetsReceived - 10 * zksInstance.zkDb.dataTree.lastProcessedZxid + 4.294967294E10 == 0
3302768 * zksInstance.serverStats.maxLatency + 549 * zksInstance.syncProcessor.randRoll - 758352 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 3.257097297467949E15 == 0
6323744 * zksInstance.serverStats.maxLatency + 915 * zksInstance.syncProcessor.randRoll - 1516704 * zksInstance.zkDb.dataTree.lastProcessedZxid + 6.514194602514843E15 == 0
6332032 * zksInstance.serverStats.maxLatency + 915 * zksInstance.syncProcessor.randRoll - 1516704 * zksInstance.zkDb.maxCommittedLog + 6.514194602514843E15 == 0
76812 * zksInstance.serverStats.maxLatency + 5 * zksInstance.txnLogFactory.txnLog.currentSize - 512080 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2.19936685293568E15 == 0
zksInstance.serverStats.maxLatency - 10 * zksInstance.zkDb.dataTree.lastProcessedZxid + 20 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 4.294967296E10 == 0
zksInstance.serverStats.maxLatency - 10 * zksInstance.zkDb.dataTree.lastProcessedZxid + 20 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 4.294967298E10 == 0
3 * zksInstance.serverStats.maxLatency - 30 * zksInstance.zkDb.dataTree.lastProcessedZxid + 20 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 1.2884901888E11 == 0
3 * zksInstance.serverStats.maxLatency - 30 * zksInstance.zkDb.dataTree.lastProcessedZxid + 20 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 1.288490189E11 == 0
zksInstance.serverStats.maxLatency - 10 * zksInstance.zkDb.dataTree.lastProcessedZxid + 20 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 4.294967296E10 == 0
zksInstance.serverStats.maxLatency - 10 * zksInstance.zkDb.dataTree.lastProcessedZxid + 20 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 4.294967298E10 == 0
zksInstance.serverStats.maxLatency - 10 * zksInstance.zkDb.dataTree.lastProcessedZxid + 20 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 4.294967296E10 == 0
zksInstance.serverStats.maxLatency - 10 * zksInstance.zkDb.dataTree.lastProcessedZxid + 20 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 4.294967298E10 == 0
3 * zksInstance.serverStats.maxLatency - 30 * zksInstance.zkDb.dataTree.lastProcessedZxid + 20 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) + 1.2884901888E11 == 0
3 * zksInstance.serverStats.maxLatency - 30 * zksInstance.zkDb.dataTree.lastProcessedZxid + 20 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 + 1.288490189E11 == 0
2 * zksInstance.serverStats.packetsReceived + 2 * zksInstance.serverStats.packetsSent - zksInstance.zkDb.dataTree.lastProcessedZxid + 4.294967292E9 == 0
20 * zksInstance.serverStats.packetsReceived + zksInstance.serverStats.totalLatency - 10 * zksInstance.zkDb.dataTree.lastProcessedZxid + 4.294967294E10 == 0
1656 * zksInstance.serverStats.packetsReceived - 25 * zksInstance.sessionTracker.currentTime - 1656 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 641165544 == 0
1656 * zksInstance.serverStats.packetsReceived - 25 * zksInstance.sessionTracker.currentTime - 1656 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 641163888 == 0
1656 * zksInstance.serverStats.packetsReceived - 25 * zksInstance.sessionTracker.currentTime - 1656 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 641165544 == 0
1656 * zksInstance.serverStats.packetsReceived - 25 * zksInstance.sessionTracker.currentTime - 1656 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 641163888 == 0
80 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextExpirationTime - 80 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 25647920 == 0
80 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextExpirationTime - 80 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 25647840 == 0
80 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextExpirationTime - 80 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 25647920 == 0
80 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextExpirationTime - 80 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 25647840 == 0
214302720 * zksInstance.serverStats.packetsReceived + 5 * zksInstance.sessionTracker.nextSessionId - 257163264 * zksInstance.syncProcessor.zks.requestsInProcess - 3.6029637705433088E17 == 0
174048 * zksInstance.serverStats.packetsReceived + 27 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 3.5596690731843E13 == 0
165760 * zksInstance.serverStats.packetsReceived + 25 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.dataTree.lastProcessedZxid + 3.5596690822961E13 == 0
165760 * zksInstance.serverStats.packetsReceived + 25 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.maxCommittedLog + 3.5596690822961E13 == 0
107744 * zksInstance.serverStats.packetsReceived + 13 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.minCommittedLog + 3.5596688311397E13 == 0
150 * zksInstance.serverStats.packetsReceived - 1274 * zksInstance.syncProcessor.zks.requestsInProcess + 25 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 1.07374191825E11 == 0
125 * zksInstance.serverStats.packetsReceived - 1169 * zksInstance.syncProcessor.zks.requestsInProcess + 25 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.073741918E11 == 0
125 * zksInstance.serverStats.packetsReceived - 1169 * zksInstance.syncProcessor.zks.requestsInProcess + 25 * zksInstance.zkDb.maxCommittedLog - 1.073741918E11 == 0
307248 * zksInstance.serverStats.packetsReceived + zksInstance.txnLogFactory.txnLog.currentSize - 102416 * zksInstance.zkDb.dataTree.lastProcessedZxid + 4.39873370279888E14 == 0
3 * zksInstance.serverStats.packetsReceived - zksInstance.zkDb.dataTree.lastProcessedZxid + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 4.294967293E9 == 0
3 * zksInstance.serverStats.packetsReceived - zksInstance.zkDb.dataTree.lastProcessedZxid + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 4.294967294E9 == 0
1071513600 * zksInstance.serverStats.packetsSent + 25 * zksInstance.sessionTracker.nextSessionId - 128581632 * zksInstance.syncProcessor.zks.requestsInProcess - 1.8014818852716544E18 == 0
174048 * zksInstance.serverStats.packetsSent + 27 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 3.5596690731843E13 == 0
165760 * zksInstance.serverStats.packetsSent + 25 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.dataTree.lastProcessedZxid + 3.5596690822961E13 == 0
165760 * zksInstance.serverStats.packetsSent + 25 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.maxCommittedLog + 3.5596690822961E13 == 0
107744 * zksInstance.serverStats.packetsSent + 13 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.minCommittedLog + 3.5596688311397E13 == 0
150 * zksInstance.serverStats.packetsSent - 1112 * zksInstance.syncProcessor.zks.requestsInProcess + 25 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 1.07374191825E11 == 0
125 * zksInstance.serverStats.packetsSent - 1034 * zksInstance.syncProcessor.zks.requestsInProcess + 25 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.073741918E11 == 0
125 * zksInstance.serverStats.packetsSent - 1034 * zksInstance.syncProcessor.zks.requestsInProcess + 25 * zksInstance.zkDb.maxCommittedLog - 1.073741918E11 == 0
307248 * zksInstance.serverStats.packetsSent + zksInstance.txnLogFactory.txnLog.currentSize - 102416 * zksInstance.zkDb.dataTree.lastProcessedZxid + 4.39873370279888E14 == 0
2 * zksInstance.serverStats.packetsSent - zksInstance.zkDb.dataTree.lastProcessedZxid + 2 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 4.294967294E9 == 0
2 * zksInstance.serverStats.packetsSent - zksInstance.zkDb.dataTree.lastProcessedZxid + 2 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 4.294967296E9 == 0
6 * zksInstance.serverStats.packetsSent - 3 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 1.2884901882E10 == 0
6 * zksInstance.serverStats.packetsSent - 3 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 1.2884901884E10 == 0
2 * zksInstance.serverStats.packetsSent - zksInstance.zkDb.dataTree.lastProcessedZxid + 2 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 4.294967294E9 == 0
2 * zksInstance.serverStats.packetsSent - zksInstance.zkDb.dataTree.lastProcessedZxid + 2 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 4.294967296E9 == 0
3 * zksInstance.serverStats.packetsSent - zksInstance.zkDb.dataTree.lastProcessedZxid + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 4.294967293E9 == 0
3 * zksInstance.serverStats.packetsSent - zksInstance.zkDb.dataTree.lastProcessedZxid + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 4.294967294E9 == 0
6 * zksInstance.serverStats.packetsSent - 3 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) + 1.2884901882E10 == 0
6 * zksInstance.serverStats.packetsSent - 3 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 + 1.2884901884E10 == 0
76812 * zksInstance.serverStats.totalLatency + 5 * zksInstance.txnLogFactory.txnLog.currentSize - 512080 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2.19936685293568E15 == 0
zksInstance.serverStats.totalLatency - 10 * zksInstance.zkDb.dataTree.lastProcessedZxid + 20 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 4.294967296E10 == 0
zksInstance.serverStats.totalLatency - 10 * zksInstance.zkDb.dataTree.lastProcessedZxid + 20 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 4.294967298E10 == 0
3 * zksInstance.serverStats.totalLatency - 30 * zksInstance.zkDb.dataTree.lastProcessedZxid + 20 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 1.2884901888E11 == 0
3 * zksInstance.serverStats.totalLatency - 30 * zksInstance.zkDb.dataTree.lastProcessedZxid + 20 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 1.288490189E11 == 0
zksInstance.serverStats.totalLatency - 10 * zksInstance.zkDb.dataTree.lastProcessedZxid + 20 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 4.294967296E10 == 0
zksInstance.serverStats.totalLatency - 10 * zksInstance.zkDb.dataTree.lastProcessedZxid + 20 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 4.294967298E10 == 0
zksInstance.serverStats.totalLatency - 10 * zksInstance.zkDb.dataTree.lastProcessedZxid + 20 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 4.294967296E10 == 0
zksInstance.serverStats.totalLatency - 10 * zksInstance.zkDb.dataTree.lastProcessedZxid + 20 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 4.294967298E10 == 0
3 * zksInstance.serverStats.totalLatency - 30 * zksInstance.zkDb.dataTree.lastProcessedZxid + 20 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) + 1.2884901888E11 == 0
3 * zksInstance.serverStats.totalLatency - 30 * zksInstance.zkDb.dataTree.lastProcessedZxid + 20 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 + 1.288490189E11 == 0
400 * zksInstance.sessionTracker.currentTime - 537 * zksInstance.sessionTracker.nextExpirationTime + 274400 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 3.5143008E9 == 0
400 * zksInstance.sessionTracker.currentTime - 537 * zksInstance.sessionTracker.nextExpirationTime + 274400 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 3.5145752E9 == 0
12802 * zksInstance.sessionTracker.currentTime + 207 * zksInstance.txnLogFactory.txnLog.currentSize - 21200112 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 3.28328899776E11 == 0
4.294967297E9 * zksInstance.sessionTracker.currentTime + 1656 * zksInstance.zkDb.minCommittedLog - 7.112465843832E12 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1.10151686236362336E17 == 0
4.294967297E9 * zksInstance.sessionTracker.currentTime + 1656 * zksInstance.zkDb.minCommittedLog - 7.112465843832E12 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1.10158798702206176E17 == 0
zksInstance.sessionTracker.currentTime + 1313 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 1313 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 25646688 == 0
zksInstance.sessionTracker.currentTime + 1313 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 1313 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 25648001 == 0
zksInstance.sessionTracker.currentTime + 1313 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 1313 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 25645375 == 0
zksInstance.sessionTracker.currentTime + 1313 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 1313 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 25646688 == 0
zksInstance.sessionTracker.currentTime - 1313 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) - 1313 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 25644062 == 0
3 * zksInstance.sessionTracker.currentTime + 1313 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 3939 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 76940064 == 0
3 * zksInstance.sessionTracker.currentTime + 1313 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 3939 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 76944003 == 0
3 * zksInstance.sessionTracker.currentTime + 1313 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 3939 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 76938751 == 0
3 * zksInstance.sessionTracker.currentTime + 1313 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 3939 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 76942690 == 0
zksInstance.sessionTracker.currentTime + 1313 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 1313 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 25646688 == 0
zksInstance.sessionTracker.currentTime + 1313 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 1313 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 25648001 == 0
zksInstance.sessionTracker.currentTime + 1313 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 1313 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 25645375 == 0
zksInstance.sessionTracker.currentTime + 1313 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 1313 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 25646688 == 0
3 * zksInstance.sessionTracker.currentTime - 3939 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 1313 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 76940064 == 0
3 * zksInstance.sessionTracker.currentTime - 3939 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 1313 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 76938751 == 0
3 * zksInstance.sessionTracker.currentTime - 3939 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 1313 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 76944003 == 0
3 * zksInstance.sessionTracker.currentTime - 3939 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 1313 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 76942690 == 0
6401 * zksInstance.sessionTracker.nextExpirationTime + 125 * zksInstance.txnLogFactory.txnLog.currentSize - 12802000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1.64172848E11 == 0
4.294967297E9 * zksInstance.sessionTracker.nextExpirationTime + 2000 * zksInstance.zkDb.minCommittedLog - 8.589934594E12 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1.10157321233456E17 == 0
4.294967297E9 * zksInstance.sessionTracker.nextExpirationTime + 2000 * zksInstance.zkDb.minCommittedLog - 8.589934594E12 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1.1016591116805E17 == 0
zksInstance.sessionTracker.nextExpirationTime + 2000 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 2000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 25648000 == 0
zksInstance.sessionTracker.nextExpirationTime + 2000 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 2000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 25650000 == 0
zksInstance.sessionTracker.nextExpirationTime + 2000 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 2000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 25646000 == 0
zksInstance.sessionTracker.nextExpirationTime + 2000 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 2000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 25648000 == 0
zksInstance.sessionTracker.nextExpirationTime - 2000 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) - 2000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 25644000 == 0
3 * zksInstance.sessionTracker.nextExpirationTime + 2000 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 6000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 76944000 == 0
3 * zksInstance.sessionTracker.nextExpirationTime + 2000 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 6000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 76950000 == 0
3 * zksInstance.sessionTracker.nextExpirationTime + 2000 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 6000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 76942000 == 0
3 * zksInstance.sessionTracker.nextExpirationTime + 2000 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 6000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 76948000 == 0
zksInstance.sessionTracker.nextExpirationTime + 2000 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 2000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 25648000 == 0
zksInstance.sessionTracker.nextExpirationTime + 2000 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 2000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 25650000 == 0
zksInstance.sessionTracker.nextExpirationTime + 2000 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 2000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 25646000 == 0
zksInstance.sessionTracker.nextExpirationTime + 2000 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 2000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 25648000 == 0
3 * zksInstance.sessionTracker.nextExpirationTime - 6000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2000 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 76944000 == 0
3 * zksInstance.sessionTracker.nextExpirationTime - 6000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2000 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 76942000 == 0
zksInstance.sessionTracker.nextExpirationTime - 2000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2000 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 25648000 == 0
3 * zksInstance.sessionTracker.nextExpirationTime - 6000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2000 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 76950000 == 0
3 * zksInstance.sessionTracker.nextExpirationTime - 6000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2000 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 76948000 == 0
25 * zksInstance.sessionTracker.nextSessionId + 7.814905856E9 * zksInstance.syncProcessor.zks.requestsInProcess - 178585600 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 1.0344625064083456E18 == 0
125 * zksInstance.sessionTracker.nextSessionId + 4.3674894336E10 * zksInstance.syncProcessor.zks.requestsInProcess - 1071513600 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4.4052931542499328E18 == 0
125 * zksInstance.sessionTracker.nextSessionId + 4.3674894336E10 * zksInstance.syncProcessor.zks.requestsInProcess - 1071513600 * zksInstance.zkDb.maxCommittedLog - 4.4052931542499328E18 == 0
3 * zksInstance.sessionTracker.nextSessionId - 1.44115187527122944E17 * zksInstance.zkDb.dataTree.scount - 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 2.16177826104016896E17 == 0
3 * zksInstance.sessionTracker.nextSessionId - 1.44115187527122944E17 * zksInstance.zkDb.dataTree.scount - 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 2.16177826104016896E17 == 0
3 * zksInstance.sessionTracker.nextSessionId - 1.44115187527122944E17 * zksInstance.zkDb.dataTree.scount - 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 2.16177826104016896E17 == 0
3 * zksInstance.sessionTracker.nextSessionId - 1.44115187527122944E17 * zksInstance.zkDb.dataTree.scount - 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 2.16177826104016896E17 == 0
75 * zksInstance.syncProcessor.randRoll + 4533536 * zksInstance.syncProcessor.zks.requestsInProcess - 103600 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 4.44958647195075E14 == 0
125 * zksInstance.syncProcessor.randRoll + 8445472 * zksInstance.syncProcessor.zks.requestsInProcess - 207200 * zksInstance.zkDb.dataTree.lastProcessedZxid + 8.89917295425525E14 == 0
125 * zksInstance.syncProcessor.randRoll + 8445472 * zksInstance.syncProcessor.zks.requestsInProcess - 207200 * zksInstance.zkDb.maxCommittedLog + 8.89917295425525E14 == 0
9600 * zksInstance.syncProcessor.randRoll + 131831 * zksInstance.txnLogFactory.txnLog.currentSize - 13260800 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 5.6954693339365904E16 == 0
8000 * zksInstance.syncProcessor.randRoll + 120953 * zksInstance.txnLogFactory.txnLog.currentSize - 13260800 * zksInstance.zkDb.dataTree.lastProcessedZxid + 5.6954694519711152E16 == 0
8000 * zksInstance.syncProcessor.randRoll + 121471 * zksInstance.txnLogFactory.txnLog.currentSize - 13260800 * zksInstance.zkDb.maxCommittedLog + 5.6954694466659664E16 == 0
3 * zksInstance.syncProcessor.randRoll - 4144 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2610720 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 1.7798345887803E13 == 0
3 * zksInstance.syncProcessor.randRoll - 4144 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2610720 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 1.7798348498523E13 == 0
3 * zksInstance.syncProcessor.randRoll - 4144 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 25253536 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 1.7798421648411E13 == 0
3 * zksInstance.syncProcessor.randRoll - 4144 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 25253536 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 1.7798396394875E13 == 0
3 * zksInstance.syncProcessor.randRoll - 4144 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2407664 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 1.7798345887803E13 == 0
3 * zksInstance.syncProcessor.randRoll - 4144 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2407664 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 1.7798348295467E13 == 0
3 * zksInstance.syncProcessor.randRoll - 4144 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 25257680 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 1.7798396403163E13 == 0
3 * zksInstance.syncProcessor.randRoll - 4144 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 25257680 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 1.7798371145483E13 == 0
5 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.dataTree.lastProcessedZxid + 4442368 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.5596691817021E13 == 0
5 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.dataTree.lastProcessedZxid + 4442368 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.5596696259389E13 == 0
5 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.dataTree.lastProcessedZxid - 50515360 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 3.5596843363101E13 == 0
5 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.dataTree.lastProcessedZxid - 50515360 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 3.5596792847741E13 == 0
5 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.dataTree.lastProcessedZxid + 4442368 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.5596691817021E13 == 0
5 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.dataTree.lastProcessedZxid + 4442368 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.5596696259389E13 == 0
5 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.dataTree.lastProcessedZxid - 50523648 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 3.5596792864317E13 == 0
5 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.dataTree.lastProcessedZxid - 50523648 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 3.5596742340669E13 == 0
5 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.maxCommittedLog + 4442368 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.5596691817021E13 == 0
5 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.maxCommittedLog + 4442368 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.5596696259389E13 == 0
5 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.maxCommittedLog - 50515360 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 3.5596843363101E13 == 0
5 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.maxCommittedLog - 50515360 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 3.5596792847741E13 == 0
5 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.maxCommittedLog + 4442368 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.5596691817021E13 == 0
5 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.maxCommittedLog + 4442368 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.5596696259389E13 == 0
5 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.maxCommittedLog - 50523648 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 3.5596792864317E13 == 0
5 * zksInstance.syncProcessor.randRoll - 8288 * zksInstance.zkDb.maxCommittedLog - 50523648 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 3.5596742340669E13 == 0
zksInstance.txnLogFactory.txnLog.currentSize - 102416 * zksInstance.zkDb.dataTree.lastProcessedZxid + 307248 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 4.39873370587136E14 == 0
zksInstance.txnLogFactory.txnLog.currentSize - 102416 * zksInstance.zkDb.dataTree.lastProcessedZxid + 307248 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 4.39873370894384E14 == 0
zksInstance.txnLogFactory.txnLog.currentSize + 204832 * zksInstance.zkDb.dataTree.lastProcessedZxid - 307248 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 8.79746741174272E14 == 0
zksInstance.txnLogFactory.txnLog.currentSize + 204832 * zksInstance.zkDb.dataTree.lastProcessedZxid - 307248 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 8.7974674148152E14 == 0
zksInstance.txnLogFactory.txnLog.currentSize - 102416 * zksInstance.zkDb.dataTree.lastProcessedZxid + 307248 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 4.39873370587136E14 == 0
zksInstance.txnLogFactory.txnLog.currentSize - 102416 * zksInstance.zkDb.dataTree.lastProcessedZxid + 307248 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 4.39873370894384E14 == 0
zksInstance.txnLogFactory.txnLog.currentSize + 204832 * zksInstance.zkDb.dataTree.lastProcessedZxid - 307248 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 8.79746741174272E14 == 0
zksInstance.txnLogFactory.txnLog.currentSize + 204832 * zksInstance.zkDb.dataTree.lastProcessedZxid - 307248 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 8.7974674148152E14 == 0
zksInstance.zkDb.dataTree.lastProcessedZxid - 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.zkDb.dataTree.lastProcessedZxid - 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.294967297E9 == 0
zksInstance.zkDb.dataTree.lastProcessedZxid - 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967299E9 == 0
zksInstance.zkDb.dataTree.lastProcessedZxid - 3 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
zksInstance.zkDb.dataTree.lastProcessedZxid - 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.zkDb.dataTree.lastProcessedZxid - 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.294967297E9 == 0
zksInstance.zkDb.dataTree.lastProcessedZxid - 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967299E9 == 0
zksInstance.zkDb.dataTree.lastProcessedZxid - 3 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
zksInstance.self.authInitialized == zksInstance.zkDb.dataTree.initialized
zksInstance.self.bcVote.version == zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.bcVote.version == zksInstance.syncProcessor.requestOfDeath.sessionId
zksInstance.self.bcVote.version == zksInstance.syncProcessor.requestOfDeath.type
zksInstance.self.bcVote.version == zksInstance.syncProcessor.zks.hzxid
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
zksInstance.self.electionAlg.proposedZxid == 0 || zksInstance.self.electionAlg.proposedZxid == 4294971401L || zksInstance.self.electionAlg.proposedZxid == 4294979071L
zksInstance.self.myid == 1 || zksInstance.self.myid == 2
zksInstance.serverCnxnFactory.zkServer.hzxid == 0
zksInstance.sessionTracker.serverId == 1 || zksInstance.sessionTracker.serverId == 2
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid) != null
zksInstance.hzxid <= zksInstance.self.electionAlg.proposedEpoch
zksInstance.hzxid < zksInstance.self.myid
zksInstance.hzxid <= zksInstance.self.qcm.threadCnt
zksInstance.hzxid <= zksInstance.zkDb.dataTree.scount
zksInstance.hzxid <= zksInstance.zkDb.maxCommittedLog
zksInstance.hzxid <= zksInstance.zkDb.minCommittedLog
zksInstance.hzxid <= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.maxSessionTimeout < zksInstance.self.myid
zksInstance.maxSessionTimeout < zksInstance.sessionTracker.serverId
zksInstance.requestsInProcess % zksInstance.self.electionAlg.proposedLeader == 0
zksInstance.requestsInProcess % zksInstance.self.myid == 0
zksInstance.requestsInProcess >= zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.requestsInProcess % zksInstance.sessionTracker.serverId == 0
zksInstance.requestsInProcess <= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE != zksInstance.zkDb.dataTree.scount
zksInstance.self.acceptedEpoch <= zksInstance.self.myid
zksInstance.self.acceptedEpoch <= zksInstance.sessionTracker.serverId
zksInstance.self.bcVote.electionEpoch <= zksInstance.self.myid
zksInstance.self.bcVote.electionEpoch <= zksInstance.sessionTracker.serverId
zksInstance.self.bcVote.electionEpoch >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.id > zksInstance.self.myid
zksInstance.self.bcVote.id > zksInstance.sessionTracker.serverId
zksInstance.self.bcVote.peerEpoch <= zksInstance.self.myid
zksInstance.self.bcVote.peerEpoch >= zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.bcVote.peerEpoch <= zksInstance.sessionTracker.serverId
zksInstance.self.bcVote.peerEpoch == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1*daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.peerEpoch >= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.version < zksInstance.sessionTracker.serverId
zksInstance.self.currentVote.id != zksInstance.serverStats.minLatency
zksInstance.self.currentVote.id != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.currentVote.id != zksInstance.zkDb.dataTree.scount
zksInstance.self.electionAlg.finalizeWait > zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.electionAlg.finalizeWait != zksInstance.zkDb.dataTree.scount
zksInstance.self.electionAlg.proposedEpoch <= zksInstance.self.myid
zksInstance.self.electionAlg.proposedEpoch >= zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.electionAlg.proposedEpoch <= zksInstance.sessionTracker.serverId
zksInstance.self.electionAlg.proposedEpoch == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1*daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.self.electionAlg.proposedEpoch >= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.self.electionAlg.proposedEpoch >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.self.electionAlg.proposedEpoch >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.self.electionAlg.proposedLeader >= zksInstance.self.myid
zksInstance.self.electionAlg.proposedLeader > zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.serverCnxnFactory.zkServer.requestsInProcess % zksInstance.self.electionAlg.proposedLeader == 0
zksInstance.serverStats.count % zksInstance.self.electionAlg.proposedLeader == 0
zksInstance.serverStats.maxLatency % zksInstance.self.electionAlg.proposedLeader == 0
zksInstance.self.electionAlg.proposedLeader != zksInstance.serverStats.minLatency
zksInstance.serverStats.totalLatency % zksInstance.self.electionAlg.proposedLeader == 0
zksInstance.self.electionAlg.proposedLeader >= zksInstance.sessionTracker.serverId
zksInstance.syncProcessor.randRoll % zksInstance.self.electionAlg.proposedLeader == 0
zksInstance.self.electionAlg.proposedLeader != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.zkDb.dataTree.scount % zksInstance.self.electionAlg.proposedLeader == 0
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) % zksInstance.self.electionAlg.proposedLeader == 0
daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 % zksInstance.self.electionAlg.proposedLeader == 0
daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) % zksInstance.self.electionAlg.proposedLeader == 0
zksInstance.self.electionAlg.proposedZxid != zksInstance.self.myid
zksInstance.self.electionAlg.proposedZxid % zksInstance.self.myid == 0
zksInstance.self.electionAlg.proposedZxid >= zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.electionAlg.proposedZxid != zksInstance.sessionTracker.serverId
zksInstance.self.electionAlg.proposedZxid % zksInstance.sessionTracker.serverId == 0
zksInstance.self.electionTimeTaken > zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.electionTimeTaken != zksInstance.zkDb.dataTree.scount
zksInstance.self.qcm.threadCnt % zksInstance.self.myid == 0
zksInstance.self.myid > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.self.myid > zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.myid > zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout
zksInstance.serverCnxnFactory.zkServer.requestsInProcess % zksInstance.self.myid == 0
zksInstance.self.myid < zksInstance.serverCnxnFactory.zkServer.tickTime
zksInstance.serverStats.count % zksInstance.self.myid == 0
zksInstance.serverStats.maxLatency % zksInstance.self.myid == 0
zksInstance.serverStats.totalLatency % zksInstance.self.myid == 0
zksInstance.sessionTracker.nextSessionId % zksInstance.self.myid == 0
zksInstance.self.myid < zksInstance.superSecret
zksInstance.syncProcessor.randRoll % zksInstance.self.myid == 0
zksInstance.syncProcessor.zks.requestsInProcess % zksInstance.self.myid == 0
zksInstance.txnLogFactory.txnLog.currentSize % zksInstance.self.myid == 0
zksInstance.zkDb.dataTree.scount % zksInstance.self.myid == 0
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) % zksInstance.self.myid == 0
zksInstance.self.myid >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.myid != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 % zksInstance.self.myid == 0
zksInstance.self.myid >= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.self.myid >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) % zksInstance.self.myid == 0
zksInstance.self.myid >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.self.qcm.RECV_CAPACITY > zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.qcm.RECV_CAPACITY != zksInstance.zkDb.dataTree.scount
zksInstance.self.qcm.cnxTO != zksInstance.zkDb.dataTree.scount
zksInstance.self.qcm.maxBuffer != zksInstance.zkDb.dataTree.scount
zksInstance.self.qcm.socketTimeout != zksInstance.zkDb.dataTree.scount
zksInstance.self.qcm.threadCnt > zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.qcm.threadCnt % zksInstance.sessionTracker.serverId == 0
zksInstance.self.qcm.threadCnt != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.self.qcm.threadCnt != daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.tickTime != zksInstance.zkDb.dataTree.scount
zksInstance.self.zkDb.commitLogBuffer != zksInstance.zkDb.dataTree.scount
zksInstance.self.zkDb.commitLogCount != zksInstance.zkDb.dataTree.scount
zksInstance.self.zkDb.maxCommittedLog >= zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.zkDb.minCommittedLog >= zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.sessionTracker.serverId
zksInstance.serverCnxnFactory.zkServer.hzxid <= zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.serverCnxnFactory.zkServer.hzxid <= zksInstance.serverStats.count
zksInstance.serverCnxnFactory.zkServer.hzxid <= zksInstance.serverStats.maxLatency
zksInstance.serverCnxnFactory.zkServer.hzxid <= zksInstance.serverStats.minLatency
zksInstance.serverCnxnFactory.zkServer.hzxid <= zksInstance.serverStats.packetsReceived
zksInstance.serverCnxnFactory.zkServer.hzxid <= zksInstance.serverStats.packetsSent
zksInstance.serverCnxnFactory.zkServer.hzxid <= zksInstance.serverStats.totalLatency
zksInstance.serverCnxnFactory.zkServer.hzxid <= zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.serverCnxnFactory.zkServer.hzxid <= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverCnxnFactory.zkServer.hzxid <= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverCnxnFactory.zkServer.hzxid <= zksInstance.zkDb.dataTree.scount
zksInstance.serverCnxnFactory.zkServer.hzxid <= zksInstance.zkDb.maxCommittedLog
zksInstance.serverCnxnFactory.zkServer.hzxid <= zksInstance.zkDb.minCommittedLog
zksInstance.serverCnxnFactory.zkServer.hzxid <= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.hzxid <= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.hzxid <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.hzxid <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.hzxid <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout < zksInstance.sessionTracker.serverId
zksInstance.serverCnxnFactory.zkServer.requestsInProcess % zksInstance.sessionTracker.serverId == 0
zksInstance.serverCnxnFactory.zkServer.requestsInProcess <= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverCnxnFactory.zkServer.tickTime > zksInstance.serverStats.count
zksInstance.serverCnxnFactory.zkServer.tickTime > zksInstance.serverStats.packetsReceived
zksInstance.serverCnxnFactory.zkServer.tickTime > zksInstance.serverStats.packetsSent
zksInstance.serverCnxnFactory.zkServer.tickTime > zksInstance.sessionTracker.serverId
zksInstance.serverCnxnFactory.zkServer.tickTime != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverCnxnFactory.zkServer.tickTime != zksInstance.zkDb.dataTree.scount
zksInstance.serverStats.count % zksInstance.sessionTracker.serverId == 0
zksInstance.serverStats.maxLatency % zksInstance.sessionTracker.serverId == 0
zksInstance.serverStats.minLatency >= zksInstance.zkDb.dataTree.scount
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.serverStats.totalLatency % zksInstance.sessionTracker.serverId == 0
zksInstance.sessionTracker.nextSessionId % zksInstance.sessionTracker.serverId == 0
zksInstance.sessionTracker.serverId < zksInstance.superSecret
zksInstance.syncProcessor.randRoll % zksInstance.sessionTracker.serverId == 0
zksInstance.syncProcessor.zks.requestsInProcess % zksInstance.sessionTracker.serverId == 0
zksInstance.txnLogFactory.txnLog.currentSize % zksInstance.sessionTracker.serverId == 0
zksInstance.zkDb.dataTree.scount % zksInstance.sessionTracker.serverId == 0
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) % zksInstance.sessionTracker.serverId == 0
daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 % zksInstance.sessionTracker.serverId == 0
zksInstance.sessionTracker.serverId >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) % zksInstance.sessionTracker.serverId == 0
zksInstance.superSecret != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.syncProcessor.requestOfDeath.zxid <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.zks.requestsInProcess <= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.syncProcessor.zks.requestsInProcess != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.tickTime != zksInstance.zkDb.dataTree.scount
zksInstance.txnLogFactory.txnLog.lastZxidSeen >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.lastZxidSeen >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.dataTree.lastProcessedZxid >= zksInstance.zkDb.dataTree.scount
zksInstance.zkDb.dataTree.lastProcessedZxid >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.dataTree.lastProcessedZxid >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.scount != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) != daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
7.2057593965969408E16 * zksInstance.self.bcVote.peerEpoch - zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 1.44116870155337728E17 == 0
7.2057593965969408E16 * zksInstance.self.bcVote.peerEpoch - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 1.44116870155337728E17 == 0
7.2057593965969408E16 * zksInstance.self.bcVote.peerEpoch - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 1.44116870155337728E17 == 0
4.5396284198560727E18 * zksInstance.self.bcVote.peerEpoch - zksInstance.serverStats.totalLatency + 63 * zksInstance.sessionTracker.nextSessionId - 9.0793628197862769E18 == 0
7.2057593965969408E16 * zksInstance.self.bcVote.peerEpoch + zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 1.44116870155337728E17 == 0
7.2057593965969408E16 * zksInstance.self.bcVote.peerEpoch + zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 1.44116870155337728E17 == 0
7.2057593965969408E16 * zksInstance.self.electionAlg.proposedEpoch - zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - 1.44116870155337728E17 == 0
7.2057593965969408E16 * zksInstance.self.electionAlg.proposedEpoch - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 1.44116870155337728E17 == 0
7.2057593965969408E16 * zksInstance.self.electionAlg.proposedEpoch - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 1.44116870155337728E17 == 0
4.5396284198560727E18 * zksInstance.self.electionAlg.proposedEpoch - zksInstance.serverStats.totalLatency + 63 * zksInstance.sessionTracker.nextSessionId - 9.0793628197862769E18 == 0
7.2057593965969408E16 * zksInstance.self.electionAlg.proposedEpoch + zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 1.44116870155337728E17 == 0
7.2057593965969408E16 * zksInstance.self.electionAlg.proposedEpoch + zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 1.44116870155337728E17 == 0
7.2057593965969408E16 * zksInstance.self.electionAlg.proposedLeader + 2 * zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId + 7.2060958412767232E16 == 0
6.7013562388351549E18 * zksInstance.self.electionAlg.proposedLeader + 2 * zksInstance.serverStats.maxLatency - 186 * zksInstance.sessionTracker.nextSessionId + 6.7016691323873526E18 == 0
3.6028796982984704E16 * zksInstance.self.electionAlg.proposedLeader + zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId + 3.6030479206383616E16 == 0
7.2057593965969408E16 * zksInstance.self.electionAlg.proposedLeader + 2 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 7.2060958412767232E16 == 0
4.5396284198560727E18 * zksInstance.self.electionAlg.proposedLeader + 2 * zksInstance.serverStats.totalLatency - 126 * zksInstance.sessionTracker.nextSessionId + 4.5398403800043356E18 == 0
3.6028796982984704E16 * zksInstance.self.electionAlg.proposedLeader - zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 3.6030479206383616E16 == 0
3.6028796982984704E16 * zksInstance.self.electionAlg.proposedLeader - zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 3.6030479206383616E16 == 0
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.firstProcessor.zks.requestsInProcess == zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.bcVote.peerEpoch == daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.peerEpoch == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.peerEpoch == daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.peerEpoch == daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.zxid == zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.bcVote.zxid == zksInstance.self.zkDb.minCommittedLog
zksInstance.self.bcVote.zxid == zksInstance.zkDb.maxCommittedLog
zksInstance.self.bcVote.zxid == zksInstance.zkDb.minCommittedLog
zksInstance.self.qcm.SEND_CAPACITY == daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.self.qcm.SEND_CAPACITY == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverStats.maxLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverStats.totalLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.currentSize)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.maxLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.totalLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.currentSize)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.lastProcessedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverStats.maxLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverStats.totalLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.currentSize)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.maxLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.totalLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.currentSize)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.maxLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.totalLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.currentSize)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.myid-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.threadCnt-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.threadCnt-1)
zksInstance.firstProcessor.zks.hzxid == 4294967296L || zksInstance.firstProcessor.zks.hzxid == 8589934592L
zksInstance.self.bcVote.zxid == 0 || zksInstance.self.bcVote.zxid == 4294967297L
zksInstance.self.electionTimeTaken == 203 || zksInstance.self.electionTimeTaken == 204
zksInstance.self.qcm.cnxTO == 50
zksInstance.serverStats.packetsReceived == 0 || zksInstance.serverStats.packetsReceived == 1
zksInstance.sessionTracker.currentTime == 26846000 || zksInstance.sessionTracker.currentTime == 26846624
zksInstance.sessionTracker.nextExpirationTime == 26848000
zksInstance.sessionTracker.nextSessionId == 144116947454459904L || zksInstance.sessionTracker.nextSessionId == 144116947496140800L
daikon.Quant.subsetOf(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid))
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.lastZxidSeen)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.lastZxidSeen)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.maxLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.totalLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionType-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.threadCnt-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.threadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.threadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
zksInstance.sessionTracker.currentTime == 26844586
zksInstance.sessionTracker.nextExpirationTime == 26846000
zksInstance.sessionTracker.nextSessionId == 144116947362578432L
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) != null
zksInstance.self.bcVote.id == daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)-1
zksInstance.self.myid == zksInstance.self.qcm.SEND_CAPACITY
zksInstance.self.myid == daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.self.quorumConfig.half == daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.hzxid == daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE) == daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE) == daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionType-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
zksInstance.self.bcVote.zxid == 0 || zksInstance.self.bcVote.zxid == 4294969448L
zksInstance.self.electionTimeTaken == 282 || zksInstance.self.electionTimeTaken == 17721
daikon.Quant.eltsNotEqual(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, null)
zksInstance.self.qcm.threadCnt == 0 || zksInstance.self.qcm.threadCnt == 4
zksInstance.self.syncLimit == 10
zksInstance.sessionTracker.nextSessionId == 72059351567892481L || zksInstance.sessionTracker.nextSessionId == 72059353160613888L
zksInstance.syncProcessor.randRoll == 2293 || zksInstance.syncProcessor.randRoll == 38661
zksInstance.syncProcessor.requestOfDeath.createTime == 26817826
zksInstance.txnLogFactory.txnLog.currentSize == 0 || zksInstance.txnLogFactory.txnLog.currentSize == 102416 || zksInstance.txnLogFactory.txnLog.currentSize == 204816
daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) == 2
daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 != 0
daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE) == 5
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 1
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid) != null
zksInstance.hzxid < zksInstance.requestsInProcess
zksInstance.hzxid < zksInstance.self.acceptedEpoch
zksInstance.hzxid <= zksInstance.self.bcVote.zxid
zksInstance.hzxid < zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.hzxid < zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.requestsInProcess >= zksInstance.self.acceptedEpoch
zksInstance.requestsInProcess > zksInstance.self.bcVote.peerEpoch
zksInstance.requestsInProcess != zksInstance.self.bcVote.zxid
zksInstance.requestsInProcess >= zksInstance.self.myid
zksInstance.requestsInProcess != zksInstance.self.qcm.cnxTO
zksInstance.requestsInProcess != zksInstance.self.syncLimit
zksInstance.requestsInProcess > zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.requestsInProcess >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.requestsInProcess != daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.requestsInProcess != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.requestsInProcess % daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 == 0
zksInstance.requestsInProcess >= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.requestsInProcess >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 % zksInstance.requestsInProcess == 0
zksInstance.requestsInProcess >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.acceptedEpoch < zksInstance.self.bcVote.id
zksInstance.self.acceptedEpoch >= zksInstance.self.myid
zksInstance.self.acceptedEpoch > zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.acceptedEpoch > zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout
zksInstance.self.acceptedEpoch <= zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.acceptedEpoch < zksInstance.serverCnxnFactory.zkServer.tickTime
zksInstance.self.acceptedEpoch < zksInstance.superSecret
zksInstance.self.acceptedEpoch <= zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.acceptedEpoch >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.peerEpoch < zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.bcVote.peerEpoch < zksInstance.serverStats.packetsReceived
zksInstance.self.bcVote.peerEpoch < zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.bcVote.zxid >= zksInstance.serverCnxnFactory.zkServer.hzxid
zksInstance.self.bcVote.zxid > zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout
zksInstance.self.bcVote.zxid != zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.bcVote.zxid != zksInstance.serverCnxnFactory.zkServer.tickTime
zksInstance.self.bcVote.zxid != zksInstance.superSecret
zksInstance.self.bcVote.zxid != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.bcVote.zxid >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.zxid != daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.zxid != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.zxid != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.zxid >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.zxid >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
daikon.Quant.eltsEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid))
zksInstance.self.electionTimeTaken > zksInstance.self.qcm.cnxTO
zksInstance.self.electionTimeTaken != zksInstance.self.qcm.maxBuffer
zksInstance.self.electionTimeTaken != zksInstance.self.tickTime
zksInstance.self.electionTimeTaken != zksInstance.self.zkDb.commitLogBuffer
zksInstance.self.electionTimeTaken != zksInstance.self.zkDb.commitLogCount
zksInstance.self.electionTimeTaken != zksInstance.serverCnxnFactory.zkServer.tickTime
zksInstance.self.electionTimeTaken != zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.self.electionTimeTaken > daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.self.myid != zksInstance.self.qcm.threadCnt
zksInstance.self.myid <= zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.myid <= zksInstance.serverStats.packetsSent
zksInstance.self.myid <= zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.myid >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.myid >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.cnxTO != zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.qcm.cnxTO != zksInstance.serverStats.maxLatency
zksInstance.self.qcm.cnxTO != zksInstance.serverStats.packetsReceived
zksInstance.self.qcm.cnxTO != zksInstance.serverStats.packetsSent
zksInstance.self.qcm.cnxTO != zksInstance.syncProcessor.zks.requestsInProcess
daikon.Quant.subsetOf(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt != zksInstance.self.quorumConfig.half
zksInstance.self.qcm.threadCnt < zksInstance.self.syncLimit
zksInstance.self.qcm.threadCnt <= daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.quorumConfig.half < zksInstance.serverStats.minLatency
zksInstance.self.quorumConfig.half <= zksInstance.serverStats.packetsReceived
zksInstance.self.quorumConfig.half < zksInstance.syncProcessor.randRoll
zksInstance.self.quorumConfig.half >= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.syncLimit < zksInstance.serverStats.minLatency
zksInstance.self.syncLimit != zksInstance.serverStats.packetsReceived
zksInstance.self.syncLimit != zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.syncLimit != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.syncLimit != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.syncLimit != zksInstance.zkDb.maxCommittedLog
zksInstance.self.syncLimit != zksInstance.zkDb.minCommittedLog
zksInstance.self.syncLimit > daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.syncLimit > daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog % daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 == 0
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog % daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 == 0
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
daikon.Quant.eltsEqual(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid))
daikon.Quant.eltsEqual(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid))
zksInstance.serverCnxnFactory.zkServer.hzxid < zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.serverCnxnFactory.zkServer.hzxid < zksInstance.serverStats.minLatency
zksInstance.serverCnxnFactory.zkServer.hzxid < zksInstance.serverStats.packetsReceived
zksInstance.serverCnxnFactory.zkServer.hzxid < zksInstance.serverStats.packetsSent
zksInstance.serverCnxnFactory.zkServer.hzxid < zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.serverCnxnFactory.zkServer.hzxid < daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.hzxid >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.hzxid <= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.hzxid >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout < daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.requestsInProcess % daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 0
zksInstance.serverCnxnFactory.zkServer.requestsInProcess >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 % zksInstance.serverCnxnFactory.zkServer.requestsInProcess == 0
zksInstance.serverCnxnFactory.zkServer.requestsInProcess != daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.requestsInProcess != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.requestsInProcess % daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 == 0
zksInstance.serverCnxnFactory.zkServer.requestsInProcess >= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.requestsInProcess != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.requestsInProcess >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 % zksInstance.serverCnxnFactory.zkServer.requestsInProcess == 0
zksInstance.serverCnxnFactory.zkServer.requestsInProcess >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.requestsInProcess >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.serverStats.count % daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 == 0
zksInstance.serverStats.count != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.maxLatency % daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 == 0
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.serverStats.minLatency % daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 == 0
zksInstance.serverStats.minLatency > daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsReceived != zksInstance.syncProcessor.randRoll
zksInstance.serverStats.packetsReceived >= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsReceived % daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 == 0
zksInstance.serverStats.packetsReceived != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsReceived > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsSent % daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 == 0
zksInstance.serverStats.packetsSent >= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.totalLatency % daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 == 0
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextSessionId > daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid))
zksInstance.syncProcessor.randRoll > daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.requestsInProcess != daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.requestsInProcess >= daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.zks.requestsInProcess != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.requestsInProcess >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 % zksInstance.syncProcessor.zks.requestsInProcess == 0
zksInstance.syncProcessor.zks.requestsInProcess >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.requestsInProcess >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize % daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 == 0
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen % daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 == 0
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.dataTree.lastProcessedZxid <= zksInstance.zkDb.maxCommittedLog
zksInstance.zkDb.dataTree.lastProcessedZxid >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.dataTree.lastProcessedZxid != daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid != daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.dataTree.lastProcessedZxid % daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 == 0
zksInstance.zkDb.dataTree.lastProcessedZxid != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog % daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 == 0
zksInstance.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.minCommittedLog % daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 == 0
zksInstance.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
1592721407 * zksInstance.self.qcm.threadCnt - 4 * zksInstance.sessionTracker.nextSessionId + 6.370885628E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 2.8823739990068429E17 == 0
1592721407 * zksInstance.self.qcm.threadCnt - 4 * zksInstance.sessionTracker.nextSessionId + 6.370885628E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 2.8823740627156992E17 == 0
1592721407 * zksInstance.self.qcm.threadCnt - 4 * zksInstance.sessionTracker.nextSessionId + 6.370885628E9 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) + 2.8823739990068429E17 == 0
zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 1592721407 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 7.2059349975171072E16 == 0
zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 1592721407 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 7.205935156789248E16 == 0
zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 1592721407 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 7.2059349975171072E16 == 0
zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 1592721407 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 7.205935156789248E16 == 0
zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 1592721407 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 7.205935156789248E16 == 0
zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 1592721407 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 7.2059353160613888E16 == 0
zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 1592721407 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 7.205935156789248E16 == 0
zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 1592721407 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 7.2059353160613888E16 == 0
2 * zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) - 3.185442814E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.44118699950342144E17 == 0
2 * zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) - 3.185442814E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.4411870313578496E17 == 0
2 * zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) - 3.185442814E9 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 1.44118699950342144E17 == 0
2 * zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 - 3.185442814E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.44118701543063552E17 == 0
2 * zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 - 3.185442814E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.44118704728506368E17 == 0
zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1592721407 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 7.2059349975171072E16 == 0
zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1592721407 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 7.205935156789248E16 == 0
zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1592721407 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 7.2059349975171072E16 == 0
zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1592721407 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 7.205935156789248E16 == 0
zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1592721407 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 7.205935156789248E16 == 0
zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1592721407 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 7.2059353160613888E16 == 0
zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1592721407 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 7.205935156789248E16 == 0
zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1592721407 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 7.2059353160613888E16 == 0
zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 1592721407 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 7.2059349975171072E16 == 0
zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 1592721407 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 7.205935156789248E16 == 0
zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 1592721407 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 7.205935156789248E16 == 0
zksInstance.sessionTracker.nextSessionId - 1592721407 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 1592721407 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 7.2059353160613888E16 == 0
zksInstance.self.myid == daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.self.myid == daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.self.myid == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.myid == daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.self.myid == daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverStats.count) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverStats.count) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
zksInstance.self.electionTimeTaken == 254
zksInstance.serverStats.minLatency == 1 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.packetsReceived == 1 || zksInstance.serverStats.packetsReceived == 5 || zksInstance.serverStats.packetsReceived == 18
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 29
zksInstance.sessionTracker.nextSessionId == 288232033978417152L || zksInstance.sessionTracker.nextSessionId == 288232033978417153L
zksInstance.syncProcessor.randRoll == 41310
zksInstance.syncProcessor.requestOfDeath.createTime == 25296474
zksInstance.requestsInProcess < zksInstance.self.electionType
zksInstance.requestsInProcess < zksInstance.self.quorumConfig.half
zksInstance.requestsInProcess < zksInstance.serverStats.packetsSent
zksInstance.self.electionType > zksInstance.serverStats.count
zksInstance.self.electionType != zksInstance.serverStats.packetsReceived
zksInstance.self.electionType != zksInstance.serverStats.packetsSent
zksInstance.self.electionType > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.myid != zksInstance.serverStats.packetsReceived
zksInstance.self.quorumConfig.half >= zksInstance.serverStats.count
zksInstance.self.quorumConfig.half != zksInstance.serverStats.packetsReceived
zksInstance.self.quorumConfig.half != zksInstance.serverStats.packetsSent
zksInstance.self.quorumConfig.half > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsReceived <= zksInstance.serverStats.packetsSent
zksInstance.serverStats.packetsSent - 17 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - -2147483648 == 0
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - -2147483648 == 0
zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 2.8823203397841715E17 == 0
zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 2.8823203397841715E17 == 0
zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) + 2.8823203397841715E17 == 0
zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 + 2.8823203397841715E17 == 0
zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 5.764640679568343E17 == 0
zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 5.764640679568343E17 == 0
zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) + 5.764640679568343E17 == 0
zksInstance.serverStats.maxLatency - 28 * zksInstance.sessionTracker.nextSessionId - 28 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 8.0704969513956803E18 == 0
zksInstance.serverStats.maxLatency - 28 * zksInstance.sessionTracker.nextSessionId - 28 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 8.0704969513956803E18 == 0
zksInstance.serverStats.maxLatency - 28 * zksInstance.sessionTracker.nextSessionId - 28 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) + 8.0704969513956803E18 == 0
zksInstance.serverStats.totalLatency - 29 * zksInstance.sessionTracker.nextSessionId - 29 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 8.3587289853740974E18 == 0
zksInstance.serverStats.totalLatency - 29 * zksInstance.sessionTracker.nextSessionId - 29 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 8.3587289853740974E18 == 0
zksInstance.serverStats.totalLatency - 29 * zksInstance.sessionTracker.nextSessionId - 29 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) + 8.3587289853740974E18 == 0
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 2.8823203397841715E17 == 0
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2.8823203397841715E17 == 0
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 2.8823203397841715E17 == 0
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 2.8823203397841715E17 == 0
zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 2.8823203397841715E17 == 0
zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 2.8823203397841715E17 == 0
zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 2.8823203397841715E17 == 0
zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 2.8823203397841715E17 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 74
zksInstance.serverStats.minLatency == 9 || zksInstance.serverStats.minLatency == 74 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.packetsReceived == 5 || zksInstance.serverStats.packetsReceived == 10 || zksInstance.serverStats.packetsReceived == 18
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 74 || zksInstance.serverStats.totalLatency == 83
zksInstance.sessionTracker.currentTime == 25102808
zksInstance.sessionTracker.nextExpirationTime == 25104000
zksInstance.sessionTracker.nextSessionId == 72059239175553025L
zksInstance.serverStats.minLatency == 1 || zksInstance.serverStats.minLatency == 51 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 51 || zksInstance.serverStats.totalLatency == 52
zksInstance.sessionTracker.currentTime == 26202253
zksInstance.sessionTracker.nextExpirationTime == 26205000
zksInstance.sessionTracker.nextSessionId == 72059311228780545L
zksInstance.sessionTracker.currentTime == 25103075
zksInstance.sessionTracker.nextSessionId == 72059239192985601L || zksInstance.sessionTracker.nextSessionId == 72059239192985602L
zksInstance.sessionTracker.currentTime == 26202429
zksInstance.sessionTracker.nextSessionId == 72059311240314881L || zksInstance.sessionTracker.nextSessionId == 72059311240314882L
zksInstance.serverStats.minLatency == 5 || zksInstance.serverStats.minLatency == 31 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 25103168
zksInstance.sessionTracker.nextSessionId == 72059239199145985L || zksInstance.sessionTracker.nextSessionId == 72059239199145986L
zksInstance.sessionTracker.currentTime == 26202530
zksInstance.sessionTracker.nextSessionId == 72059311246934017L || zksInstance.sessionTracker.nextSessionId == 72059311246934018L
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog) != null
zksInstance.serverStats.packetsReceived == 17 || zksInstance.serverStats.packetsReceived == 33 || zksInstance.serverStats.packetsReceived == 49
zksInstance.serverStats.packetsSent == 16 || zksInstance.serverStats.packetsSent == 32 || zksInstance.serverStats.packetsSent == 48
zksInstance.sessionTracker.currentTime == 26685069
zksInstance.sessionTracker.nextExpirationTime == 26688000
zksInstance.sessionTracker.nextSessionId == 72059342870609921L
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 48
zksInstance.serverStats.minLatency == 9 || zksInstance.serverStats.minLatency == 48 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.packetsReceived == 7 || zksInstance.serverStats.packetsReceived == 12 || zksInstance.serverStats.packetsReceived == 20
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 48 || zksInstance.serverStats.totalLatency == 57
zksInstance.sessionTracker.currentTime == 26684764
zksInstance.sessionTracker.nextExpirationTime == 26685000
zksInstance.sessionTracker.nextSessionId == 72059342850621441L
zksInstance.serverStats.minLatency == 3 || zksInstance.serverStats.minLatency == 30 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 30 || zksInstance.serverStats.totalLatency == 33
zksInstance.sessionTracker.currentTime == 26684950 || zksInstance.sessionTracker.currentTime == 26685000
zksInstance.sessionTracker.nextExpirationTime == 26685000 || zksInstance.sessionTracker.nextExpirationTime == 26688000
zksInstance.sessionTracker.nextSessionId == 72059342862811137L
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.hzxid) != null
zksInstance.sessionTracker.currentTime == 26294204
zksInstance.sessionTracker.nextExpirationTime == 26295000
zksInstance.sessionTracker.nextSessionId == 72059317254881281L
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 57
zksInstance.sessionTracker.currentTime == 26293863
zksInstance.sessionTracker.nextSessionId == 72059317232533505L
41 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
41 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.self.acceptedEpoch == zksInstance.self.quorumConfig.numGroups
zksInstance.self.acceptedEpoch == daikon.Quant.size(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.id == daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.id == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE == zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE
zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE == zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE
zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE == zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE
zksInstance.self.electionAlg.proposedLeader == daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedLeader == daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedLeader == daikon.Quant.size(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedLeader == daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
daikon.Quant.pairwiseEqual(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)
daikon.Quant.pairwiseEqual(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE) == daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE) == daikon.Quant.size(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE)-1
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.currentVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.currentVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.currentVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.numGroups-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.numGroups-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.numGroups-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.numGroups-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.numGroups-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.numGroups-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.numGroups-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.numGroups-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.numGroups)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.numGroups)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.numGroups)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.numGroups)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.numGroups)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.initLimit)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.initLimit)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.initLimit)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.initLimit)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.syncLimit)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.syncLimit)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.syncLimit)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.syncLimit)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.electionType-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.electionType-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
zksInstance.self.electionAlg.proposedLeader == 5
daikon.Quant.eltsNotEqual(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, null)
zksInstance.sessionTracker.nextSessionId == 360289695398363136L || zksInstance.sessionTracker.nextSessionId == 360289695398363137L
zksInstance.syncProcessor.randRoll == 40805
zksInstance.syncProcessor.requestOfDeath.createTime == 26324642
daikon.Quant.size(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE) == 2
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1) != null
zksInstance.requestsInProcess < zksInstance.self.bcVote.id
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE < zksInstance.serverStats.minLatency
zksInstance.self.acceptedEpoch >= zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.bcVote.id > zksInstance.syncProcessor.zks.requestsInProcess
daikon.Quant.subsetOf(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE)
zksInstance.serverStats.count < zksInstance.serverStats.minLatency
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE)
zksInstance.serverStats.minLatency > zksInstance.serverStats.packetsReceived
zksInstance.serverStats.minLatency > zksInstance.serverStats.packetsSent
zksInstance.serverStats.minLatency > zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.serverStats.minLatency > daikon.Quant.size(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE)
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextSessionId > daikon.Quant.size(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE)
2 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - -2147483648 == 0
3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - -2147483648 == 0
zksInstance.syncProcessor.zks.requestsInProcess <= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.syncProcessor.zks.requestsInProcess <= zksInstance.zkDb.maxCommittedLog
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid != daikon.Quant.size(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
2 * zksInstance.requestsInProcess + zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId + 7.2057939079672627E17 == 0
2 * zksInstance.requestsInProcess + zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 7.2057939079672627E17 == 0
zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId + zksInstance.syncProcessor.zks.requestsInProcess + 3.6028969539836314E17 == 0
zksInstance.requestsInProcess - 3 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) + 1.08086908619508941E18 == 0
zksInstance.requestsInProcess - 3 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 + 1.08086908619508941E18 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 3.6028969539836314E17 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.syncProcessor.zks.requestsInProcess + 1 == 0
zksInstance.serverStats.count + 2 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 7.2057939079672627E17 == 0
zksInstance.serverStats.count + 2 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 7.2057939079672627E17 == 0
zksInstance.serverStats.packetsReceived - zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 3.6028969539836314E17 == 0
zksInstance.serverStats.packetsReceived - zksInstance.serverStats.packetsSent - zksInstance.syncProcessor.zks.requestsInProcess == 0
zksInstance.serverStats.packetsSent + 2 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 7.2057939079672627E17 == 0
zksInstance.serverStats.packetsSent + 2 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 7.2057939079672627E17 == 0
3 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 2 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 1.08086908619508941E18 == 0
3 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 2 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 1.08086908619508941E18 == 0
3 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 1.08086908619508941E18 == 0
3 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 1.08086908619508941E18 == 0
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog-1)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog-1)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog-1)
zksInstance.hzxid == 10 || zksInstance.hzxid == 11
zksInstance.serverStats.minLatency == 9 || zksInstance.serverStats.minLatency == 55 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 55 || zksInstance.serverStats.totalLatency == 64
zksInstance.sessionTracker.currentTime == 26320466
zksInstance.sessionTracker.nextSessionId == 72059318975987713L
zksInstance.txnLogFactory.txnLog.lastZxidSeen == 0 || zksInstance.txnLogFactory.txnLog.lastZxidSeen == 11
zksInstance.sessionTracker.currentTime == 26267462 || zksInstance.sessionTracker.currentTime == 26268000
zksInstance.sessionTracker.nextExpirationTime == 26268000 || zksInstance.sessionTracker.nextExpirationTime == 26271000
zksInstance.sessionTracker.nextSessionId == 72059315502317569L
zksInstance.sessionTracker.currentTime == 26265000
zksInstance.sessionTracker.nextExpirationTime == 26268000
zksInstance.sessionTracker.nextSessionId == 72059315339788289L
zksInstance.sessionTracker.currentTime % zksInstance.serverStats.packetsSent == 0
33 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
33 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 36 || zksInstance.serverStats.maxLatency == 42
zksInstance.sessionTracker.currentTime == 26269485 || zksInstance.sessionTracker.currentTime == 26271000 || zksInstance.sessionTracker.currentTime == 26271578
zksInstance.sessionTracker.nextExpirationTime == 26271000 || zksInstance.sessionTracker.nextExpirationTime == 26274000
zksInstance.sessionTracker.nextSessionId == 72059315634831361L || zksInstance.sessionTracker.nextSessionId == 72059315772063745L
zksInstance.zkDb.minCommittedLog == 0 || zksInstance.zkDb.minCommittedLog == 1 || zksInstance.zkDb.minCommittedLog == 294
2093 * zksInstance.hzxid - 2093 * zksInstance.serverStats.count - 303 * zksInstance.sessionTracker.currentTime + 7.959653955E9 == 0
1000 * zksInstance.hzxid - 1000 * zksInstance.serverStats.count - 101 * zksInstance.sessionTracker.nextExpirationTime + 2.653371E9 == 0
2093 * zksInstance.hzxid - 2093 * zksInstance.serverStats.packetsReceived - 303 * zksInstance.sessionTracker.currentTime + 7.959658141E9 == 0
1000 * zksInstance.hzxid - 1000 * zksInstance.serverStats.packetsReceived - 101 * zksInstance.sessionTracker.nextExpirationTime + 2.653373E9 == 0
2093 * zksInstance.hzxid - 2093 * zksInstance.serverStats.packetsSent - 303 * zksInstance.sessionTracker.currentTime + 7.959656048E9 == 0
1000 * zksInstance.hzxid - 1000 * zksInstance.serverStats.packetsSent - 101 * zksInstance.sessionTracker.nextExpirationTime + 2.653372E9 == 0
2093 * zksInstance.hzxid - 303 * zksInstance.sessionTracker.currentTime - 2093 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.959653955E9 == 0
2093 * zksInstance.serverStats.count + 303 * zksInstance.sessionTracker.currentTime - 2093 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 7.959653955E9 == 0
144500 * zksInstance.serverStats.maxLatency + 9000 * zksInstance.sessionTracker.currentTime - 6279 * zksInstance.sessionTracker.nextExpirationTime - 7.1469756E10 == 0
107178344 * zksInstance.serverStats.maxLatency - 307248 * zksInstance.sessionTracker.currentTime - 43953 * zksInstance.txnLogFactory.txnLog.currentSize + 8.071889797344E12 == 0
63331 * zksInstance.serverStats.maxLatency - 1512 * zksInstance.sessionTracker.currentTime + 10764 * zksInstance.zkDb.minCommittedLog + 3.971946132E10 == 0
2093 * zksInstance.serverStats.packetsReceived + 303 * zksInstance.sessionTracker.currentTime - 2093 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 7.959658141E9 == 0
2093 * zksInstance.serverStats.packetsSent + 303 * zksInstance.sessionTracker.currentTime - 2093 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 7.959656048E9 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 25 || zksInstance.serverStats.maxLatency == 30
zksInstance.sessionTracker.currentTime == 26265378
zksInstance.sessionTracker.nextSessionId == 72059315365740545L
zksInstance.serverCnxnFactory.maxClientCnxns == daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.maxClientCnxns == daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.maxClientCnxns == 30
zksInstance.serverStats.minLatency == 63 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.packetsReceived == 31
zksInstance.sessionTracker.currentTime == 26637463
zksInstance.sessionTracker.nextSessionId == 72059339750703134L
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns-1) != null
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId) != null
zksInstance.hzxid != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.hzxid != daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.hzxid <= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess <= zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.requestsInProcess > zksInstance.zkDb.minCommittedLog
zksInstance.requestsInProcess > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.maxClientCnxns != zksInstance.serverStats.maxLatency
zksInstance.serverCnxnFactory.maxClientCnxns != zksInstance.serverStats.totalLatency
zksInstance.serverCnxnFactory.maxClientCnxns != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.serverCnxnFactory.maxClientCnxns >= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.memberOf(daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.hzxid) , zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns-1) , zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent) , zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.lastZxidSeen) , zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE )
zksInstance.serverStats.count < daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.minLatency > zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverStats.minLatency > zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverStats.packetsSent >= zksInstance.zkDb.maxCommittedLog
zksInstance.serverStats.packetsSent >= zksInstance.zkDb.minCommittedLog
zksInstance.serverStats.packetsSent < daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.lastZxidSeen <= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.dataTree.lastProcessedZxid < daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.maxCommittedLog < daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.minCommittedLog < daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.currentTime == 26687303
zksInstance.sessionTracker.nextSessionId == 72059343017017345L
zksInstance.sessionTracker.currentTime == 26688609
zksInstance.sessionTracker.nextExpirationTime == 26691000
zksInstance.sessionTracker.nextSessionId == 72059343102607361L
zksInstance.sessionTracker.currentTime == 26687357
zksInstance.sessionTracker.nextSessionId == 72059343020490753L
zksInstance.sessionTracker.currentTime == 26688662
zksInstance.sessionTracker.nextSessionId == 72059343106080769L
zksInstance.serverStats.minLatency == 29 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26686377
zksInstance.sessionTracker.nextSessionId == 72059342956265473L
zksInstance.sessionTracker.currentTime == 26687885
zksInstance.sessionTracker.nextSessionId == 72059343055093761L
zksInstance.sessionTracker.currentTime == 26687169
zksInstance.sessionTracker.nextSessionId == 72059343008235521L || zksInstance.sessionTracker.nextSessionId == 72059343008235522L
21 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 63 * zksInstance.sessionTracker.nextSessionId + 4.5397386095188378E18 == 0
21 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 51 * zksInstance.sessionTracker.nextSessionId + 3.6750264934200115E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617802902470656E17 == 0
zksInstance.serverStats.maxLatency - 21 * zksInstance.serverStats.packetsReceived + 63 * zksInstance.sessionTracker.nextSessionId - 4.5397386095188378E18 == 0
zksInstance.serverStats.maxLatency - 21 * zksInstance.serverStats.packetsSent + 63 * zksInstance.sessionTracker.nextSessionId - 4.5397386095188378E18 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog + 16 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 9.223372036854776E18 == 0
21 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 51 * zksInstance.sessionTracker.nextSessionId + 3.6750264934200115E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617802902470656E17 == 0
21 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 51 * zksInstance.sessionTracker.nextSessionId + 3.6750264934200115E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.1617802902470656E17 == 0
zksInstance.serverStats.totalLatency - 12 * zksInstance.sessionTracker.nextSessionId - 21 * zksInstance.zkDb.minCommittedLog + 8.6471211609882624E17 == 0
zksInstance.sessionTracker.currentTime == 26688481
zksInstance.sessionTracker.nextSessionId == 72059343094218753L || zksInstance.sessionTracker.nextSessionId == 72059343094218754L
23 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 69 * zksInstance.sessionTracker.nextSessionId + 4.9720946735010939E18 == 0
23 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 53 * zksInstance.sessionTracker.nextSessionId + 3.8191451839935939E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029282656256E17 == 0
zksInstance.serverStats.maxLatency - 23 * zksInstance.serverStats.packetsReceived + 69 * zksInstance.sessionTracker.nextSessionId - 4.9720946735010939E18 == 0
zksInstance.serverStats.maxLatency - 23 * zksInstance.serverStats.packetsSent + 69 * zksInstance.sessionTracker.nextSessionId - 4.9720946735010939E18 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog + 15 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 9.223372036854776E18 == 0
23 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 53 * zksInstance.sessionTracker.nextSessionId + 3.8191451839935939E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029282656256E17 == 0
23 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 53 * zksInstance.sessionTracker.nextSessionId + 3.8191451839935939E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029282656256E17 == 0
zksInstance.serverStats.totalLatency - 16 * zksInstance.sessionTracker.nextSessionId - 23 * zksInstance.zkDb.minCommittedLog + 1.15294948950750003E18 == 0
zksInstance.sessionTracker.currentTime == 26687048
zksInstance.sessionTracker.nextSessionId == 72059343000305665L || zksInstance.sessionTracker.nextSessionId == 72059343000305666L
zksInstance.serverStats.totalLatency - 56 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
3 * zksInstance.hzxid - 2 * zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118686000611328E17 == 0
38 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 114 * zksInstance.sessionTracker.nextSessionId + 8.2147651020348457E18 == 0
3 * zksInstance.hzxid - 2 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118686000611328E17 == 0
3 * zksInstance.hzxid - 2 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118686000611328E17 == 0
7 * zksInstance.hzxid - 2 * zksInstance.serverStats.totalLatency + 92 * zksInstance.sessionTracker.nextSessionId - 6.6294595560281211E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029000916992E17 == 0
38 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 114 * zksInstance.sessionTracker.nextSessionId + 8.2147651020348457E18 == 0
7 * zksInstance.serverStats.count - 2 * zksInstance.serverStats.totalLatency + 92 * zksInstance.sessionTracker.nextSessionId - 6.6294595560281211E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029000916992E17 == 0
zksInstance.serverStats.maxLatency - 38 * zksInstance.serverStats.packetsReceived + 114 * zksInstance.sessionTracker.nextSessionId - 8.2147651020348457E18 == 0
zksInstance.serverStats.maxLatency - 38 * zksInstance.serverStats.packetsSent + 114 * zksInstance.sessionTracker.nextSessionId - 8.2147651020348457E18 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog + 23 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 9.223372036854776E18 == 0
7 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.serverStats.totalLatency + 92 * zksInstance.sessionTracker.nextSessionId - 6.6294595560281211E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029000916992E17 == 0
7 * zksInstance.serverStats.packetsSent - 2 * zksInstance.serverStats.totalLatency + 92 * zksInstance.sessionTracker.nextSessionId - 6.6294595560281211E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029000916992E17 == 0
zksInstance.serverStats.totalLatency - 22 * zksInstance.sessionTracker.nextSessionId - 38 * zksInstance.zkDb.minCommittedLog + 1.58530554600672461E18 == 0
zksInstance.sessionTracker.currentTime == 26688393
zksInstance.sessionTracker.nextSessionId == 72059343088386049L || zksInstance.sessionTracker.nextSessionId == 72059343088386050L
3 * zksInstance.hzxid - 2 * zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118686176772096E17 == 0
26 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 78 * zksInstance.sessionTracker.nextSessionId + 5.6206287608941117E18 == 0
3 * zksInstance.hzxid - 2 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118686176772096E17 == 0
3 * zksInstance.hzxid - 2 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118686176772096E17 == 0
26 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 65 * zksInstance.sessionTracker.nextSessionId + 4.6838573007450931E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029265158144E17 == 0
26 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 78 * zksInstance.sessionTracker.nextSessionId + 5.6206287608941117E18 == 0
26 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency - 65 * zksInstance.sessionTracker.nextSessionId + 4.6838573007450931E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029265158144E17 == 0
zksInstance.serverStats.maxLatency - 26 * zksInstance.serverStats.packetsReceived + 78 * zksInstance.sessionTracker.nextSessionId - 5.6206287608941117E18 == 0
zksInstance.serverStats.maxLatency - 26 * zksInstance.serverStats.packetsSent + 78 * zksInstance.sessionTracker.nextSessionId - 5.6206287608941117E18 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog + 21 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 9.223372036854776E18 == 0
26 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 65 * zksInstance.sessionTracker.nextSessionId + 4.6838573007450931E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029265158144E17 == 0
26 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 65 * zksInstance.sessionTracker.nextSessionId + 4.6838573007450931E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029265158144E17 == 0
zksInstance.serverStats.totalLatency - 13 * zksInstance.sessionTracker.nextSessionId - 26 * zksInstance.zkDb.minCommittedLog + 9.3677146014901862E17 == 0
zksInstance.sessionTracker.currentTime == 26686500
zksInstance.sessionTracker.nextSessionId == 72059342964391937L || zksInstance.sessionTracker.nextSessionId == 72059342964391938L
3 * zksInstance.hzxid - 2 * zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118685928783872E17 == 0
28 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 84 * zksInstance.sessionTracker.nextSessionId + 6.0529848090089226E18 == 0
3 * zksInstance.hzxid - 2 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118685928783872E17 == 0
3 * zksInstance.hzxid - 2 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118685928783872E17 == 0
28 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 68 * zksInstance.sessionTracker.nextSessionId + 4.9000353215786516E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178028893175808E17 == 0
28 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 84 * zksInstance.sessionTracker.nextSessionId + 6.0529848090089226E18 == 0
28 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency - 68 * zksInstance.sessionTracker.nextSessionId + 4.9000353215786516E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178028893175808E17 == 0
zksInstance.serverStats.maxLatency - 28 * zksInstance.serverStats.packetsReceived + 84 * zksInstance.sessionTracker.nextSessionId - 6.0529848090089226E18 == 0
zksInstance.serverStats.maxLatency - 28 * zksInstance.serverStats.packetsSent + 84 * zksInstance.sessionTracker.nextSessionId - 6.0529848090089226E18 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog + 22 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 9.223372036854776E18 == 0
28 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 68 * zksInstance.sessionTracker.nextSessionId + 4.9000353215786516E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178028893175808E17 == 0
28 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 68 * zksInstance.sessionTracker.nextSessionId + 4.9000353215786516E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178028893175808E17 == 0
zksInstance.serverStats.totalLatency - 16 * zksInstance.sessionTracker.nextSessionId - 28 * zksInstance.zkDb.minCommittedLog + 1.15294948743027098E18 == 0
zksInstance.sessionTracker.currentTime == 26687972 || zksInstance.sessionTracker.currentTime == 26688000
zksInstance.sessionTracker.nextExpirationTime == 26688000 || zksInstance.sessionTracker.nextExpirationTime == 26691000
zksInstance.sessionTracker.nextSessionId == 72059343060860929L || zksInstance.sessionTracker.nextSessionId == 72059343060860930L
112 * zksInstance.hzxid - 84 * zksInstance.serverStats.count - zksInstance.sessionTracker.currentTime + 26687972 == 0
3 * zksInstance.hzxid - 2 * zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118686121721856E17 == 0
27 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 81 * zksInstance.sessionTracker.nextSessionId + 5.8368067879297352E18 == 0
112 * zksInstance.hzxid - 84 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.currentTime + 26688140 == 0
3 * zksInstance.hzxid - 2 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118686121721856E17 == 0
112 * zksInstance.hzxid - 84 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.currentTime + 26688056 == 0
3 * zksInstance.hzxid - 2 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118686121721856E17 == 0
22 * zksInstance.hzxid - 6 * zksInstance.serverStats.totalLatency + 5 * zksInstance.sessionTracker.currentTime - 133439860 == 0
3300 * zksInstance.hzxid - 900 * zksInstance.serverStats.totalLatency + 7 * zksInstance.sessionTracker.nextExpirationTime - 186816000 == 0
27 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 70 * zksInstance.sessionTracker.nextSessionId + 5.044154014260265E18 == 0
28 * zksInstance.hzxid - zksInstance.sessionTracker.currentTime - 84 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 26688056 == 0
28 * zksInstance.hzxid - zksInstance.sessionTracker.currentTime - 84 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 26687972 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029182582784E17 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.16178029182582784E17 == 0
27 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 81 * zksInstance.sessionTracker.nextSessionId + 5.8368067879297352E18 == 0
22 * zksInstance.serverStats.count - 6 * zksInstance.serverStats.totalLatency + 5 * zksInstance.sessionTracker.currentTime - 133439860 == 0
3300 * zksInstance.serverStats.count - 900 * zksInstance.serverStats.totalLatency + 7 * zksInstance.sessionTracker.nextExpirationTime - 186816000 == 0
27 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency - 70 * zksInstance.sessionTracker.nextSessionId + 5.044154014260265E18 == 0
28 * zksInstance.serverStats.count - zksInstance.sessionTracker.currentTime - 84 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 26688056 == 0
28 * zksInstance.serverStats.count - zksInstance.sessionTracker.currentTime - 84 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 26687972 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029182582784E17 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.16178029182582784E17 == 0
zksInstance.serverStats.maxLatency - 27 * zksInstance.serverStats.packetsReceived + 81 * zksInstance.sessionTracker.nextSessionId - 5.8368067879297352E18 == 0
zksInstance.serverStats.maxLatency - 27 * zksInstance.serverStats.packetsSent + 81 * zksInstance.sessionTracker.nextSessionId - 5.8368067879297352E18 == 0
22 * zksInstance.serverStats.packetsReceived - 6 * zksInstance.serverStats.totalLatency + 5 * zksInstance.sessionTracker.currentTime - 133439904 == 0
3300 * zksInstance.serverStats.packetsReceived - 900 * zksInstance.serverStats.totalLatency + 7 * zksInstance.sessionTracker.nextExpirationTime - 186822600 == 0
27 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 70 * zksInstance.sessionTracker.nextSessionId + 5.044154014260265E18 == 0
28 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.currentTime - 84 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 26688000 == 0
28 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.currentTime - 84 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 26687916 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029182582784E17 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.16178029182582784E17 == 0
22 * zksInstance.serverStats.packetsSent - 6 * zksInstance.serverStats.totalLatency + 5 * zksInstance.sessionTracker.currentTime - 133439882 == 0
3300 * zksInstance.serverStats.packetsSent - 900 * zksInstance.serverStats.totalLatency + 7 * zksInstance.sessionTracker.nextExpirationTime - 186819300 == 0
27 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 70 * zksInstance.sessionTracker.nextSessionId + 5.044154014260265E18 == 0
28 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.currentTime - 84 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 26688028 == 0
28 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.currentTime - 84 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 26687944 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029182582784E17 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.16178029182582784E17 == 0
28 * zksInstance.serverStats.totalLatency - 27 * zksInstance.sessionTracker.currentTime - 308 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 720575552 == 0
28 * zksInstance.serverStats.totalLatency - 27 * zksInstance.sessionTracker.currentTime - 308 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 720575244 == 0
1000 * zksInstance.serverStats.totalLatency - 9 * zksInstance.sessionTracker.nextExpirationTime - 11000 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 240203000 == 0
1000 * zksInstance.serverStats.totalLatency - 9 * zksInstance.sessionTracker.nextExpirationTime - 11000 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 240192000 == 0
zksInstance.serverStats.totalLatency - 11 * zksInstance.sessionTracker.nextSessionId - 27 * zksInstance.zkDb.minCommittedLog + 7.9265277366947021E17 == 0
zksInstance.serverStats.totalLatency - 11 * zksInstance.sessionTracker.nextSessionId - 27 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 7.9265277366947021E17 == 0
zksInstance.sessionTracker.currentTime == 26686863
zksInstance.sessionTracker.nextSessionId == 72059342988181505L || zksInstance.sessionTracker.nextSessionId == 72059342988181506L
3 * zksInstance.hzxid - 2 * zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118685976363008E17 == 0
27 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 81 * zksInstance.sessionTracker.nextSessionId + 5.8368067820427018E18 == 0
3 * zksInstance.hzxid - 2 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118685976363008E17 == 0
3 * zksInstance.hzxid - 2 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118685976363008E17 == 0
3 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 31 * zksInstance.sessionTracker.nextSessionId - 2.23383963263362662E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178028964544512E17 == 0
27 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 81 * zksInstance.sessionTracker.nextSessionId + 5.8368067820427018E18 == 0
3 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency + 31 * zksInstance.sessionTracker.nextSessionId - 2.23383963263362662E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178028964544512E17 == 0
zksInstance.serverStats.maxLatency - 27 * zksInstance.serverStats.packetsReceived + 81 * zksInstance.sessionTracker.nextSessionId - 5.8368067820427018E18 == 0
zksInstance.serverStats.maxLatency - 27 * zksInstance.serverStats.packetsSent + 81 * zksInstance.sessionTracker.nextSessionId - 5.8368067820427018E18 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog + 17 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 9.223372036854776E18 == 0
3 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency + 31 * zksInstance.sessionTracker.nextSessionId - 2.23383963263362662E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178028964544512E17 == 0
3 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 31 * zksInstance.sessionTracker.nextSessionId - 2.23383963263362662E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178028964544512E17 == 0
zksInstance.serverStats.totalLatency - 16 * zksInstance.sessionTracker.nextSessionId - 27 * zksInstance.zkDb.minCommittedLog + 1.15294948781090406E18 == 0
zksInstance.sessionTracker.currentTime == 26688254
zksInstance.sessionTracker.nextSessionId == 72059343079276545L || zksInstance.sessionTracker.nextSessionId == 72059343079276546L
3 * zksInstance.hzxid - 2 * zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118686158553088E17 == 0
28 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 84 * zksInstance.sessionTracker.nextSessionId + 6.0529848186592297E18 == 0
3 * zksInstance.hzxid - 2 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118686158553088E17 == 0
3 * zksInstance.hzxid - 2 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118686158553088E17 == 0
28 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 71 * zksInstance.sessionTracker.nextSessionId + 5.1162133586286346E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029237829632E17 == 0
28 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 84 * zksInstance.sessionTracker.nextSessionId + 6.0529848186592297E18 == 0
28 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency - 71 * zksInstance.sessionTracker.nextSessionId + 5.1162133586286346E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029237829632E17 == 0
zksInstance.serverStats.maxLatency - 28 * zksInstance.serverStats.packetsReceived + 84 * zksInstance.sessionTracker.nextSessionId - 6.0529848186592297E18 == 0
zksInstance.serverStats.maxLatency - 28 * zksInstance.serverStats.packetsSent + 84 * zksInstance.sessionTracker.nextSessionId - 6.0529848186592297E18 == 0
28 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 71 * zksInstance.sessionTracker.nextSessionId + 5.1162133586286346E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029237829632E17 == 0
28 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 71 * zksInstance.sessionTracker.nextSessionId + 5.1162133586286346E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029237829632E17 == 0
zksInstance.serverStats.totalLatency - 13 * zksInstance.sessionTracker.nextSessionId - 28 * zksInstance.zkDb.minCommittedLog + 9.3677146003059507E17 == 0
zksInstance.sessionTracker.currentTime == 26687660
zksInstance.sessionTracker.nextSessionId == 72059343040348161L
zksInstance.sessionTracker.currentTime == 26688935
zksInstance.sessionTracker.nextSessionId == 72059343123972097L
zksInstance.sessionTracker.currentTime == 26687470
zksInstance.sessionTracker.nextSessionId == 72059343027961857L
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 16
zksInstance.sessionTracker.currentTime == 26688765
zksInstance.sessionTracker.nextSessionId == 72059343112830977L
zksInstance.serverStats.totalLatency % zksInstance.serverStats.minLatency == 0
zksInstance.txnLogFactory.txnLog.currentSize % zksInstance.serverStats.minLatency == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 47
zksInstance.serverStats.minLatency == 47 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26687715
zksInstance.sessionTracker.nextSessionId == 72059343044018177L
zksInstance.sessionTracker.currentTime == 26688996
zksInstance.sessionTracker.nextSessionId == 72059343127969793L
zksInstance.sessionTracker.currentTime == 26686441
zksInstance.sessionTracker.nextSessionId == 72059342960525313L
zksInstance.sessionTracker.currentTime == 26687933
zksInstance.sessionTracker.nextSessionId == 72059343058305025L
zksInstance.serverStats.minLatency == 6 || zksInstance.serverStats.minLatency == 27 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 27 || zksInstance.serverStats.totalLatency == 33
zksInstance.sessionTracker.currentTime == 26686604
zksInstance.sessionTracker.nextSessionId == 72059342971207681L
zksInstance.serverStats.minLatency == 5 || zksInstance.serverStats.minLatency == 25 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 25 || zksInstance.serverStats.totalLatency == 30
zksInstance.sessionTracker.currentTime == 26688077
zksInstance.sessionTracker.nextSessionId == 72059343067742209L
zksInstance.sessionTracker.currentTime == 26686752
zksInstance.sessionTracker.nextSessionId == 72059342980907009L || zksInstance.sessionTracker.nextSessionId == 72059342980907010L
daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118685961814016E17 == 0
29 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 87 * zksInstance.sessionTracker.nextSessionId + 6.2691628393389097E18 == 0
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118685961814016E17 == 0
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118685961814016E17 == 0
29 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 75 * zksInstance.sessionTracker.nextSessionId + 5.4044507235680256E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178028942721024E17 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.16178028942721024E17 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 2.16178028942721024E17 == 0
29 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 87 * zksInstance.sessionTracker.nextSessionId + 6.2691628393389097E18 == 0
6 * zksInstance.serverStats.count - 5 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118685961814016E17 == 0
29 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency - 75 * zksInstance.sessionTracker.nextSessionId + 5.4044507235680256E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178028942721024E17 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.16178028942721024E17 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 2.16178028942721024E17 == 0
zksInstance.serverStats.maxLatency - 29 * zksInstance.serverStats.packetsReceived + 87 * zksInstance.sessionTracker.nextSessionId - 6.2691628393389097E18 == 0
zksInstance.serverStats.maxLatency - 29 * zksInstance.serverStats.packetsSent + 87 * zksInstance.sessionTracker.nextSessionId - 6.2691628393389097E18 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog + 24 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 9.223372036854776E18 == 0
6 * zksInstance.serverStats.packetsReceived - 5 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118685961814016E17 == 0
29 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 75 * zksInstance.sessionTracker.nextSessionId + 5.4044507235680256E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178028942721024E17 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.16178028942721024E17 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 2.16178028942721024E17 == 0
29 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 75 * zksInstance.sessionTracker.nextSessionId + 5.4044507235680256E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178028942721024E17 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.16178028942721024E17 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 2.16178028942721024E17 == 0
zksInstance.serverStats.totalLatency - 12 * zksInstance.sessionTracker.nextSessionId - 29 * zksInstance.zkDb.minCommittedLog + 8.647121157708841E17 == 0
zksInstance.serverStats.totalLatency - 38 * zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.7382550332744663E18 == 0
zksInstance.serverStats.totalLatency - 38 * zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 2.7382550332744663E18 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 19
zksInstance.sessionTracker.currentTime == 26688182
zksInstance.sessionTracker.nextSessionId == 72059343074557953L || zksInstance.sessionTracker.nextSessionId == 72059343074557954L
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118686149115904E17 == 0
19 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 57 * zksInstance.sessionTracker.nextSessionId + 4.1073825552498033E18 == 0
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118686149115904E17 == 0
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118686149115904E17 == 0
19 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 41 * zksInstance.sessionTracker.nextSessionId + 2.954433066056876E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029223673856E17 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.16178029223673856E17 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 2.16178029223673856E17 == 0
19 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 57 * zksInstance.sessionTracker.nextSessionId + 4.1073825552498033E18 == 0
6 * zksInstance.serverStats.count - 5 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118686149115904E17 == 0
19 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency - 41 * zksInstance.sessionTracker.nextSessionId + 2.954433066056876E18 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029223673856E17 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.16178029223673856E17 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 2.16178029223673856E17 == 0
zksInstance.serverStats.maxLatency - 19 * zksInstance.serverStats.packetsReceived + 57 * zksInstance.sessionTracker.nextSessionId - 4.1073825552498033E18 == 0
zksInstance.serverStats.maxLatency - 19 * zksInstance.serverStats.packetsSent + 57 * zksInstance.sessionTracker.nextSessionId - 4.1073825552498033E18 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog + 13 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 9.223372036854776E18 == 0
6 * zksInstance.serverStats.packetsReceived - 5 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 1.44118686149115904E17 == 0
19 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 41 * zksInstance.sessionTracker.nextSessionId + 2.954433066056876E18 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029223673856E17 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.16178029223673856E17 == 0
zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 2.16178029223673856E17 == 0
19 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 41 * zksInstance.sessionTracker.nextSessionId + 2.954433066056876E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16178029223673856E17 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.16178029223673856E17 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 2.16178029223673856E17 == 0
zksInstance.serverStats.totalLatency - 16 * zksInstance.sessionTracker.nextSessionId - 19 * zksInstance.zkDb.minCommittedLog + 1.15294948919292723E18 == 0
zksInstance.serverStats.totalLatency - 30 * zksInstance.sessionTracker.nextSessionId - 5 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.16178029223673856E18 == 0
zksInstance.serverStats.totalLatency - 30 * zksInstance.sessionTracker.nextSessionId - 5 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 2.16178029223673856E18 == 0
zksInstance.sessionTracker.currentTime == 26687538
zksInstance.sessionTracker.nextSessionId == 72059343032352769L
zksInstance.sessionTracker.currentTime == 26688812
zksInstance.sessionTracker.nextSessionId == 72059343115911169L
zksInstance.serverStats.minLatency == 2 || zksInstance.serverStats.minLatency == 29 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26686971
zksInstance.sessionTracker.nextSessionId == 72059342995259393L
zksInstance.sessionTracker.currentTime == 26688336
zksInstance.sessionTracker.nextSessionId == 72059343084716033L
zksInstance.serverStats.minLatency + 23 * zksInstance.serverStats.totalLatency + 9.2233720368547748E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.sessionTracker.currentTime == 26687256
zksInstance.sessionTracker.nextSessionId == 72059343013937153L
zksInstance.serverStats.minLatency == 23 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26688568
zksInstance.sessionTracker.nextSessionId == 72059343099920385L
zksInstance.sessionTracker.currentTime == 26687602
zksInstance.sessionTracker.nextSessionId == 72059343036612609L
zksInstance.sessionTracker.currentTime == 26688875
zksInstance.sessionTracker.nextSessionId == 72059343120039937L
zksInstance.sessionTracker.currentTime == 26686088
zksInstance.sessionTracker.nextSessionId == 72059342937391105L
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog + 33 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 9.223372036854776E18 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog + 33 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 - 9.223372036854776E18 == 0
zksInstance.sessionTracker.currentTime == 26687782
zksInstance.sessionTracker.nextSessionId == 72059343048409089L
zksInstance.serverStats.minLatency == 2 || zksInstance.serverStats.minLatency == 28 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26686668
zksInstance.sessionTracker.nextSessionId == 72059342975401985L
zksInstance.sessionTracker.currentTime == 26688126
zksInstance.sessionTracker.nextSessionId == 72059343070953473L
zksInstance.serverStats.minLatency + 21 * zksInstance.serverStats.totalLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.minLatency == 1 || zksInstance.serverStats.minLatency == 23 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26687411
zksInstance.sessionTracker.nextSessionId == 72059343024029697L
zksInstance.sessionTracker.currentTime == 26688713
zksInstance.sessionTracker.nextSessionId == 72059343109423105L
zksInstance.self.qcm.SEND_CAPACITY == zksInstance.serverStats.packetsReceived
zksInstance.zkDb.dataTree.initialized == zksInstance.zkDb.initialized
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
zksInstance.self.electionTimeTaken == 202 || zksInstance.self.electionTimeTaken == 227
zksInstance.sessionTracker.currentTime == 25260687 || zksInstance.sessionTracker.currentTime == 25264001
zksInstance.sessionTracker.nextExpirationTime == 25264000 || zksInstance.sessionTracker.nextExpirationTime == 25268000
zksInstance.sessionTracker.nextSessionId == 72059249673699328L || zksInstance.sessionTracker.nextSessionId == 144116843560239104L
zksInstance.zkDb.minCommittedLog == 0 || zksInstance.zkDb.minCommittedLog == 4294967297L
daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 1
zksInstance.zkDb.dataTree.lastProcessedZxid % zksInstance.firstProcessor.zks.hzxid == 0
daikon.Quant.subsetOf(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
67108880 * zksInstance.firstProcessor.zks.hzxid + 2.8823044487118848E17 * zksInstance.self.bcVote.id - zksInstance.txnLogFactory.txnLog.currentSize - 8.6469133461356544E17 == 0
zksInstance.firstProcessor.zks.hzxid + 4.294967296E9 * zksInstance.self.bcVote.id - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
zksInstance.firstProcessor.zks.hzxid + 4.294967296E9 * zksInstance.self.bcVote.id - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.2884901889E10 == 0
zksInstance.firstProcessor.zks.hzxid + 4.294967296E9 * zksInstance.self.bcVote.id - daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
zksInstance.firstProcessor.zks.hzxid + 4.294967296E9 * zksInstance.self.bcVote.id - daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.2884901889E10 == 0
67108880 * zksInstance.firstProcessor.zks.hzxid - 2.8823044487118848E17 * zksInstance.self.bcVote.peerEpoch - zksInstance.txnLogFactory.txnLog.currentSize - 2.8823044487118848E17 == 0
zksInstance.firstProcessor.zks.hzxid - 4.294967296E9 * zksInstance.self.bcVote.peerEpoch - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid - 4.294967296E9 * zksInstance.self.bcVote.peerEpoch - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.294967297E9 == 0
zksInstance.firstProcessor.zks.hzxid - 4.294967296E9 * zksInstance.self.bcVote.peerEpoch - daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid - 4.294967296E9 * zksInstance.self.bcVote.peerEpoch - daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.294967297E9 == 0
25 * zksInstance.firstProcessor.zks.hzxid + 4.294967296E9 * zksInstance.self.electionTimeTaken - 25 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.082331758592E12 == 0
25 * zksInstance.firstProcessor.zks.hzxid + 4.294967296E9 * zksInstance.self.electionTimeTaken - 25 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.082331758617E12 == 0
25 * zksInstance.firstProcessor.zks.hzxid + 4.294967296E9 * zksInstance.self.electionTimeTaken - 25 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.082331758592E12 == 0
25 * zksInstance.firstProcessor.zks.hzxid + 4.294967296E9 * zksInstance.self.electionTimeTaken - 25 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.082331758617E12 == 0
1657 * zksInstance.firstProcessor.zks.hzxid - -2147483648 * zksInstance.sessionTracker.currentTime - 1657 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 5.4239795508936704E16 == 0
1657 * zksInstance.firstProcessor.zks.hzxid - -2147483648 * zksInstance.sessionTracker.currentTime - 1657 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 5.4239795508935048E16 == 0
1657 * zksInstance.firstProcessor.zks.hzxid - -2147483648 * zksInstance.sessionTracker.currentTime - 1657 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 5.4239795508936704E16 == 0
1657 * zksInstance.firstProcessor.zks.hzxid - -2147483648 * zksInstance.sessionTracker.currentTime - 1657 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 5.4239795508935048E16 == 0
125 * zksInstance.firstProcessor.zks.hzxid - 134217728 * zksInstance.sessionTracker.nextExpirationTime - 125 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 3.39033980928E15 == 0
125 * zksInstance.firstProcessor.zks.hzxid - 134217728 * zksInstance.sessionTracker.nextExpirationTime - 125 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 3.390339809279875E15 == 0
125 * zksInstance.firstProcessor.zks.hzxid - 134217728 * zksInstance.sessionTracker.nextExpirationTime - 125 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 3.39033980928E15 == 0
125 * zksInstance.firstProcessor.zks.hzxid - 134217728 * zksInstance.sessionTracker.nextExpirationTime - 125 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 3.390339809279875E15 == 0
8.589934593E9 * zksInstance.sessionTracker.currentTime - 3314 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.4233521618944E13 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 2.16973415582626432E17 == 0
8.589934593E9 * zksInstance.sessionTracker.currentTime - 3314 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.4233521618944E13 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2.16987649104245376E17 == 0
8.589934593E9 * zksInstance.sessionTracker.nextExpirationTime - 4000 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.7179869184E13 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 2.16998927688368E17 == 0
8.589934593E9 * zksInstance.sessionTracker.nextExpirationTime - 4000 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.7179869184E13 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2.17016107557552E17 == 0
zksInstance.sessionTracker.currentTime == 25423065
zksInstance.sessionTracker.nextExpirationTime == 25425000
zksInstance.sessionTracker.nextSessionId == 72059260163850241L
zksInstance.sessionTracker.currentTime == 26202603
zksInstance.sessionTracker.nextSessionId == 72059311251718145L
zksInstance.commitProcessor.matchSyncs == zksInstance.self.responder.running
zksInstance.hzxid == zksInstance.self.electionType
zksInstance.maxSessionTimeout == zksInstance.self.bcVote.electionEpoch
zksInstance.maxSessionTimeout == zksInstance.self.bcVote.peerEpoch
zksInstance.maxSessionTimeout == zksInstance.self.currentVote.electionEpoch
zksInstance.self.myid == daikon.Quant.size(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE)
daikon.Quant.pairwiseEqual(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE)
daikon.Quant.pairwiseEqual(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.currentVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.currentVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.numGroups-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.numGroups-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.numGroups-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.numGroups-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.numGroups)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.numGroups)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.numGroups)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.myid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.myid) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.myid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverWeight_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
zksInstance.self.electionTimeTaken == 25426815
zksInstance.self.myid == 2
daikon.Quant.eltsNotEqual(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, null)
zksInstance.sessionTracker.nextSessionId == 144116854449569792L || zksInstance.sessionTracker.nextSessionId == 144116854449569793L || zksInstance.sessionTracker.nextSessionId == 144116854449569794L
zksInstance.syncProcessor.randRoll == 20257
zksInstance.syncProcessor.requestOfDeath.createTime == 25426884
daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE) == 5
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.hzxid) != null
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) != null
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) != null
daikon.Quant.getElement_Object(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE, zksInstance.self.myid) != null
2 * zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.requestsInProcess <= zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.requestsInProcess < daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)-1
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.electionTimeTaken > zksInstance.txnLogFactory.txnLog.currentSize
daikon.Quant.subsetOf(zksInstance.self.quorumConfig.groupWeight_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.maxLatency - 43 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.minLatency >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.packetsReceived >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.packetsSent >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.syncProcessor.zks.requestsInProcess - -2147483648 == 0
zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - -2147483648 == 0
zksInstance.sessionTracker.nextSessionId > daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)
2 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - -2147483648 == 0
zksInstance.syncProcessor.zks.requestsInProcess < daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.dataTree.lastProcessedZxid != daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid != daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) < daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.quorumConfig.serverGroup_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
2 * zksInstance.requestsInProcess + zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId + 2.8823370889913958E17 == 0
43 * zksInstance.requestsInProcess + zksInstance.serverStats.maxLatency - 43 * zksInstance.sessionTracker.nextSessionId + 6.1970247413315011E18 == 0
2 * zksInstance.requestsInProcess + zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 2.8823370889913958E17 == 0
zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId + zksInstance.syncProcessor.zks.requestsInProcess + 1.44116854449569792E17 == 0
zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 1.44116854449569792E17 == 0
zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 1.44116854449569792E17 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 1.44116854449569792E17 == 0
zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId + 2 * zksInstance.syncProcessor.zks.requestsInProcess + 2.8823370889913958E17 == 0
zksInstance.serverStats.maxLatency - 43 * zksInstance.sessionTracker.nextSessionId + 43 * zksInstance.syncProcessor.zks.requestsInProcess + 6.1970247413315011E18 == 0
zksInstance.serverStats.packetsReceived - zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 1.44116854449569792E17 == 0
zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 2 * zksInstance.syncProcessor.zks.requestsInProcess + 2.8823370889913958E17 == 0
zksInstance.sessionTracker.nextSessionId - zksInstance.syncProcessor.zks.requestsInProcess - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) - 1.44116854449569792E17 == 0
zksInstance.sessionTracker.nextSessionId - zksInstance.syncProcessor.zks.requestsInProcess - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 1.44116854449569792E17 == 0
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
zksInstance.self.start_fle == 26690072
zksInstance.serverCnxnFactory.zkServer.requestsInProcess == 0 || zksInstance.serverCnxnFactory.zkServer.requestsInProcess == 1
zksInstance.sessionTracker.nextSessionId == 360289719366975488L || zksInstance.sessionTracker.nextSessionId == 360289719366975489L
zksInstance.syncProcessor.randRoll == 46418
zksInstance.syncProcessor.requestOfDeath.createTime == 26690339
zksInstance.requestsInProcess >= zksInstance.self.zkDb.maxCommittedLog
zksInstance.requestsInProcess < daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess < daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.acceptedEpoch >= zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.myid < zksInstance.serverStats.minLatency
zksInstance.self.qcm.RECV_CAPACITY > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt > zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.zkDb.maxCommittedLog <= zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.zkDb.maxCommittedLog <= zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.zkDb.maxCommittedLog <= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog <= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.requestsInProcess < zksInstance.serverStats.minLatency
zksInstance.serverCnxnFactory.zkServer.requestsInProcess <= zksInstance.serverStats.packetsSent
zksInstance.serverCnxnFactory.zkServer.requestsInProcess <= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.requestsInProcess < daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.requestsInProcess < daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.zkServer.requestsInProcess <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.requestsInProcess <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.zks.requestsInProcess < daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.zks.requestsInProcess < daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.zks.requestsInProcess <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) < daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) < daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess + zksInstance.serverCnxnFactory.zkServer.requestsInProcess - zksInstance.sessionTracker.nextSessionId + 3.6028971936697549E17 == 0
2 * zksInstance.requestsInProcess + zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId + 7.2057943873395098E17 == 0
2 * zksInstance.requestsInProcess + zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 1.08086915810092646E18 == 0
2 * zksInstance.requestsInProcess + zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 7.2057943873395098E17 == 0
zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId + zksInstance.syncProcessor.zks.requestsInProcess + 3.6028971936697549E17 == 0
2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId + 7.2057943873395098E17 == 0
2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 1.08086915810092646E18 == 0
2 * zksInstance.serverCnxnFactory.zkServer.requestsInProcess + zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId + 7.2057943873395098E17 == 0
zksInstance.serverCnxnFactory.zkServer.requestsInProcess - zksInstance.sessionTracker.nextSessionId + zksInstance.syncProcessor.zks.requestsInProcess + 3.6028971936697549E17 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 3.6028971936697549E17 == 0
zksInstance.serverStats.packetsReceived - zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 3.6028971936697549E17 == 0
zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 3.6028971936697549E17 == 0
zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 3.6028971936697549E17 == 0
zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 3.6028971936697549E17 == 0
zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 3.6028971936697549E17 == 0
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) + daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 3.6028971936697549E17 == 0
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) + daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 3.6028971936697549E17 == 0
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 + daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 3.6028971936697549E17 == 0
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 + daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 3.6028971936697549E17 == 0
zksInstance.sessionTracker.nextSessionId == 72059266621374464L
zksInstance.syncProcessor.randRoll == 48810
zksInstance.syncProcessor.requestOfDeath.createTime == 25521625
zksInstance.self.myid == zksInstance.self.quorumConfig.half
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
zksInstance.self.electionTimeTaken == 321
zksInstance.syncProcessor.randRoll == 488
zksInstance.syncProcessor.requestOfDeath.createTime == 25440296
zksInstance.requestsInProcess <= zksInstance.self.electionType
zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.self.electionType >= zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.electionType >= zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.electionType >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.zkServer.requestsInProcess - zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.serverStats.packetsSent != zksInstance.syncProcessor.randRoll
zksInstance.sessionTracker.nextSessionId - zksInstance.syncProcessor.zks.requestsInProcess - -2147483648 == 0
zksInstance.syncProcessor.zks.requestsInProcess <= zksInstance.zkDb.minCommittedLog
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 1.44116855328079872E17 == 0
3 * zksInstance.serverStats.maxLatency - 59 * zksInstance.serverStats.packetsReceived + 59 * zksInstance.sessionTracker.nextSessionId - 8.5028944643567124E18 == 0
zksInstance.serverStats.packetsReceived - zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 1.44116855328079872E17 == 0
zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 1.44116855328079872E17 == 0
zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 1.44116855328079872E17 == 0
zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 1.44116855328079872E17 == 0
zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 1.44116855328079872E17 == 0
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) + daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.44116855328079872E17 == 0
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) + daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.44116855328079872E17 == 0
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 + daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.44116855328079872E17 == 0
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 + daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.44116855328079872E17 == 0
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
zksInstance.self.electionTimeTaken == 349
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 71 || zksInstance.serverStats.maxLatency == 104
zksInstance.sessionTracker.nextSessionId == 72059270760562689L
zksInstance.syncProcessor.randRoll == 19379
zksInstance.syncProcessor.requestOfDeath.createTime == 25584804
zksInstance.serverStats.count >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverStats.minLatency + 2147483647 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - -2147483648 == 0
zksInstance.serverStats.packetsSent > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.hzxid))
zksInstance.self.zkDb.maxCommittedLog - zksInstance.serverStats.count - 4.294967296E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.294967296E9 == 0
31 * zksInstance.self.zkDb.maxCommittedLog + zksInstance.serverStats.minLatency + 9.2233719037107896E18 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 9.223372036854776E18 == 0
31 * zksInstance.self.zkDb.maxCommittedLog + zksInstance.serverStats.minLatency + 9.2233719037107896E18 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.33143986278E11 == 0
zksInstance.self.zkDb.maxCommittedLog - zksInstance.serverStats.packetsReceived - 4.294967296E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.294967294E9 == 0
zksInstance.self.zkDb.maxCommittedLog - zksInstance.serverStats.packetsSent - 4.294967296E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.294967295E9 == 0
34 * zksInstance.self.zkDb.maxCommittedLog - zksInstance.serverStats.totalLatency - 1.46028888027E11 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.46028888027E11 == 0
33 * zksInstance.self.zkDb.minCommittedLog - 2 * zksInstance.serverStats.maxLatency - 1.41733920659E11 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.41733920659E11 == 0
zksInstance.self.zkDb.minCommittedLog - 4.294967299E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 4.294967297E9 == 0
zksInstance.self.zkDb.minCommittedLog - 4.294967299E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 4.294967299E9 == 0
31 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 9.223372036854776E18 == 0
zksInstance.self.electionTimeTaken == 208
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 36
zksInstance.serverStats.minLatency == 3 || zksInstance.serverStats.minLatency == 36 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 25906003
zksInstance.sessionTracker.nextExpirationTime == 25908000
zksInstance.sessionTracker.nextSessionId == 360289667965452288L || zksInstance.sessionTracker.nextSessionId == 360289667965452289L
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) != null
zksInstance.firstProcessor.zks.requestsInProcess >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.id != zksInstance.serverStats.packetsReceived
zksInstance.self.bcVote.peerEpoch < zksInstance.serverStats.packetsSent
zksInstance.self.electionType <= zksInstance.serverStats.minLatency
zksInstance.serverStats.totalLatency % zksInstance.self.electionType == 0
zksInstance.self.electionType > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.quorumConfig.half > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 % zksInstance.serverStats.packetsReceived == 0
zksInstance.serverStats.packetsSent != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 % zksInstance.serverStats.packetsSent == 0
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.firstProcessor.zks.hzxid - zksInstance.self.zkDb.maxCommittedLog + 4.294967296E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid - zksInstance.self.zkDb.maxCommittedLog + 4.294967296E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 == 0
zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 3.6028966796545229E17 == 0
zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 3.6028966796545229E17 == 0
zksInstance.self.zkDb.maxCommittedLog + 5 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 4.294967304E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.294967304E9 == 0
zksInstance.self.zkDb.maxCommittedLog + 5 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.294967304E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.294967299E9 == 0
5 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.packetsReceived + 3 * zksInstance.sessionTracker.nextSessionId - 1.08086900389635686E18 == 0
zksInstance.serverStats.packetsReceived - zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 3.6028966796545229E17 == 0
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 3.6028966796545229E17 == 0
zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 3.6028966796545229E17 == 0
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.tick) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.tick) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.tick)
zksInstance.self.electionTimeTaken == 207
zksInstance.sessionTracker.currentTime == 25959637 || zksInstance.sessionTracker.currentTime == 25962000
zksInstance.sessionTracker.nextExpirationTime == 25960000 || zksInstance.sessionTracker.nextExpirationTime == 25964000
zksInstance.sessionTracker.nextSessionId == 360289671480410112L
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 1 || daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 2
zksInstance.firstProcessor.zks.requestsInProcess <= zksInstance.self.tick
zksInstance.self.acceptedEpoch >= zksInstance.self.tick
zksInstance.self.electionType > zksInstance.self.tick
zksInstance.self.quorumConfig.half > zksInstance.self.tick
zksInstance.self.quorumConfig.half >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.tick >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.electionTimeTaken == 239
zksInstance.sessionTracker.nextSessionId == 288232075305484288L
zksInstance.syncProcessor.randRoll == 36842
zksInstance.syncProcessor.requestOfDeath.createTime == 25889868
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
zksInstance.self.electionTimeTaken == 233
zksInstance.sessionTracker.nextSessionId == 288232078003732481L
zksInstance.syncProcessor.randRoll == 16606
4.294967297E9 * zksInstance.self.zkDb.maxCommittedLog - 4.294967296E9 * zksInstance.self.zkDb.minCommittedLog - 4.294967297E9 * zksInstance.serverStats.packetsReceived + 8.589934594E9 == 0
4.294967297E9 * zksInstance.self.zkDb.maxCommittedLog - 4.294967296E9 * zksInstance.self.zkDb.minCommittedLog - 4.294967297E9 * zksInstance.serverStats.packetsSent + 4.294967297E9 == 0
11 * zksInstance.self.zkDb.maxCommittedLog - 11 * zksInstance.serverStats.count - 1073741824 * zksInstance.serverStats.maxLatency == 0
6401 * zksInstance.self.zkDb.maxCommittedLog - 6401 * zksInstance.serverStats.count - 268435456 * zksInstance.txnLogFactory.txnLog.currentSize == 0
zksInstance.self.zkDb.maxCommittedLog - zksInstance.serverStats.count - 4.294967296E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 0
11 * zksInstance.self.zkDb.maxCommittedLog - 1073741824 * zksInstance.serverStats.maxLatency - 11 * zksInstance.serverStats.packetsReceived + 22 == 0
11 * zksInstance.self.zkDb.maxCommittedLog - 1073741824 * zksInstance.serverStats.maxLatency - 11 * zksInstance.serverStats.packetsSent + 11 == 0
19 * zksInstance.self.zkDb.maxCommittedLog + zksInstance.serverStats.minLatency + 9.2233719552503972E18 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 9.223372036854776E18 == 0
19 * zksInstance.self.zkDb.maxCommittedLog + zksInstance.serverStats.minLatency + 9.2233719552503972E18 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 8.1604378687E10 == 0
6401 * zksInstance.self.zkDb.maxCommittedLog - 6401 * zksInstance.serverStats.packetsReceived - 268435456 * zksInstance.txnLogFactory.txnLog.currentSize + 12802 == 0
zksInstance.self.zkDb.maxCommittedLog - zksInstance.serverStats.packetsReceived - 4.294967296E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 2 == 0
6401 * zksInstance.self.zkDb.maxCommittedLog - 6401 * zksInstance.serverStats.packetsSent - 268435456 * zksInstance.txnLogFactory.txnLog.currentSize + 6401 == 0
zksInstance.self.zkDb.maxCommittedLog - zksInstance.serverStats.packetsSent - 4.294967296E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 1 == 0
23 * zksInstance.self.zkDb.maxCommittedLog - zksInstance.serverStats.totalLatency - 9.8784247787E10 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 9.8784247787E10 == 0
19 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 9.223372036854776E18 == 0
zksInstance.self.authInitialized == zksInstance.self.electionAlg.stop
zksInstance.self.authInitialized == zksInstance.self.qcm.shutdown
zksInstance.self.authInitialized == zksInstance.txnLogFactory.snapLog.close
zksInstance.self.bcVote.version == zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.serverCnxnFactory.maxClientCnxns == zksInstance.syncProcessor.zks.maxSessionTimeout
zksInstance.serverCnxnFactory.maxClientCnxns == zksInstance.syncProcessor.zks.minSessionTimeout
zksInstance.serverCnxnFactory.zkServer.hzxid == zksInstance.serverCnxnFactory.zkServer.requestsInProcess
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
zksInstance.self.currentVote.id == 5
zksInstance.self.electionAlg.proposedLeader == 2 || zksInstance.self.electionAlg.proposedLeader == 4 || zksInstance.self.electionAlg.proposedLeader == 5
zksInstance.self.electionAlg.proposedZxid == 0 || zksInstance.self.electionAlg.proposedZxid == 4294967300L
zksInstance.self.electionTimeTaken == 1 || zksInstance.self.electionTimeTaken == 2 || zksInstance.self.electionTimeTaken == 253
zksInstance.self.myid == 1 || zksInstance.self.myid == 4
zksInstance.sessionTracker.nextSessionId == 72059290787643392L || zksInstance.sessionTracker.nextSessionId == 288232072867414016L || zksInstance.sessionTracker.nextSessionId == 288232072902344704L
zksInstance.syncProcessor.randRoll == 12293 || zksInstance.syncProcessor.randRoll == 42768
zksInstance.self.acceptedEpoch < zksInstance.self.electionAlg.proposedLeader
zksInstance.self.bcVote.electionEpoch < zksInstance.self.electionAlg.proposedLeader
zksInstance.self.bcVote.electionEpoch <= zksInstance.self.electionTimeTaken
zksInstance.self.bcVote.electionEpoch >= zksInstance.serverStats.packetsReceived
zksInstance.self.bcVote.electionEpoch >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id > zksInstance.serverStats.packetsReceived
zksInstance.self.bcVote.peerEpoch < zksInstance.self.electionAlg.proposedLeader
zksInstance.self.bcVote.peerEpoch % zksInstance.self.electionTimeTaken == 0
zksInstance.self.bcVote.peerEpoch != zksInstance.serverStats.packetsReceived
zksInstance.self.currentVote.id != zksInstance.self.electionTimeTaken
zksInstance.self.electionAlg.proposedEpoch < zksInstance.self.electionAlg.proposedLeader
zksInstance.self.electionAlg.proposedEpoch <= zksInstance.self.electionTimeTaken
zksInstance.self.electionAlg.proposedEpoch < zksInstance.self.electionType
zksInstance.self.electionAlg.proposedEpoch < zksInstance.self.quorumConfig.half
zksInstance.self.electionAlg.proposedEpoch != zksInstance.serverStats.packetsReceived
zksInstance.self.electionAlg.proposedEpoch <= zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.electionAlg.proposedEpoch <= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.electionAlg.proposedEpoch <= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.electionAlg.proposedLeader != zksInstance.self.electionType
zksInstance.self.electionAlg.proposedLeader >= zksInstance.self.quorumConfig.half
zksInstance.self.electionAlg.proposedLeader > zksInstance.serverStats.packetsReceived
zksInstance.self.electionAlg.proposedLeader > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedLeader > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedZxid % zksInstance.self.electionTimeTaken == 0
zksInstance.self.electionAlg.proposedZxid != zksInstance.self.quorumConfig.half
zksInstance.self.electionAlg.proposedZxid <= zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.electionTimeTaken != zksInstance.self.myid
zksInstance.self.electionTimeTaken != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.self.electionType != zksInstance.self.myid
zksInstance.self.electionType > zksInstance.serverStats.packetsReceived
zksInstance.self.myid != zksInstance.self.quorumConfig.half
zksInstance.self.myid > zksInstance.serverStats.packetsReceived
zksInstance.self.myid > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.memberOf(daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) , zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch) , zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid) , zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE )
daikon.Quant.memberOf(daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half) , zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE )
zksInstance.self.quorumConfig.half > zksInstance.serverStats.packetsReceived
34 * zksInstance.self.bcVote.peerEpoch - zksInstance.self.zkDb.minCommittedLog + 4.294967297E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 4.294967297E9 == 0
4.294967331E9 * zksInstance.self.bcVote.peerEpoch - zksInstance.self.zkDb.minCommittedLog + 4.294967297E9 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 + 4.294967297E9 == 0
28 * zksInstance.self.bcVote.peerEpoch - zksInstance.zkDb.minCommittedLog + 4.294967297E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 4.294967297E9 == 0
4.294967325E9 * zksInstance.self.bcVote.peerEpoch - zksInstance.zkDb.minCommittedLog + 4.294967297E9 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 + 4.294967297E9 == 0
34 * zksInstance.self.electionAlg.proposedEpoch - zksInstance.self.zkDb.minCommittedLog + 4.294967297E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 4.294967297E9 == 0
4.294967331E9 * zksInstance.self.electionAlg.proposedEpoch - zksInstance.self.zkDb.minCommittedLog + 4.294967297E9 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 + 4.294967297E9 == 0
28 * zksInstance.self.electionAlg.proposedEpoch - zksInstance.zkDb.minCommittedLog + 4.294967297E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 4.294967297E9 == 0
4.294967325E9 * zksInstance.self.electionAlg.proposedEpoch - zksInstance.zkDb.minCommittedLog + 4.294967297E9 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 + 4.294967297E9 == 0
25 * zksInstance.self.electionAlg.proposedLeader - 2 * zksInstance.self.zkDb.minCommittedLog + 8.589934669E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 8.589934544E9 == 0
25 * zksInstance.self.electionAlg.proposedLeader - 2 * zksInstance.zkDb.minCommittedLog + 8.589934669E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 8.589934544E9 == 0
25 * zksInstance.self.electionTimeTaken + 252 * zksInstance.self.zkDb.minCommittedLog - 1.082331758844E12 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.082331765169E12 == 0
25 * zksInstance.self.electionTimeTaken + 252 * zksInstance.zkDb.minCommittedLog - 1.082331758844E12 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.082331765169E12 == 0
34 * zksInstance.self.myid - 3 * zksInstance.self.zkDb.minCommittedLog + 1.2884901993E10 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 1.2884901857E10 == 0
28 * zksInstance.self.myid - 3 * zksInstance.zkDb.minCommittedLog + 1.2884901975E10 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 1.2884901863E10 == 0
59 * zksInstance.self.zkDb.maxCommittedLog - 45 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 6.0129542186E10 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 6.0129542186E10 == 0
zksInstance.self.zkDb.maxCommittedLog - 4.2949673E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 4.2949673E9 == 0
zksInstance.self.zkDb.maxCommittedLog - 4.2949673E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 4.294967299E9 == 0
zksInstance.self.zkDb.minCommittedLog + 34 * zksInstance.serverStats.packetsReceived - 4.294967297E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.294967331E9 == 0
zksInstance.self.zkDb.minCommittedLog + 4.294967331E9 * zksInstance.serverStats.packetsReceived - 4.294967297E9 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 4.294967331E9 == 0
zksInstance.self.zkDb.minCommittedLog + 4.294967331E9 * zksInstance.serverStats.packetsReceived - 4.294967297E9 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 8.589934628E9 == 0
30475 * zksInstance.self.zkDb.minCommittedLog + 34 * zksInstance.syncProcessor.randRoll - 1.30889128376075E14 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.30889129830187E14 == 0
30475 * zksInstance.self.zkDb.minCommittedLog + 4.294967331E9 * zksInstance.syncProcessor.randRoll - 1.30889128376075E14 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 1.83687162812208E14 == 0
30475 * zksInstance.self.zkDb.minCommittedLog + 4.294967331E9 * zksInstance.syncProcessor.randRoll - 1.30889128376075E14 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 3.14576291188283E14 == 0
673 * zksInstance.self.zkDb.minCommittedLog - 96 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 2.478196130369E12 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2.478196130369E12 == 0
658 * zksInstance.self.zkDb.minCommittedLog - 153 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2.168958484985E12 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2.168958484985E12 == 0
235 * zksInstance.self.zkDb.minCommittedLog - 66 * zksInstance.zkDb.maxCommittedLog - 7.25849473193E11 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 7.25849473193E11 == 0
226 * zksInstance.self.zkDb.minCommittedLog - 221 * zksInstance.zkDb.minCommittedLog - 2.147483661E10 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2.147483661E10 == 0
zksInstance.self.zkDb.minCommittedLog - 4.294967331E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 34 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 4.294967331E9 == 0
zksInstance.self.zkDb.minCommittedLog - 4.294967331E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 34 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 4.294967297E9 == 0
28 * zksInstance.serverStats.packetsReceived + zksInstance.zkDb.minCommittedLog - 4.294967297E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.294967325E9 == 0
4.294967325E9 * zksInstance.serverStats.packetsReceived + zksInstance.zkDb.minCommittedLog - 4.294967297E9 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 4.294967325E9 == 0
4.294967325E9 * zksInstance.serverStats.packetsReceived + zksInstance.zkDb.minCommittedLog - 4.294967297E9 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 8.589934622E9 == 0
28 * zksInstance.syncProcessor.randRoll + 30475 * zksInstance.zkDb.minCommittedLog - 1.30889128376075E14 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.30889129573579E14 == 0
171798693 * zksInstance.syncProcessor.randRoll + 1219 * zksInstance.zkDb.minCommittedLog - 5.235565135043E12 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 7.347486502224E12 == 0
171798693 * zksInstance.syncProcessor.randRoll + 1219 * zksInstance.zkDb.minCommittedLog - 5.235565135043E12 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 1.2583051637267E13 == 0
379 * zksInstance.txnLogFactory.txnLog.currentSize - 25600 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 1.09951124038736E14 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 1.09951124038736E14 == 0
119 * zksInstance.txnLogFactory.txnLog.currentSize - 8192 * zksInstance.zkDb.dataTree.lastProcessedZxid + 3.5184359925904E13 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 3.5184359925904E13 == 0
2237 * zksInstance.txnLogFactory.txnLog.currentSize - 153600 * zksInstance.zkDb.maxCommittedLog + 6.59706748021808E14 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 6.59706748021808E14 == 0
2761 * zksInstance.txnLogFactory.txnLog.currentSize - 204800 * zksInstance.zkDb.minCommittedLog + 8.79609025389424E14 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 8.79609025389424E14 == 0
17 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 23 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2.5769803794E10 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 2.5769803794E10 == 0
17 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 23 * zksInstance.zkDb.maxCommittedLog + 2.5769803794E10 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 2.5769803794E10 == 0
14 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 299 * zksInstance.zkDb.minCommittedLog + 1.224065679645E12 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 1.224065679645E12 == 0
zksInstance.txnLogFactory.txnLog.lastZxidSeen - 4.294967305E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 6 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 4.294967305E9 == 0
zksInstance.txnLogFactory.txnLog.lastZxidSeen - 4.294967305E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 6 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 4.294967299E9 == 0
4 * zksInstance.zkDb.dataTree.lastProcessedZxid - 75 * zksInstance.zkDb.minCommittedLog + 3.04942678087E11 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 3.04942678087E11 == 0
zksInstance.zkDb.dataTree.lastProcessedZxid - 4.2949673E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 4.2949673E9 == 0
zksInstance.zkDb.dataTree.lastProcessedZxid - 4.2949673E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 4.294967299E9 == 0
42 * zksInstance.zkDb.maxCommittedLog - 541 * zksInstance.zkDb.minCommittedLog + 2.143188681203E12 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 2.143188681203E12 == 0
zksInstance.zkDb.maxCommittedLog - 4.2949673E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 4.2949673E9 == 0
zksInstance.zkDb.maxCommittedLog - 4.2949673E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 4.294967299E9 == 0
zksInstance.zkDb.minCommittedLog - 4.294967325E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 28 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 4.294967325E9 == 0
zksInstance.zkDb.minCommittedLog - 4.294967325E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 28 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 4.294967297E9 == 0
zksInstance.self.electionTimeTaken == 205
zksInstance.sessionTracker.nextSessionId == 360289672403353600L
9524688 * zksInstance.firstProcessor.zks.hzxid - 102416 * zksInstance.sessionTracker.currentTime - 93 * zksInstance.txnLogFactory.txnLog.currentSize - 4.0905563339993712E16 == 0
12802000 * zksInstance.firstProcessor.zks.hzxid - 19203 * zksInstance.sessionTracker.nextExpirationTime - 125 * zksInstance.txnLogFactory.txnLog.currentSize - 5.498367254467E16 == 0
279 * zksInstance.self.zkDb.maxCommittedLog - 76 * zksInstance.sessionTracker.currentTime - 1.198295875863E12 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.196321873067E12 == 0
500 * zksInstance.self.zkDb.maxCommittedLog - 19 * zksInstance.sessionTracker.nextExpirationTime - 2.1474836485E12 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2.1469901425E12 == 0
400 * zksInstance.self.zkDb.maxCommittedLog + 858993453 * zksInstance.sessionTracker.nextExpirationTime - 1.7179869188E12 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 2.2311495948222E16 == 0
400 * zksInstance.self.zkDb.maxCommittedLog + 858993453 * zksInstance.sessionTracker.nextExpirationTime - 1.7179869188E12 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 2.23132139351408E16 == 0
zksInstance.self.zkDb.maxCommittedLog - 4.294967269E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 30 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967269E9 == 0
zksInstance.self.zkDb.maxCommittedLog - 4.294967269E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 30 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.294967299E9 == 0
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
zksInstance.self.electionTimeTaken == 209
zksInstance.serverStats.packetsReceived >= 2
zksInstance.sessionTracker.nextSessionId == 360289668328259585L
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 1 || daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 2
zksInstance.firstProcessor.zks.requestsInProcess != zksInstance.serverStats.maxLatency
zksInstance.firstProcessor.zks.requestsInProcess != zksInstance.serverStats.totalLatency
zksInstance.firstProcessor.zks.requestsInProcess != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.firstProcessor.zks.requestsInProcess <= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.currentTime % zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE == 0
zksInstance.self.acceptedEpoch <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.acceptedEpoch <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.currentTime % zksInstance.self.bcVote.id == 0
zksInstance.self.bcVote.peerEpoch <= zksInstance.self.tick
zksInstance.self.bcVote.peerEpoch <= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.peerEpoch <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.peerEpoch <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.self.electionType > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.threadCnt != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.currentTime % zksInstance.self.quorumConfig.half == 0
zksInstance.self.quorumConfig.half > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.quorumConfig.half >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.tick < zksInstance.serverStats.packetsReceived
zksInstance.self.tick < zksInstance.serverStats.packetsSent
zksInstance.self.tick >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.tick <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.currentTime % daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE) == 0
zksInstance.sessionTracker.currentTime % daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 0
zksInstance.sessionTracker.nextExpirationTime % daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 0
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.hzxid + zksInstance.firstProcessor.zks.requestsInProcess - 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 4.294967294E9 == 0
zksInstance.firstProcessor.zks.hzxid + zksInstance.firstProcessor.zks.requestsInProcess - 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.294967297E9 == 0
zksInstance.firstProcessor.zks.hzxid + zksInstance.firstProcessor.zks.requestsInProcess - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967294E9 == 0
zksInstance.firstProcessor.zks.hzxid + zksInstance.firstProcessor.zks.requestsInProcess - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.294967297E9 == 0
19 * zksInstance.firstProcessor.zks.hzxid - 19 * zksInstance.self.zkDb.maxCommittedLog + 2.147483648E9 * zksInstance.serverStats.maxLatency - 8.1604378624E10 == 0
zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.count - 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 4.294967293E9 == 0
zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.count - 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.count - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967293E9 == 0
zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.count - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.294967296E9 == 0
38 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.maxLatency - 114 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.63208757134E11 == 0
38 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.maxLatency - 114 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.63208757248E11 == 0
38 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.maxLatency - 114 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1.63208757134E11 == 0
38 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.maxLatency - 114 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1.63208757248E11 == 0
zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.packetsSent - 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 4.294967292E9 == 0
zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.packetsSent - 3 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.294967295E9 == 0
zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.packetsSent - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967292E9 == 0
zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.packetsSent - 3 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.294967295E9 == 0
38 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.totalLatency - 114 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.63208757134E11 == 0
38 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.totalLatency - 114 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.63208757248E11 == 0
38 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.totalLatency - 114 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1.63208757134E11 == 0
38 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.totalLatency - 114 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1.63208757248E11 == 0
102416 * zksInstance.firstProcessor.zks.hzxid - zksInstance.txnLogFactory.txnLog.currentSize - 307248 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 4.39873370279888E14 == 0
102416 * zksInstance.firstProcessor.zks.hzxid - zksInstance.txnLogFactory.txnLog.currentSize - 307248 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.39873370587136E14 == 0
102416 * zksInstance.firstProcessor.zks.hzxid - zksInstance.txnLogFactory.txnLog.currentSize - 307248 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.39873370279888E14 == 0
102416 * zksInstance.firstProcessor.zks.hzxid - zksInstance.txnLogFactory.txnLog.currentSize - 307248 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.39873370587136E14 == 0
zksInstance.self.electionTimeTaken == 237
zksInstance.sessionTracker.nextSessionId == 288232076225282048L
zksInstance.syncProcessor.randRoll == 32888
zksInstance.self.zkDb.maxCommittedLog - 4.294967324E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 25 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE) - 4.294967324E9 == 0
zksInstance.self.zkDb.maxCommittedLog - 4.294967324E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 25 * daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 - 4.294967299E9 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 19 || zksInstance.serverStats.maxLatency == 23
zksInstance.serverStats.minLatency == 3 || zksInstance.serverStats.minLatency == 19 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.nextSessionId == 288232077015252992L
zksInstance.syncProcessor.randRoll == 45433
zksInstance.requestsInProcess <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.subsetOf(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.electionType > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.myid >= zksInstance.serverStats.count
zksInstance.self.quorumConfig.half > daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.serverStats.count >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.maxLatency >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.packetsReceived >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 % zksInstance.serverStats.packetsReceived == 0
zksInstance.serverStats.packetsSent > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsSent >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 % zksInstance.serverStats.packetsSent == 0
zksInstance.serverStats.totalLatency >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog - 4.294967297E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 4.294967297E9 == 0
zksInstance.self.zkDb.maxCommittedLog - 4.294967297E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 - 4.2949673E9 == 0
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
zksInstance.firstProcessor.zks.hzxid == 21474836480L || zksInstance.firstProcessor.zks.hzxid == 21474836481L || zksInstance.firstProcessor.zks.hzxid == 21474836482L
zksInstance.self.acceptedEpoch == 1 || zksInstance.self.acceptedEpoch == 3 || zksInstance.self.acceptedEpoch == 5
zksInstance.self.bcVote.peerEpoch == 0 || zksInstance.self.bcVote.peerEpoch == 2 || zksInstance.self.bcVote.peerEpoch == 4
zksInstance.self.bcVote.zxid == 0 || zksInstance.self.bcVote.zxid == 4294967299L || zksInstance.self.bcVote.zxid == 12884901891L
zksInstance.self.electionTimeTaken == 208 || zksInstance.self.electionTimeTaken == 227 || zksInstance.self.electionTimeTaken == 350
zksInstance.self.myid == 1 || zksInstance.self.myid == 4 || zksInstance.self.myid == 5
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 71
zksInstance.serverStats.minLatency == 32 || zksInstance.serverStats.minLatency == 71 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 71 || zksInstance.serverStats.totalLatency == 103
zksInstance.sessionTracker.currentTime == 26020000
zksInstance.sessionTracker.nextExpirationTime == 26022000
zksInstance.sessionTracker.nextSessionId == 72059297934999553L || zksInstance.sessionTracker.nextSessionId == 288232080684351488L || zksInstance.sessionTracker.nextSessionId == 360289675422334976L
zksInstance.sessionTracker.serverId == 1 || zksInstance.sessionTracker.serverId == 4
zksInstance.syncProcessor.randRoll == 8435 || zksInstance.syncProcessor.randRoll == 22143
zksInstance.syncProcessor.requestOfDeath.createTime == 25999453
zksInstance.requestsInProcess % zksInstance.self.acceptedEpoch == 0
zksInstance.requestsInProcess != zksInstance.self.bcVote.peerEpoch
zksInstance.self.acceptedEpoch != zksInstance.self.quorumConfig.half
zksInstance.serverStats.count % zksInstance.self.acceptedEpoch == 0
zksInstance.self.acceptedEpoch != zksInstance.serverStats.packetsReceived
zksInstance.self.acceptedEpoch != zksInstance.serverStats.packetsSent
zksInstance.serverStats.totalLatency % zksInstance.self.acceptedEpoch == 0
zksInstance.self.acceptedEpoch != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.self.acceptedEpoch > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id >= zksInstance.serverStats.packetsSent
zksInstance.self.bcVote.peerEpoch != zksInstance.self.electionType
zksInstance.self.bcVote.peerEpoch % zksInstance.serverStats.packetsReceived == 0
zksInstance.self.bcVote.peerEpoch % zksInstance.serverStats.packetsSent == 0
zksInstance.self.bcVote.peerEpoch <= daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.peerEpoch >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.peerEpoch != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.zxid < zksInstance.serverStats.minLatency
zksInstance.self.bcVote.zxid % zksInstance.serverStats.packetsReceived == 0
zksInstance.self.bcVote.zxid != daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid))
daikon.Quant.memberOf(daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1) , zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE )
zksInstance.self.zkDb.maxCommittedLog >= zksInstance.txnLogFactory.txnLog.lastZxidSeen
daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 % zksInstance.serverStats.packetsReceived == 0
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) % zksInstance.serverStats.packetsSent == 0
daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1 % zksInstance.serverStats.packetsSent == 0
daikon.Quant.eltsEqual(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid))
zksInstance.txnLogFactory.txnLog.lastZxidSeen <= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.hzxid - 2.1474836482E10 * zksInstance.requestsInProcess - 1.0737418241E10 * zksInstance.self.acceptedEpoch + 3.2212254723E10 == 0
zksInstance.hzxid - 2.1474836482E10 * zksInstance.requestsInProcess - 1.0737418241E10 * zksInstance.self.bcVote.peerEpoch + 2.1474836482E10 == 0
19 * zksInstance.hzxid - 2.641404887286E12 * zksInstance.requestsInProcess + 2.1474836482E10 * zksInstance.self.electionTimeTaken - 4.874787881414E12 == 0
zksInstance.hzxid - 6.4424509446E10 * zksInstance.requestsInProcess - 2.1474836482E10 * zksInstance.self.myid + 8.5899345928E10 == 0
104 * zksInstance.hzxid - 1.320702443643E12 * zksInstance.self.acceptedEpoch - 2.1474836482E10 * zksInstance.self.electionTimeTaken + 8.836895212343E12 == 0
2 * zksInstance.hzxid - 3.2212254723E10 * zksInstance.self.acceptedEpoch + 2.1474836482E10 * zksInstance.self.myid + 1.0737418241E10 == 0
zksInstance.hzxid - 1.0737418241E10 * zksInstance.self.acceptedEpoch - 2.1474836482E10 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 1.0737418241E10 == 0
104 * zksInstance.hzxid - 1.320702443643E12 * zksInstance.self.bcVote.peerEpoch - 2.1474836482E10 * zksInstance.self.electionTimeTaken + 7.5161927687E12 == 0
2 * zksInstance.hzxid - 3.2212254723E10 * zksInstance.self.bcVote.peerEpoch + 2.1474836482E10 * zksInstance.self.myid - 2.1474836482E10 == 0
zksInstance.hzxid - 976128931 * zksInstance.self.electionTimeTaken - 4.0021286171E10 * zksInstance.self.myid + 3.81666412021E11 == 0
19 * zksInstance.hzxid + 2.1474836482E10 * zksInstance.self.electionTimeTaken - 2.641404887286E12 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 7.5161927687E12 == 0
zksInstance.hzxid - 2.1474836482E10 * zksInstance.self.myid - 6.4424509446E10 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.1474836482E10 == 0
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverStats.count) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverStats.count) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverStats.count) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
zksInstance.self.bcVote.peerEpoch >= 0
zksInstance.self.bcVote.zxid == 0 || zksInstance.self.bcVote.zxid == 4294967299L || zksInstance.self.bcVote.zxid == 21474836483L
zksInstance.self.myid == 3 || zksInstance.self.myid == 4 || zksInstance.self.myid == 5
zksInstance.self.zkDb.minCommittedLog == 0 || zksInstance.self.zkDb.minCommittedLog == 4294967297L || zksInstance.self.zkDb.minCommittedLog == 21474836481L
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 50 || zksInstance.serverStats.maxLatency == 54
zksInstance.sessionTracker.currentTime == 26038766 || zksInstance.sessionTracker.currentTime == 26049397
zksInstance.sessionTracker.nextExpirationTime == 26040000 || zksInstance.sessionTracker.nextExpirationTime == 26050000
zksInstance.sessionTracker.serverId == 3 || zksInstance.sessionTracker.serverId == 4
zksInstance.syncProcessor.randRoll == 9716 || zksInstance.syncProcessor.randRoll == 35042
zksInstance.firstProcessor.zks.requestsInProcess % zksInstance.self.acceptedEpoch == 0
zksInstance.self.acceptedEpoch - zksInstance.self.bcVote.peerEpoch - 1 == 0
zksInstance.self.acceptedEpoch != zksInstance.self.myid
zksInstance.self.acceptedEpoch > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.peerEpoch != zksInstance.self.myid
zksInstance.self.bcVote.peerEpoch != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.self.bcVote.peerEpoch != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.peerEpoch != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.myid > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.firstProcessor.zks.hzxid + 8.589934593E9 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.serverStats.count - 1.2884901889E10 == 0
50 * zksInstance.firstProcessor.zks.hzxid + 4.2949672965E11 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.serverStats.maxLatency - 6.4424509445E11 == 0
zksInstance.firstProcessor.zks.hzxid + 8.589934594E9 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.serverStats.packetsReceived - 1.2884901888E10 == 0
zksInstance.firstProcessor.zks.hzxid + 8.589934593E9 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.serverStats.packetsSent - 1.2884901888E10 == 0
37 * zksInstance.firstProcessor.zks.hzxid + 3.17827579941E11 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.serverStats.totalLatency - 4.76741369893E11 == 0
102416 * zksInstance.firstProcessor.zks.hzxid + 8.79746741174272E14 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.txnLogFactory.txnLog.currentSize - 1.319620111761408E15 == 0
zksInstance.firstProcessor.zks.hzxid + 8.589934593E9 * zksInstance.firstProcessor.zks.requestsInProcess - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
zksInstance.firstProcessor.zks.hzxid + 8.589934593E9 * zksInstance.firstProcessor.zks.requestsInProcess - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.2884901889E10 == 0
zksInstance.firstProcessor.zks.hzxid + 8.589934593E9 * zksInstance.firstProcessor.zks.requestsInProcess - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
zksInstance.firstProcessor.zks.hzxid + 8.589934593E9 * zksInstance.firstProcessor.zks.requestsInProcess - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1.2884901889E10 == 0
zksInstance.firstProcessor.zks.hzxid + 8.589934593E9 * zksInstance.requestsInProcess - zksInstance.serverStats.count - 1.2884901889E10 == 0
50 * zksInstance.firstProcessor.zks.hzxid + 4.2949672965E11 * zksInstance.requestsInProcess - zksInstance.serverStats.maxLatency - 6.4424509445E11 == 0
zksInstance.firstProcessor.zks.hzxid + 8.589934594E9 * zksInstance.requestsInProcess - zksInstance.serverStats.packetsReceived - 1.2884901888E10 == 0
zksInstance.firstProcessor.zks.hzxid + 8.589934593E9 * zksInstance.requestsInProcess - zksInstance.serverStats.packetsSent - 1.2884901888E10 == 0
37 * zksInstance.firstProcessor.zks.hzxid + 3.17827579941E11 * zksInstance.requestsInProcess - zksInstance.serverStats.totalLatency - 4.76741369893E11 == 0
102416 * zksInstance.firstProcessor.zks.hzxid + 8.79746741174272E14 * zksInstance.requestsInProcess - zksInstance.txnLogFactory.txnLog.currentSize - 1.319620111761408E15 == 0
zksInstance.firstProcessor.zks.hzxid + 8.589934593E9 * zksInstance.requestsInProcess - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
zksInstance.firstProcessor.zks.hzxid + 8.589934593E9 * zksInstance.requestsInProcess - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.2884901889E10 == 0
zksInstance.firstProcessor.zks.hzxid + 8.589934593E9 * zksInstance.requestsInProcess - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
zksInstance.firstProcessor.zks.hzxid + 8.589934593E9 * zksInstance.requestsInProcess - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1.2884901889E10 == 0
2 * zksInstance.firstProcessor.zks.hzxid - 8.589934593E9 * zksInstance.self.bcVote.peerEpoch - 2 * zksInstance.serverStats.count - 8.589934592E9 == 0
50 * zksInstance.firstProcessor.zks.hzxid - 2.14748364825E11 * zksInstance.self.bcVote.peerEpoch - zksInstance.serverStats.maxLatency - 2.147483648E11 == 0
zksInstance.firstProcessor.zks.hzxid - 4.294967297E9 * zksInstance.self.bcVote.peerEpoch - zksInstance.serverStats.packetsReceived - 4.294967294E9 == 0
2 * zksInstance.firstProcessor.zks.hzxid - 8.589934593E9 * zksInstance.self.bcVote.peerEpoch - 2 * zksInstance.serverStats.packetsSent - 8.58993459E9 == 0
74 * zksInstance.firstProcessor.zks.hzxid - 3.17827579941E11 * zksInstance.self.bcVote.peerEpoch - 2 * zksInstance.serverStats.totalLatency - 3.17827579904E11 == 0
102416 * zksInstance.firstProcessor.zks.hzxid - 4.39873370587136E14 * zksInstance.self.bcVote.peerEpoch - zksInstance.txnLogFactory.txnLog.currentSize - 4.39873370587136E14 == 0
2 * zksInstance.firstProcessor.zks.hzxid - 8.589934593E9 * zksInstance.self.bcVote.peerEpoch - 2 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 8.58993459E9 == 0
2 * zksInstance.firstProcessor.zks.hzxid - 8.589934593E9 * zksInstance.self.bcVote.peerEpoch - 2 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 8.589934592E9 == 0
2 * zksInstance.firstProcessor.zks.hzxid - 8.589934593E9 * zksInstance.self.bcVote.peerEpoch - 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 8.58993459E9 == 0
2 * zksInstance.firstProcessor.zks.hzxid - 8.589934593E9 * zksInstance.self.bcVote.peerEpoch - 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 8.589934592E9 == 0
zksInstance.firstProcessor.zks.hzxid - 8.589934593E9 * zksInstance.self.electionTimeTaken - zksInstance.serverStats.count + 1.756641624269E12 == 0
50 * zksInstance.firstProcessor.zks.hzxid - 4.2949672965E11 * zksInstance.self.electionTimeTaken - zksInstance.serverStats.maxLatency + 8.783208121345E13 == 0
zksInstance.firstProcessor.zks.hzxid - 8.589934594E9 * zksInstance.self.electionTimeTaken - zksInstance.serverStats.packetsReceived + 1.756641624476E12 == 0
zksInstance.firstProcessor.zks.hzxid - 8.589934593E9 * zksInstance.self.electionTimeTaken - zksInstance.serverStats.packetsSent + 1.75664162427E12 == 0
37 * zksInstance.firstProcessor.zks.hzxid - 3.17827579941E11 * zksInstance.self.electionTimeTaken - zksInstance.serverStats.totalLatency + 6.4995740097953E13 == 0
102416 * zksInstance.firstProcessor.zks.hzxid - 8.79746741174272E14 * zksInstance.self.electionTimeTaken - zksInstance.txnLogFactory.txnLog.currentSize + 1.79908208570138624E17 == 0
zksInstance.firstProcessor.zks.hzxid - 8.589934593E9 * zksInstance.self.electionTimeTaken - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 1.75664162427E12 == 0
zksInstance.firstProcessor.zks.hzxid - 8.589934593E9 * zksInstance.self.electionTimeTaken - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 1.756641624269E12 == 0
zksInstance.firstProcessor.zks.hzxid - 8.589934593E9 * zksInstance.self.electionTimeTaken - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 1.75664162427E12 == 0
zksInstance.firstProcessor.zks.hzxid - 8.589934593E9 * zksInstance.self.electionTimeTaken - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 1.756641624269E12 == 0
zksInstance.firstProcessor.zks.hzxid - 8.589934594E9 * zksInstance.serverStats.count + 8.589934593E9 * zksInstance.serverStats.packetsReceived - 2.1474836482E10 == 0
10631 * zksInstance.firstProcessor.zks.hzxid - 10631 * zksInstance.serverStats.count - 8.589934593E9 * zksInstance.sessionTracker.currentTime + 2.23625637025108448E17 == 0
10000 * zksInstance.firstProcessor.zks.hzxid - 10000 * zksInstance.serverStats.count - 8.589934593E9 * zksInstance.sessionTracker.nextExpirationTime + 2.2363894712876E17 == 0
zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.count + 8.589934593E9 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.294967296E9 == 0
50 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.maxLatency + 4.2949672965E11 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 2.147483648E11 == 0
zksInstance.firstProcessor.zks.hzxid + 8.589934593E9 * zksInstance.serverStats.packetsReceived - 8.589934594E9 * zksInstance.serverStats.packetsSent - 1.2884901888E10 == 0
10631 * zksInstance.firstProcessor.zks.hzxid - 10631 * zksInstance.serverStats.packetsReceived - 8.589934594E9 * zksInstance.sessionTracker.currentTime + 2.2362563705116848E17 == 0
5000 * zksInstance.firstProcessor.zks.hzxid - 5000 * zksInstance.serverStats.packetsReceived - 4.294967297E9 * zksInstance.sessionTracker.nextExpirationTime + 1.1181947357741E17 == 0
zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.packetsReceived + 8.589934594E9 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.294967294E9 == 0
10631 * zksInstance.firstProcessor.zks.hzxid - 10631 * zksInstance.serverStats.packetsSent - 8.589934593E9 * zksInstance.sessionTracker.currentTime + 2.23625637025119104E17 == 0
10000 * zksInstance.firstProcessor.zks.hzxid - 10000 * zksInstance.serverStats.packetsSent - 8.589934593E9 * zksInstance.sessionTracker.nextExpirationTime + 2.23638947128769984E17 == 0
zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.packetsSent + 8.589934593E9 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.294967295E9 == 0
37 * zksInstance.firstProcessor.zks.hzxid - zksInstance.serverStats.totalLatency + 3.17827579941E11 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 1.58913789952E11 == 0
10631 * zksInstance.firstProcessor.zks.hzxid - 8.589934593E9 * zksInstance.sessionTracker.currentTime - 10631 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 2.23625637025119104E17 == 0
10631 * zksInstance.firstProcessor.zks.hzxid - 8.589934593E9 * zksInstance.sessionTracker.currentTime - 10631 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 2.23625637025108448E17 == 0
10631 * zksInstance.firstProcessor.zks.hzxid - 8.589934593E9 * zksInstance.sessionTracker.currentTime - 10631 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.23625637025119104E17 == 0
10631 * zksInstance.firstProcessor.zks.hzxid - 8.589934593E9 * zksInstance.sessionTracker.currentTime - 10631 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2.23625637025108448E17 == 0
10000 * zksInstance.firstProcessor.zks.hzxid - 8.589934593E9 * zksInstance.sessionTracker.nextExpirationTime - 10000 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 2.23638947128769984E17 == 0
10000 * zksInstance.firstProcessor.zks.hzxid - 8.589934593E9 * zksInstance.sessionTracker.nextExpirationTime - 10000 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 2.2363894712876E17 == 0
10000 * zksInstance.firstProcessor.zks.hzxid - 8.589934593E9 * zksInstance.sessionTracker.nextExpirationTime - 10000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.23638947128769984E17 == 0
10000 * zksInstance.firstProcessor.zks.hzxid - 8.589934593E9 * zksInstance.sessionTracker.nextExpirationTime - 10000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2.2363894712876E17 == 0
102416 * zksInstance.firstProcessor.zks.hzxid - zksInstance.txnLogFactory.txnLog.currentSize + 8.79746741174272E14 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 4.39873370587136E14 == 0
zksInstance.firstProcessor.zks.hzxid + 8.589934593E9 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 4.294967295E9 == 0
zksInstance.firstProcessor.zks.hzxid + 8.589934593E9 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 4.294967296E9 == 0
zksInstance.firstProcessor.zks.hzxid + 8.589934593E9 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.294967295E9 == 0
zksInstance.firstProcessor.zks.hzxid + 8.589934593E9 * daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.294967296E9 == 0
8.589934593E9 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.hzxid - zksInstance.serverStats.count - 1.2884901889E10 == 0
4.2949672965E11 * zksInstance.firstProcessor.zks.requestsInProcess + 50 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 6.4424509445E11 == 0
8.589934594E9 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.hzxid - zksInstance.serverStats.packetsReceived - 1.2884901888E10 == 0
8.589934593E9 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.hzxid - zksInstance.serverStats.packetsSent - 1.2884901888E10 == 0
3.17827579941E11 * zksInstance.firstProcessor.zks.requestsInProcess + 37 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 4.76741369893E11 == 0
8.79746741174272E14 * zksInstance.firstProcessor.zks.requestsInProcess + 102416 * zksInstance.hzxid - zksInstance.txnLogFactory.txnLog.currentSize - 1.319620111761408E15 == 0
8.589934593E9 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.hzxid - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
8.589934593E9 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.hzxid - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.2884901889E10 == 0
8.589934593E9 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.hzxid - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
8.589934593E9 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.hzxid - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1.2884901889E10 == 0
8.589934593E9 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.serverStats.count + zksInstance.zkDb.dataTree.lastProcessedZxid - 1.2884901889E10 == 0
4.2949672965E11 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.serverStats.maxLatency + 50 * zksInstance.zkDb.dataTree.lastProcessedZxid - 6.4424509445E11 == 0
8.589934594E9 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.serverStats.packetsReceived + zksInstance.zkDb.dataTree.lastProcessedZxid - 1.2884901888E10 == 0
8.589934593E9 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.serverStats.packetsSent + zksInstance.zkDb.dataTree.lastProcessedZxid - 1.2884901888E10 == 0
3.17827579941E11 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.serverStats.totalLatency + 37 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4.76741369893E11 == 0
8.79746741174272E14 * zksInstance.firstProcessor.zks.requestsInProcess - zksInstance.txnLogFactory.txnLog.currentSize + 102416 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.319620111761408E15 == 0
8.589934593E9 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
8.589934593E9 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.2884901889E10 == 0
8.589934593E9 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1.2884901888E10 == 0
8.589934593E9 * zksInstance.firstProcessor.zks.requestsInProcess + zksInstance.zkDb.dataTree.lastProcessedZxid - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1.2884901889E10 == 0
10631 * zksInstance.hzxid - 10631 * zksInstance.serverStats.count - 8.589934593E9 * zksInstance.sessionTracker.currentTime + 2.23625637025108448E17 == 0
10000 * zksInstance.hzxid - 10000 * zksInstance.serverStats.count - 8.589934593E9 * zksInstance.sessionTracker.nextExpirationTime + 2.2363894712876E17 == 0
10631 * zksInstance.hzxid - 10631 * zksInstance.serverStats.packetsReceived - 8.589934594E9 * zksInstance.sessionTracker.currentTime + 2.2362563705116848E17 == 0
5000 * zksInstance.hzxid - 5000 * zksInstance.serverStats.packetsReceived - 4.294967297E9 * zksInstance.sessionTracker.nextExpirationTime + 1.1181947357741E17 == 0
10631 * zksInstance.hzxid - 10631 * zksInstance.serverStats.packetsSent - 8.589934593E9 * zksInstance.sessionTracker.currentTime + 2.23625637025119104E17 == 0
10000 * zksInstance.hzxid - 10000 * zksInstance.serverStats.packetsSent - 8.589934593E9 * zksInstance.sessionTracker.nextExpirationTime + 2.23638947128769984E17 == 0
10631 * zksInstance.hzxid - 8.589934593E9 * zksInstance.sessionTracker.currentTime - 10631 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 2.23625637025119104E17 == 0
10631 * zksInstance.hzxid - 8.589934593E9 * zksInstance.sessionTracker.currentTime - 10631 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 2.23625637025108448E17 == 0
10631 * zksInstance.hzxid - 8.589934593E9 * zksInstance.sessionTracker.currentTime - 10631 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.23625637025119104E17 == 0
10631 * zksInstance.hzxid - 8.589934593E9 * zksInstance.sessionTracker.currentTime - 10631 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2.23625637025108448E17 == 0
10000 * zksInstance.hzxid - 8.589934593E9 * zksInstance.sessionTracker.nextExpirationTime - 10000 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) + 2.23638947128769984E17 == 0
10000 * zksInstance.hzxid - 8.589934593E9 * zksInstance.sessionTracker.nextExpirationTime - 10000 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 2.2363894712876E17 == 0
10000 * zksInstance.hzxid - 8.589934593E9 * zksInstance.sessionTracker.nextExpirationTime - 10000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.23638947128769984E17 == 0
10000 * zksInstance.hzxid - 8.589934593E9 * zksInstance.sessionTracker.nextExpirationTime - 10000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2.2363894712876E17 == 0
10631 * zksInstance.serverStats.count + 8.589934593E9 * zksInstance.sessionTracker.currentTime - 10631 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2.23625637025108448E17 == 0
10000 * zksInstance.serverStats.count + 8.589934593E9 * zksInstance.sessionTracker.nextExpirationTime - 10000 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2.2363894712876E17 == 0
10631 * zksInstance.serverStats.packetsReceived + 8.589934594E9 * zksInstance.sessionTracker.currentTime - 10631 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2.2362563705116848E17 == 0
5000 * zksInstance.serverStats.packetsReceived + 4.294967297E9 * zksInstance.sessionTracker.nextExpirationTime - 5000 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.1181947357741E17 == 0
10631 * zksInstance.serverStats.packetsSent + 8.589934593E9 * zksInstance.sessionTracker.currentTime - 10631 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2.23625637025119104E17 == 0
10000 * zksInstance.serverStats.packetsSent + 8.589934593E9 * zksInstance.sessionTracker.nextExpirationTime - 10000 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2.23638947128769984E17 == 0
8.589934593E9 * zksInstance.sessionTracker.currentTime - 10631 * zksInstance.zkDb.dataTree.lastProcessedZxid + 10631 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 2.23625637025119104E17 == 0
8.589934593E9 * zksInstance.sessionTracker.currentTime - 10631 * zksInstance.zkDb.dataTree.lastProcessedZxid + 10631 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2.23625637025108448E17 == 0
8.589934593E9 * zksInstance.sessionTracker.currentTime - 10631 * zksInstance.zkDb.dataTree.lastProcessedZxid + 10631 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 2.23625637025119104E17 == 0
8.589934593E9 * zksInstance.sessionTracker.currentTime - 10631 * zksInstance.zkDb.dataTree.lastProcessedZxid + 10631 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 2.23625637025108448E17 == 0
8.589934593E9 * zksInstance.sessionTracker.nextExpirationTime - 10000 * zksInstance.zkDb.dataTree.lastProcessedZxid + 10000 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 2.23638947128769984E17 == 0
8.589934593E9 * zksInstance.sessionTracker.nextExpirationTime - 10000 * zksInstance.zkDb.dataTree.lastProcessedZxid + 10000 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2.2363894712876E17 == 0
8.589934593E9 * zksInstance.sessionTracker.nextExpirationTime - 10000 * zksInstance.zkDb.dataTree.lastProcessedZxid + 10000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 2.23638947128769984E17 == 0
8.589934593E9 * zksInstance.sessionTracker.nextExpirationTime - 10000 * zksInstance.zkDb.dataTree.lastProcessedZxid + 10000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 2.2363894712876E17 == 0
zksInstance.firstProcessor.finished == zksInstance.firstProcessor.zks.shutdown
zksInstance.firstProcessor.finished == zksInstance.self.authInitialized
zksInstance.firstProcessor.finished == zksInstance.serverCnxnFactory.zkServer.shutdown
zksInstance.firstProcessor.finished == zksInstance.shutdown
zksInstance.self.bcVote.electionEpoch == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.self.currentVote.id == daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.self.currentVote.id == daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)-1
zksInstance.self.currentVote.id == daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.self.currentVote.version == zksInstance.self.tick
zksInstance.self.currentVote.version == zksInstance.zkDb.dataTree.scount
zksInstance.self.currentVote.version == daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.currentVote.version == daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.self.currentVote.version == daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.currentVote.version == daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.currentVote.version == daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.self.currentVote.version == daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.self.currentVote.version == daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.electionAlg.logicalclock == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedEpoch == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionType-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.lastProcessedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.lastProcessedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
zksInstance.firstProcessor.zks.hzxid == 0 || zksInstance.firstProcessor.zks.hzxid == 4294967296L || zksInstance.firstProcessor.zks.hzxid == 4294967297L
zksInstance.self.bcVote.peerEpoch == 0
zksInstance.self.electionAlg.logicalclock == 1 || zksInstance.self.electionAlg.logicalclock == 2
zksInstance.self.electionTimeTaken == 203 || zksInstance.self.electionTimeTaken == 238
zksInstance.self.qcm.threadCnt == 0 || zksInstance.self.qcm.threadCnt == 2
zksInstance.self.start_fle == 0 || zksInstance.self.start_fle == 26795640
zksInstance.serverStats.minLatency == 37 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26794284 || zksInstance.sessionTracker.currentTime == 26798000
zksInstance.sessionTracker.nextExpirationTime == 26796000 || zksInstance.sessionTracker.nextExpirationTime == 26800000
zksInstance.sessionTracker.nextSessionId == 72059350248062976L || zksInstance.sessionTracker.nextSessionId == 144116944065986561L
daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE) == 1
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) != null
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) != null
daikon.Quant.eltsEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version))
daikon.Quant.eltsEqual(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version))
daikon.Quant.eltsEqual(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch))
daikon.Quant.eltsEqual(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version))
daikon.Quant.eltsEqual(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version))
daikon.Quant.eltsEqual(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch))
zksInstance.self.bcVote.electionEpoch == zksInstance.serverStats.packetsSent
zksInstance.self.bcVote.peerEpoch == zksInstance.serverStats.count
zksInstance.self.bcVote.peerEpoch == zksInstance.serverStats.maxLatency
zksInstance.self.electionAlg.proposedEpoch == daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.electionAlg.proposedEpoch == daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
zksInstance.firstProcessor.zks.requestsInProcess == 0 || zksInstance.firstProcessor.zks.requestsInProcess == 1 || zksInstance.firstProcessor.zks.requestsInProcess == 2
zksInstance.self.electionTimeTaken == 203 || zksInstance.self.electionTimeTaken == 232
zksInstance.self.start_fle == 0 || zksInstance.self.start_fle == 26799399
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 3
zksInstance.serverStats.minLatency == 3 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.packetsReceived == 1 || zksInstance.serverStats.packetsReceived == 2 || zksInstance.serverStats.packetsReceived == 4
zksInstance.sessionTracker.currentTime == 26799007 || zksInstance.sessionTracker.currentTime == 26802000
zksInstance.sessionTracker.nextExpirationTime == 26800000 || zksInstance.sessionTracker.nextExpirationTime == 26804000
zksInstance.sessionTracker.nextSessionId == 72059350494412800L || zksInstance.sessionTracker.nextSessionId == 144116944375513088L
daikon.Quant.eltsEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch))
daikon.Quant.eltsEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch))
daikon.Quant.eltsEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch))
daikon.Quant.eltsEqual(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess))
daikon.Quant.eltsEqual(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.count))
daikon.Quant.eltsEqual(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1))
zksInstance.firstProcessor.zks.shutdown == zksInstance.self.authInitialized
zksInstance.firstProcessor.zks.shutdown == zksInstance.serverCnxnFactory.zkServer.shutdown
zksInstance.firstProcessor.zks.shutdown == zksInstance.shutdown
zksInstance.firstProcessor.zks.shutdown == zksInstance.zkDb.dataTree.initialized
zksInstance.requestsInProcess == daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.peerEpoch == daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.version == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.self.start_fle == zksInstance.syncProcessor.requestOfDeath.cxid
zksInstance.sessionTracker.serverId == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.serverId == daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.requestOfDeath.cxid == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.requestOfDeath.cxid == daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)-1
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionType-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionType-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.zxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.zkDb.minCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.count) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.threadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
zksInstance.firstProcessor.zks.requestsInProcess == 1
zksInstance.firstProcessor.zks.shutdown == false
zksInstance.self.bcVote.electionEpoch == 1 || zksInstance.self.bcVote.electionEpoch == 2
zksInstance.self.currentVote.zxid == 0 || zksInstance.self.currentVote.zxid == 4294967298L
zksInstance.self.electionTimeTaken == 206 || zksInstance.self.electionTimeTaken == 247 || zksInstance.self.electionTimeTaken == 3797
zksInstance.self.start_fle == 0 || zksInstance.self.start_fle == 26787998
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 36 || zksInstance.serverStats.maxLatency == 48
zksInstance.serverStats.minLatency == 36 || zksInstance.serverStats.minLatency == 48 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26787692 || zksInstance.sessionTracker.currentTime == 26790000
zksInstance.sessionTracker.nextExpirationTime == 26788000 || zksInstance.sessionTracker.nextExpirationTime == 26792000
zksInstance.sessionTracker.nextSessionId == 72059349747302400L || zksInstance.sessionTracker.nextSessionId == 72059349869854720L || zksInstance.sessionTracker.nextSessionId == 144116943633973249L
zksInstance.syncProcessor.randRoll == 8969
zksInstance.syncProcessor.requestOfDeath.createTime == 26768923
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess) != null
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId) != null
zksInstance.hzxid % zksInstance.self.electionAlg.logicalclock == 0
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) % zksInstance.self.acceptedEpoch == 0
daikon.Quant.subsetOf(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1))
daikon.Quant.eltsEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid))
zksInstance.serverStats.maxLatency % zksInstance.self.electionAlg.logicalclock == 0
zksInstance.sessionTracker.nextSessionId % zksInstance.self.electionAlg.logicalclock == 0
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) % zksInstance.self.electionAlg.logicalclock == 0
zksInstance.self.electionAlg.proposedEpoch == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1*daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.self.electionTimeTaken % zksInstance.self.myid == 0
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 % zksInstance.self.myid == 0
daikon.Quant.eltsEqual(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1))
daikon.Quant.eltsEqual(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch))
daikon.Quant.eltsEqual(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid))
daikon.Quant.eltsEqual(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1))
daikon.Quant.eltsEqual(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1))
daikon.Quant.eltsEqual(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1))
daikon.Quant.eltsEqual(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch))
daikon.Quant.eltsEqual(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid))
zksInstance.self.acceptedEpoch == daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.acceptedEpoch == daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.self.acceptedEpoch == daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.electionEpoch == zksInstance.self.currentEpoch
zksInstance.self.bcVote.electionEpoch == zksInstance.self.electionType
zksInstance.self.bcVote.electionEpoch == zksInstance.zkDb.dataTree.scount
zksInstance.self.bcVote.id == zksInstance.self.bcVote.peerEpoch
zksInstance.self.bcVote.id == zksInstance.self.bcVote.zxid
zksInstance.self.bcVote.id == zksInstance.self.currentVote.zxid
zksInstance.self.bcVote.id == zksInstance.self.electionAlg.proposedZxid
zksInstance.self.bcVote.id == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.version == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.self.currentEpoch == zksInstance.self.currentVote.peerEpoch
zksInstance.self.electionAlg.proposedZxid == zksInstance.self.zkDb.minCommittedLog
zksInstance.self.electionAlg.proposedZxid == zksInstance.zkDb.minCommittedLog
zksInstance.self.electionAlg.proposedZxid == daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)
zksInstance.serverStats.count == zksInstance.serverStats.packetsSent
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.lastZxidSeen)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived-1)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.lastZxidSeen)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.hzxid) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.lastZxidSeen)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.threadCnt)
daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) == daikon.Quant.getElement_Object(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch-1) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.zxid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.qcm.connectionThreadCnt)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.myid-1)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.qcm.mySid-1)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid)
zksInstance.self.acceptedEpoch == 1 || zksInstance.self.acceptedEpoch == 2 || zksInstance.self.acceptedEpoch == 3
zksInstance.self.bcVote.electionEpoch == 3
zksInstance.self.bcVote.id == 1
zksInstance.self.currentEpoch == 1 || zksInstance.self.currentEpoch == 3
zksInstance.self.currentVote.id == 1 || zksInstance.self.currentVote.id == 2
zksInstance.self.currentVote.zxid == 0 || zksInstance.self.currentVote.zxid == 1
zksInstance.self.electionAlg.logicalclock == 2 || zksInstance.self.electionAlg.logicalclock == 3
zksInstance.self.electionAlg.proposedZxid == 0 || zksInstance.self.electionAlg.proposedZxid == 1
zksInstance.self.electionTimeTaken == 232 || zksInstance.self.electionTimeTaken == 2556 || zksInstance.self.electionTimeTaken == 12397
zksInstance.self.start_fle == 0 || zksInstance.self.start_fle == 26769148 || zksInstance.self.start_fle == 26771737
zksInstance.serverStats.minLatency == 17 || zksInstance.serverStats.minLatency == 42 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.packetsReceived == 1 || zksInstance.serverStats.packetsReceived == 2 || zksInstance.serverStats.packetsReceived == 3
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 42 || zksInstance.serverStats.totalLatency == 59
zksInstance.sessionTracker.currentTime == 26771150 || zksInstance.sessionTracker.currentTime == 26776000 || zksInstance.sessionTracker.currentTime == 26784201
zksInstance.sessionTracker.nextExpirationTime == 26772000 || zksInstance.sessionTracker.nextExpirationTime == 26778000 || zksInstance.sessionTracker.nextExpirationTime == 26786000
zksInstance.sessionTracker.nextSessionId == 72059348512014337L || zksInstance.sessionTracker.nextSessionId == 72059348681555969L || zksInstance.sessionTracker.nextSessionId == 72059349367259137L
zksInstance.txnLogFactory.txnLog.lastZxidSeen == 0 || zksInstance.txnLogFactory.txnLog.lastZxidSeen == 12884901889L || zksInstance.txnLogFactory.txnLog.lastZxidSeen == 12884901890L
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) != null
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch-1) != null
daikon.Quant.getElement_Object(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id) != null
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) != null
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) != null
zksInstance.firstProcessor.zks.hzxid % zksInstance.self.currentVote.id == 0
zksInstance.self.acceptedEpoch % zksInstance.self.currentEpoch == 0
zksInstance.zkDb.dataTree.scount % zksInstance.self.acceptedEpoch == 0
daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 % zksInstance.self.acceptedEpoch == 0
zksInstance.self.acceptedEpoch % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 0
zksInstance.self.start_fle % zksInstance.self.currentEpoch == 0
zksInstance.sessionTracker.currentTime % zksInstance.self.currentEpoch == 0
zksInstance.self.electionTimeTaken % zksInstance.self.currentVote.id == 0
zksInstance.serverStats.count % zksInstance.self.currentVote.id == 0
zksInstance.serverStats.totalLatency % zksInstance.self.currentVote.id == 0
zksInstance.sessionTracker.currentTime % zksInstance.self.currentVote.id == 0
zksInstance.sessionTracker.nextExpirationTime % zksInstance.self.currentVote.id == 0
zksInstance.txnLogFactory.txnLog.lastZxidSeen % zksInstance.self.currentVote.id == 0
zksInstance.self.electionTimeTaken % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 0
daikon.Quant.eltsEqual(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.firstProcessor.zks.requestsInProcess))
daikon.Quant.eltsEqual(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id))
daikon.Quant.eltsEqual(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id))
daikon.Quant.eltsEqual(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedZxid))
zksInstance.self.start_fle % zksInstance.serverStats.packetsReceived == 0
zksInstance.serverStats.count % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 0
daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 % zksInstance.serverStats.packetsReceived == 0
zksInstance.serverStats.totalLatency % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 0
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version))
zksInstance.txnLogFactory.txnLog.lastZxidSeen % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 0
zksInstance.firstProcessor.zks.hzxid - 1.288490189E10 * zksInstance.self.acceptedEpoch + 1.288490189E10 * zksInstance.self.electionAlg.logicalclock - 1.288490189E10 == 0
zksInstance.firstProcessor.zks.hzxid - 1.288490189E10 * zksInstance.self.acceptedEpoch + 1.288490189E10 * zksInstance.self.electionAlg.proposedZxid + 1.288490189E10 == 0
7517 * zksInstance.firstProcessor.zks.hzxid + 2.994451199236E13 * zksInstance.self.acceptedEpoch - 1.288490189E10 * zksInstance.self.electionTimeTaken - 2.695521475388E13 == 0
zksInstance.firstProcessor.zks.hzxid - 1.288490189E10 * zksInstance.self.acceptedEpoch + 6.442450945E9 * zksInstance.self.qcm.threadCnt + 1.288490189E10 == 0
13387163 * zksInstance.firstProcessor.zks.hzxid - 1.6679505496605E13 * zksInstance.self.acceptedEpoch + 6.442450945E9 * zksInstance.self.start_fle - 1.72442243323948256E17 == 0
3351 * zksInstance.firstProcessor.zks.hzxid + 6.24917741665E13 * zksInstance.self.acceptedEpoch - 1.288490189E10 * zksInstance.sessionTracker.currentTime + 3.4488114945830701E17 == 0
200 * zksInstance.firstProcessor.zks.hzxid + 7.730941134E12 * zksInstance.self.acceptedEpoch - 1288490189 * zksInstance.sessionTracker.nextExpirationTime + 3.4487728398774004E16 == 0
6.442450944E9 * zksInstance.firstProcessor.zks.hzxid + 6.442450945E9 * zksInstance.self.acceptedEpoch - 6.442450945E9 * zksInstance.zkDb.dataTree.lastProcessedZxid - 6.442450945E9 == 0
zksInstance.firstProcessor.zks.hzxid - 1.288490189E10 * zksInstance.self.acceptedEpoch + 1.288490189E10 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 + 2.576980378E10 == 0
zksInstance.firstProcessor.zks.hzxid - 6.442450945E9 * zksInstance.self.acceptedEpoch + 6.442450945E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 6.442450945E9 == 0
9841 * zksInstance.firstProcessor.zks.hzxid + 2.994451199236E13 * zksInstance.self.electionAlg.logicalclock - 1.288490189E10 * zksInstance.self.electionTimeTaken - 5.689972674624E13 == 0
26771737 * zksInstance.firstProcessor.zks.hzxid - 3.335901099321E13 * zksInstance.self.electionAlg.logicalclock + 1.288490189E10 * zksInstance.self.start_fle - 3.448511276369033E17 == 0
8201 * zksInstance.firstProcessor.zks.hzxid + 6.24917741665E13 * zksInstance.self.electionAlg.logicalclock - 1.288490189E10 * zksInstance.sessionTracker.currentTime + 3.4481865768414048E17 == 0
800 * zksInstance.firstProcessor.zks.hzxid + 7.730941134E12 * zksInstance.self.electionAlg.logicalclock - 1288490189 * zksInstance.sessionTracker.nextExpirationTime + 3.447999745764E16 == 0
1.2884901889E10 * zksInstance.firstProcessor.zks.hzxid + 1.288490189E10 * zksInstance.self.electionAlg.logicalclock - 1.288490189E10 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2.576980378E10 == 0
zksInstance.firstProcessor.zks.hzxid + 1.288490189E10 * zksInstance.self.electionAlg.logicalclock - 1.288490189E10 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2.576980378E10 == 0
zksInstance.firstProcessor.zks.hzxid - 1.288490189E10 * zksInstance.self.electionAlg.logicalclock + 1.288490189E10 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 1.288490189E10 == 0
9841 * zksInstance.firstProcessor.zks.hzxid + 2.994451199236E13 * zksInstance.self.electionAlg.proposedZxid - 1.288490189E10 * zksInstance.self.electionTimeTaken + 2.98929723848E12 == 0
26771737 * zksInstance.firstProcessor.zks.hzxid - 3.335901099321E13 * zksInstance.self.electionAlg.proposedZxid + 1.288490189E10 * zksInstance.self.start_fle - 3.4491784565888973E17 == 0
8201 * zksInstance.firstProcessor.zks.hzxid + 6.24917741665E13 * zksInstance.self.electionAlg.proposedZxid - 1.288490189E10 * zksInstance.sessionTracker.currentTime + 3.4494364123247347E17 == 0
800 * zksInstance.firstProcessor.zks.hzxid + 7.730941134E12 * zksInstance.self.electionAlg.proposedZxid - 1288490189 * zksInstance.sessionTracker.nextExpirationTime + 3.4495459339908E16 == 0
1.2884901889E10 * zksInstance.firstProcessor.zks.hzxid + 1.288490189E10 * zksInstance.self.electionAlg.proposedZxid - 1.288490189E10 * zksInstance.zkDb.dataTree.lastProcessedZxid == 0
zksInstance.firstProcessor.zks.hzxid - 1.288490189E10 * zksInstance.self.electionAlg.proposedZxid + 1.288490189E10 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1.288490189E10 == 0
9841 * zksInstance.firstProcessor.zks.hzxid - 1.288490189E10 * zksInstance.self.electionTimeTaken + 1.497225599618E13 * zksInstance.self.qcm.threadCnt + 2.98929723848E12 == 0
5.988902396039E12 * zksInstance.firstProcessor.zks.hzxid + 2.576980378E9 * zksInstance.self.electionTimeTaken - 5.988902398472E12 * zksInstance.zkDb.dataTree.lastProcessedZxid - 5.97859447696E11 == 0
9841 * zksInstance.firstProcessor.zks.hzxid - 1.288490189E10 * zksInstance.self.electionTimeTaken + 2.994451199236E13 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 + 3.293380923084E13 == 0
7517 * zksInstance.firstProcessor.zks.hzxid - 1.288490189E10 * zksInstance.self.electionTimeTaken + 2.994451199236E13 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 2.98929723848E12 == 0
2433 * zksInstance.firstProcessor.zks.hzxid - 2.576980378E9 * zksInstance.self.electionTimeTaken + 5.988902398472E12 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 5.391042950776E12 == 0
26771737 * zksInstance.firstProcessor.zks.hzxid - 1.6679505496605E13 * zksInstance.self.qcm.threadCnt + 1.288490189E10 * zksInstance.self.start_fle - 3.4491784565888973E17 == 0
8201 * zksInstance.firstProcessor.zks.hzxid + 3.124588708325E13 * zksInstance.self.qcm.threadCnt - 1.288490189E10 * zksInstance.sessionTracker.currentTime + 3.4494364123247347E17 == 0
800 * zksInstance.firstProcessor.zks.hzxid + 3.865470567E12 * zksInstance.self.qcm.threadCnt - 1288490189 * zksInstance.sessionTracker.nextExpirationTime + 3.4495459339908E16 == 0
1.2884901889E10 * zksInstance.firstProcessor.zks.hzxid + 6.442450945E9 * zksInstance.self.qcm.threadCnt - 1.288490189E10 * zksInstance.zkDb.dataTree.lastProcessedZxid == 0
zksInstance.firstProcessor.zks.hzxid - 6.442450945E9 * zksInstance.self.qcm.threadCnt + 1.288490189E10 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1.288490189E10 == 0
2.382788411597E12 * zksInstance.firstProcessor.zks.hzxid + 920350135 * zksInstance.self.start_fle - 2.382786499515E12 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2.463698897563498E16 == 0
26771737 * zksInstance.firstProcessor.zks.hzxid + 1.288490189E10 * zksInstance.self.start_fle - 3.335901099321E13 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 - 3.4495120466988294E17 == 0
13387163 * zksInstance.firstProcessor.zks.hzxid + 6.442450945E9 * zksInstance.self.start_fle - 1.6679505496605E13 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.72458922829444864E17 == 0
1912082 * zksInstance.firstProcessor.zks.hzxid + 920350135 * zksInstance.self.start_fle - 2.382786499515E12 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 2.4634606189135464E16 == 0
6.2491774153449E13 * zksInstance.firstProcessor.zks.hzxid + 1.288490189E10 * zksInstance.sessionTracker.currentTime - 6.24917741665E13 * zksInstance.zkDb.dataTree.lastProcessedZxid - 3.4494364123247347E17 == 0
8201 * zksInstance.firstProcessor.zks.hzxid - 1.288490189E10 * zksInstance.sessionTracker.currentTime + 6.24917741665E13 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 + 3.4500613300664E17 == 0
3351 * zksInstance.firstProcessor.zks.hzxid - 1.288490189E10 * zksInstance.sessionTracker.currentTime + 6.24917741665E13 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 3.4494364123247347E17 == 0
13051 * zksInstance.firstProcessor.zks.hzxid - 1.288490189E10 * zksInstance.sessionTracker.currentTime + 6.24917741665E13 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 3.4488114945830701E17 == 0
1.1044201618E12 * zksInstance.firstProcessor.zks.hzxid + 184070027 * zksInstance.sessionTracker.nextExpirationTime - 1.104420162E12 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4.927922762844E15 == 0
800 * zksInstance.firstProcessor.zks.hzxid - 1288490189 * zksInstance.sessionTracker.nextExpirationTime + 7.730941134E12 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 + 3.4503190281041996E16 == 0
200 * zksInstance.firstProcessor.zks.hzxid - 1288490189 * zksInstance.sessionTracker.nextExpirationTime + 7.730941134E12 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 3.4495459339908E16 == 0
200 * zksInstance.firstProcessor.zks.hzxid - 184070027 * zksInstance.sessionTracker.nextExpirationTime + 1.104420162E12 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 4.926818342682E15 == 0
zksInstance.firstProcessor.zks.hzxid - zksInstance.zkDb.dataTree.lastProcessedZxid + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1 == 0
zksInstance.firstProcessor.zks.hzxid + 1.288490189E10 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 - 1.288490189E10 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 1.288490189E10 == 0
zksInstance.firstProcessor.zks.hzxid - 6.442450945E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 6.442450945E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 6.442450945E9 == 0
zksInstance.self.acceptedEpoch + 6.442450944E9 * zksInstance.self.currentEpoch - zksInstance.zkDb.dataTree.lastProcessedZxid - 6.442450945E9 == 0
zksInstance.self.acceptedEpoch - 1.2884901888E10 * zksInstance.self.currentVote.id - zksInstance.zkDb.dataTree.lastProcessedZxid + 2.5769803775E10 == 0
1.2884901889E10 * zksInstance.self.acceptedEpoch - 1.2884901888E10 * zksInstance.self.electionAlg.logicalclock - zksInstance.zkDb.dataTree.lastProcessedZxid + 1.2884901887E10 == 0
1.2884901889E10 * zksInstance.self.acceptedEpoch - 1.2884901888E10 * zksInstance.self.electionAlg.proposedZxid - zksInstance.zkDb.dataTree.lastProcessedZxid - 1.2884901889E10 == 0
2.9944511980195E13 * zksInstance.self.acceptedEpoch - 1.2884901888E10 * zksInstance.self.electionTimeTaken + 7517 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2.6955214742179E13 == 0
1.2884901889E10 * zksInstance.self.acceptedEpoch - 6.442450944E9 * zksInstance.self.qcm.threadCnt - zksInstance.zkDb.dataTree.lastProcessedZxid - 1.2884901889E10 == 0
1.6679518881179E13 * zksInstance.self.acceptedEpoch - 6.442450944E9 * zksInstance.self.start_fle - 13387163 * zksInstance.zkDb.dataTree.lastProcessedZxid + 1.72442243283794528E17 == 0
2.0830591384483E13 * zksInstance.self.acceptedEpoch - 4.294967296E9 * zksInstance.sessionTracker.currentTime + 1117 * zksInstance.zkDb.dataTree.lastProcessedZxid + 1.14960383134925904E17 == 0
4.831838207875E12 * zksInstance.self.acceptedEpoch - 805306368 * zksInstance.sessionTracker.nextExpirationTime + 125 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2.1554830245888124E16 == 0
1.2884901889E10 * zksInstance.self.acceptedEpoch - zksInstance.zkDb.dataTree.lastProcessedZxid - 1.2884901888E10 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 - 2.5769803777E10 == 0
6.442450945E9 * zksInstance.self.acceptedEpoch - zksInstance.zkDb.dataTree.lastProcessedZxid - 6.442450944E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 6.442450945E9 == 0
1.2884901889E10 * zksInstance.self.currentEpoch + 2 * zksInstance.self.electionAlg.logicalclock - 2 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.2884901893E10 == 0
1.2884901889E10 * zksInstance.self.currentEpoch + 2 * zksInstance.self.electionAlg.proposedZxid - 2 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.2884901889E10 == 0
2.9944511980195E13 * zksInstance.self.currentEpoch + 2 * zksInstance.self.electionTimeTaken - 4648 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2.9944511980659E13 == 0
1.2884901889E10 * zksInstance.self.currentEpoch + zksInstance.self.qcm.threadCnt - 2 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.2884901889E10 == 0
1.6679518881179E13 * zksInstance.self.currentEpoch + zksInstance.self.start_fle - 2589 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.6679545650327E13 == 0
6.442450944E9 * zksInstance.self.currentEpoch + zksInstance.serverStats.count - zksInstance.zkDb.dataTree.lastProcessedZxid - 6.442450944E9 == 0
1.35291469824E11 * zksInstance.self.currentEpoch + zksInstance.serverStats.maxLatency - 21 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.35291469824E11 == 0
6.442450944E9 * zksInstance.self.currentEpoch + zksInstance.serverStats.packetsReceived - zksInstance.zkDb.dataTree.lastProcessedZxid - 6.442450945E9 == 0
3.80104605696E11 * zksInstance.self.currentEpoch + 2 * zksInstance.serverStats.totalLatency - 59 * zksInstance.zkDb.dataTree.lastProcessedZxid - 3.80104605696E11 == 0
6.2491774153449E13 * zksInstance.self.currentEpoch + 2 * zksInstance.sessionTracker.currentTime - 9700 * zksInstance.zkDb.dataTree.lastProcessedZxid - 6.2491827695749E13 == 0
3.8654705663E13 * zksInstance.self.currentEpoch + zksInstance.sessionTracker.nextExpirationTime - 6000 * zksInstance.zkDb.dataTree.lastProcessedZxid - 3.8654732435E13 == 0
1.09226364686761984E18 * zksInstance.self.currentEpoch + zksInstance.sessionTracker.nextSessionId - 169541632 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.16432299537963418E18 == 0
3.29905027940352E14 * zksInstance.self.currentEpoch + zksInstance.txnLogFactory.txnLog.currentSize - 51208 * zksInstance.zkDb.dataTree.lastProcessedZxid - 3.29905027940352E14 == 0
6.442450944E9 * zksInstance.self.currentEpoch - zksInstance.zkDb.dataTree.lastProcessedZxid + daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 6.442450944E9 == 0
6.442450945E9 * zksInstance.self.currentEpoch - zksInstance.zkDb.dataTree.lastProcessedZxid + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 6.442450946E9 == 0
1.2884901889E10 * zksInstance.self.currentVote.id - zksInstance.self.electionAlg.logicalclock + zksInstance.zkDb.dataTree.lastProcessedZxid - 2.5769803776E10 == 0
1.2884901889E10 * zksInstance.self.currentVote.id - zksInstance.self.electionAlg.proposedZxid + zksInstance.zkDb.dataTree.lastProcessedZxid - 2.5769803778E10 == 0
2.9944511980195E13 * zksInstance.self.currentVote.id - zksInstance.self.electionTimeTaken + 2324 * zksInstance.zkDb.dataTree.lastProcessedZxid - 5.9889023960158E13 == 0
2.5769803778E10 * zksInstance.self.currentVote.id - zksInstance.self.qcm.threadCnt + 2 * zksInstance.zkDb.dataTree.lastProcessedZxid - 5.1539607556E10 == 0
3.3359037762358E13 * zksInstance.self.currentVote.id - zksInstance.self.start_fle + 2589 * zksInstance.zkDb.dataTree.lastProcessedZxid - 6.6718048755568E13 == 0
1.2884901888E10 * zksInstance.self.currentVote.id - zksInstance.serverStats.count + zksInstance.zkDb.dataTree.lastProcessedZxid - 2.5769803776E10 == 0
2.70582939648E11 * zksInstance.self.currentVote.id - zksInstance.serverStats.maxLatency + 21 * zksInstance.zkDb.dataTree.lastProcessedZxid - 5.41165879296E11 == 0
1.2884901888E10 * zksInstance.self.currentVote.id - zksInstance.serverStats.packetsReceived + zksInstance.zkDb.dataTree.lastProcessedZxid - 2.5769803775E10 == 0
7.60209211392E11 * zksInstance.self.currentVote.id - 2 * zksInstance.serverStats.totalLatency + 59 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.520418422784E12 == 0
6.2491774153449E13 * zksInstance.self.currentVote.id - zksInstance.sessionTracker.currentTime + 4850 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.24983521535748E14 == 0
7.7309411326E13 * zksInstance.self.currentVote.id - zksInstance.sessionTracker.nextExpirationTime + 6000 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.5461879588E14 == 0
2.18452729373523968E18 * zksInstance.self.currentVote.id - zksInstance.sessionTracker.nextSessionId + 169541632 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4.296995238958465E18 == 0
6.59810055880704E14 * zksInstance.self.currentVote.id - zksInstance.txnLogFactory.txnLog.currentSize + 51208 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.319620111761408E15 == 0
1.2884901888E10 * zksInstance.self.currentVote.id + zksInstance.zkDb.dataTree.lastProcessedZxid - daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2.5769803776E10 == 0
1.288490189E10 * zksInstance.self.currentVote.id + zksInstance.zkDb.dataTree.lastProcessedZxid - daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 2.5769803779E10 == 0
2.18452729373523968E18 * zksInstance.self.currentVote.zxid + zksInstance.sessionTracker.nextSessionId - 169541632 * zksInstance.zkDb.dataTree.lastProcessedZxid - 7.2059348512014336E16 == 0
2.9944511980195E13 * zksInstance.self.electionAlg.logicalclock - 1.2884901889E10 * zksInstance.self.electionTimeTaken + 9841 * zksInstance.zkDb.dataTree.lastProcessedZxid - 5.6899726722142E13 == 0
3.3359037762358E13 * zksInstance.self.electionAlg.logicalclock - 1.2884901889E10 * zksInstance.self.start_fle - 26771737 * zksInstance.zkDb.dataTree.lastProcessedZxid + 3.4485112755659584E17 == 0
6.2491774153449E13 * zksInstance.self.electionAlg.logicalclock - 1.2884901889E10 * zksInstance.sessionTracker.currentTime + 8201 * zksInstance.zkDb.dataTree.lastProcessedZxid + 3.4481865765739546E17 == 0
7.7309411326E13 * zksInstance.self.electionAlg.logicalclock - 1.2884901889E10 * zksInstance.sessionTracker.nextExpirationTime + 8000 * zksInstance.zkDb.dataTree.lastProcessedZxid + 3.44799974549656E17 == 0
1.2884901888E10 * zksInstance.self.electionAlg.logicalclock + zksInstance.zkDb.dataTree.lastProcessedZxid - 1.2884901889E10 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2.5769803776E10 == 0
1.288490189E10 * zksInstance.self.electionAlg.logicalclock - zksInstance.zkDb.dataTree.lastProcessedZxid - 1.2884901889E10 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1.2884901891E10 == 0
1.288490189E10 * zksInstance.self.electionAlg.logicalclock - zksInstance.zkDb.dataTree.lastProcessedZxid - 1.2884901889E10 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 2.576980378E10 == 0
2.9944511980195E13 * zksInstance.self.electionAlg.proposedZxid - 1.2884901889E10 * zksInstance.self.electionTimeTaken + 9841 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2.989297238248E12 == 0
3.3359037762358E13 * zksInstance.self.electionAlg.proposedZxid - 1.2884901889E10 * zksInstance.self.start_fle - 26771737 * zksInstance.zkDb.dataTree.lastProcessedZxid + 3.4491784563212058E17 == 0
6.2491774153449E13 * zksInstance.self.electionAlg.proposedZxid - 1.2884901889E10 * zksInstance.sessionTracker.currentTime + 8201 * zksInstance.zkDb.dataTree.lastProcessedZxid + 3.4494364120570234E17 == 0
7.7309411326E13 * zksInstance.self.electionAlg.proposedZxid - 1.2884901889E10 * zksInstance.sessionTracker.nextExpirationTime + 8000 * zksInstance.zkDb.dataTree.lastProcessedZxid + 3.4495459337230797E17 == 0
1.288490189E10 * zksInstance.self.electionAlg.proposedZxid - zksInstance.zkDb.dataTree.lastProcessedZxid - 1.2884901889E10 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 1.2884901889E10 == 0
2.5769803778E10 * zksInstance.self.electionTimeTaken - 2.9944511980195E13 * zksInstance.self.qcm.threadCnt - 19682 * zksInstance.zkDb.dataTree.lastProcessedZxid - 5.978594476496E12 == 0
1.2884901889E10 * zksInstance.self.electionTimeTaken - 9841 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2.9944511980195E13 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 - 3.2933809218443E13 == 0
1.2884901888E10 * zksInstance.self.electionTimeTaken - 7517 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2.9944511980195E13 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2.989297238016E12 == 0
2.576980378E9 * zksInstance.self.electionTimeTaken - 2433 * zksInstance.zkDb.dataTree.lastProcessedZxid - 5.988902396039E12 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 5.391042948343E12 == 0
2.576980378E9 * zksInstance.self.electionTimeTaken - 2433 * zksInstance.zkDb.dataTree.lastProcessedZxid - 5.988902396039E12 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 5.97859447696E11 == 0
1.6679518881179E13 * zksInstance.self.qcm.threadCnt - 1.2884901889E10 * zksInstance.self.start_fle - 26771737 * zksInstance.zkDb.dataTree.lastProcessedZxid + 3.4491784563212058E17 == 0
6.2491774153449E13 * zksInstance.self.qcm.threadCnt - 2.5769803778E10 * zksInstance.sessionTracker.currentTime + 16402 * zksInstance.zkDb.dataTree.lastProcessedZxid + 6.8988728241140467E17 == 0
3.8654705663E13 * zksInstance.self.qcm.threadCnt - 1.2884901889E10 * zksInstance.sessionTracker.nextExpirationTime + 8000 * zksInstance.zkDb.dataTree.lastProcessedZxid + 3.4495459337230797E17 == 0
6.442450945E9 * zksInstance.self.qcm.threadCnt - zksInstance.zkDb.dataTree.lastProcessedZxid - 1.2884901889E10 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 1.2884901889E10 == 0
1.2884901889E10 * zksInstance.self.start_fle + 26771737 * zksInstance.zkDb.dataTree.lastProcessedZxid - 3.3359037762358E13 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 - 3.4495120466988294E17 == 0
6.442450944E9 * zksInstance.self.start_fle + 13387163 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.6679518881179E13 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.72458922802675712E17 == 0
920350135 * zksInstance.self.start_fle + 1912082 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2.382788411597E12 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 2.4634606187223384E16 == 0
920350135 * zksInstance.self.start_fle + 1912082 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2.382788411597E12 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 2.463698897563498E16 == 0
1.2884901889E10 * zksInstance.sessionTracker.currentTime - 8201 * zksInstance.zkDb.dataTree.lastProcessedZxid - 6.2491774153449E13 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 - 3.4500613297985581E17 == 0
4.294967296E9 * zksInstance.sessionTracker.currentTime - 1117 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2.0830591384483E13 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.149812137263104E17 == 0
1.288490189E10 * zksInstance.sessionTracker.currentTime - 13051 * zksInstance.zkDb.dataTree.lastProcessedZxid - 6.2491774153449E13 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 3.4488114945832006E17 == 0
1.288490189E10 * zksInstance.sessionTracker.currentTime - 13051 * zksInstance.zkDb.dataTree.lastProcessedZxid - 6.2491774153449E13 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 3.4494364123247347E17 == 0
1.2884901889E10 * zksInstance.sessionTracker.nextExpirationTime - 8000 * zksInstance.zkDb.dataTree.lastProcessedZxid - 7.7309411326E13 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 - 3.4503190278363398E17 == 0
805306368 * zksInstance.sessionTracker.nextExpirationTime - 125 * zksInstance.zkDb.dataTree.lastProcessedZxid - 4.831838207875E12 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 2.1559662084096E16 == 0
184070027 * zksInstance.sessionTracker.nextExpirationTime - 200 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.1044201618E12 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 4.9268183426822E15 == 0
184070027 * zksInstance.sessionTracker.nextExpirationTime - 200 * zksInstance.zkDb.dataTree.lastProcessedZxid - 1.1044201618E12 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 4.927922762844E15 == 0
3 * zksInstance.sessionTracker.nextSessionId - 508624896 * zksInstance.zkDb.dataTree.lastProcessedZxid + 2.18452729373523968E18 * zksInstance.zkDb.dataTree.scount - 2.16178045536043008E17 == 0
zksInstance.zkDb.dataTree.lastProcessedZxid + 1.2884901888E10 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 - 1.2884901889E10 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 1.2884901888E10 == 0
zksInstance.zkDb.dataTree.lastProcessedZxid - 1.288490189E10 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 + 1.2884901889E10 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 2.5769803779E10 == 0
zksInstance.zkDb.dataTree.lastProcessedZxid - 1.288490189E10 * daikon.Quant.size(zksInstance.self.qcm.senderWorkerMap_FOR_ENCLOSING_USE)-1 + 1.2884901889E10 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1.288490189E10 == 0
zksInstance.zkDb.dataTree.lastProcessedZxid - 6.442450945E9 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 + 6.442450944E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 6.442450944E9 == 0
zksInstance.sessionTracker.nextSessionId == 72059317303443457L || zksInstance.sessionTracker.nextSessionId == 72059318183591936L || zksInstance.sessionTracker.nextSessionId == 72059318515400704L
880148479 * zksInstance.serverStats.count - 880148479 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059315543146496E16 == 0
880148479 * zksInstance.serverStats.count - 880148479 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059316423294976E16 == 0
880148479 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId - 880148479 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.2059315543146496E16 == 0
880148479 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId - 880148479 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.2059316423294976E16 == 0
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.lastZxidSeen)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.lastProcessedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.lastZxidSeen)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.lastProcessedZxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.zkDb.maxCommittedLog) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.zkDb.maxCommittedLog)
zksInstance.self.electionTimeTaken == 253
zksInstance.sessionTracker.nextSessionId == 288232047382757376L
zksInstance.syncProcessor.randRoll == 21852
zksInstance.syncProcessor.requestOfDeath.createTime == 25501004
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 52 || zksInstance.serverStats.maxLatency == 84
zksInstance.sessionTracker.nextSessionId == 72059265617035265L
zksInstance.serverCnxnFactory.login.lastLogin == 25481508
zksInstance.serverStats.minLatency == 18 || zksInstance.serverStats.minLatency == 58 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 58 || zksInstance.serverStats.totalLatency == 76
zksInstance.sessionTracker.currentTime == 25541536 || zksInstance.sessionTracker.currentTime == 25542000
zksInstance.sessionTracker.nextExpirationTime == 25542000 || zksInstance.sessionTracker.nextExpirationTime == 25545000
zksInstance.sessionTracker.nextSessionId == 72059267927965697L
zksInstance.serverCnxnFactory.login.lastLogin == 25482751
zksInstance.serverStats.minLatency == 3 || zksInstance.serverStats.minLatency == 34 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 34 || zksInstance.serverStats.totalLatency == 37
zksInstance.sessionTracker.currentTime == 25542753
zksInstance.sessionTracker.nextExpirationTime == 25545000
zksInstance.sessionTracker.nextSessionId == 72059268007723009L
zksInstance.serverCnxnFactory.login.lastLogin == 26293219
zksInstance.serverStats.minLatency == 18 || zksInstance.serverStats.minLatency == 56 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 56 || zksInstance.serverStats.totalLatency == 74
zksInstance.sessionTracker.currentTime == 26353247
zksInstance.sessionTracker.nextExpirationTime == 26355000
zksInstance.sessionTracker.nextSessionId == 72059321124257793L
zksInstance.serverCnxnFactory.login.lastLogin == 26294269
zksInstance.sessionTracker.currentTime == 26354299
zksInstance.sessionTracker.nextSessionId == 72059321193201665L
zksInstance.serverCnxnFactory.login.lastLogin == 26259341
zksInstance.sessionTracker.currentTime == 26319368
zksInstance.sessionTracker.nextSessionId == 72059318904029185L
zksInstance.serverCnxnFactory.login.lastLogin == 26232492
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 52
zksInstance.serverStats.minLatency == 52 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.packetsReceived == 2 || zksInstance.serverStats.packetsReceived == 5
zksInstance.serverStats.packetsSent == 1 || zksInstance.serverStats.packetsSent == 4
zksInstance.sessionTracker.currentTime == 26292518
zksInstance.sessionTracker.nextSessionId == 72059317144387585L
daikon.Quant.eltsEqual(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns))
zksInstance.serverCnxnFactory.login.lastLogin == 26291821
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 88
zksInstance.serverStats.minLatency == 27 || zksInstance.serverStats.minLatency == 88 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.serverStats.totalLatency == 0 || zksInstance.serverStats.totalLatency == 88 || zksInstance.serverStats.totalLatency == 115
zksInstance.sessionTracker.currentTime == 26351849 || zksInstance.sessionTracker.currentTime == 26352001
zksInstance.sessionTracker.nextExpirationTime == 26352000 || zksInstance.sessionTracker.nextExpirationTime == 26355000
zksInstance.sessionTracker.nextSessionId == 72059321032704001L
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 338
zksInstance.sessionTracker.currentTime == 25498010
zksInstance.sessionTracker.nextExpirationTime == 25500000
zksInstance.requestsInProcess >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.maxClientCnxns <= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.maxClientCnxns >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.maxLatency >= zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.hzxid - zksInstance.requestsInProcess - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177795226533888E17 == 0
zksInstance.hzxid - 2 * zksInstance.serverStats.count + 4 * zksInstance.sessionTracker.nextSessionId - 2.8823706030204518E17 == 0
2 * zksInstance.hzxid - zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177795226533888E17 == 0
zksInstance.hzxid - 2 * zksInstance.serverStats.packetsSent + 2 * zksInstance.sessionTracker.nextSessionId - 1.44118530151022592E17 == 0
2 * zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.dataTree.lastProcessedZxid + 2.8823706030204518E17 == 0
zksInstance.hzxid + 4 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.maxCommittedLog - 2.8823706030204518E17 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177795226533888E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) + 2.8823706030204518E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 + 2.8823706030204518E17 == 0
zksInstance.requestsInProcess + zksInstance.serverStats.count - 5 * zksInstance.sessionTracker.nextSessionId + 3.6029632537755648E17 == 0
zksInstance.requestsInProcess - zksInstance.serverStats.packetsSent + 4 * zksInstance.sessionTracker.nextSessionId - 2.8823706030204518E17 == 0
zksInstance.requestsInProcess + 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.dataTree.lastProcessedZxid - 2.16177795226533888E17 == 0
zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) + 7.2059265075511296E16 == 0
zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 + 7.2059265075511296E16 == 0
332 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.2233720368547748E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
2 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.packetsSent + 2 * zksInstance.sessionTracker.nextSessionId - 1.44118530151022592E17 == 0
2 * zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.dataTree.lastProcessedZxid + 2.8823706030204518E17 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.8823706030204518E17 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) + 2.8823706030204518E17 == 0
zksInstance.serverStats.count - 4 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 + 2.8823706030204518E17 == 0
zksInstance.serverStats.minLatency + 332 * zksInstance.zkDb.maxCommittedLog + 9.2233720368547748E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.packetsReceived + 3 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.dataTree.lastProcessedZxid - 2.16177795226533888E17 == 0
zksInstance.serverStats.packetsReceived + 2 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.maxCommittedLog - 1.44118530151022592E17 == 0
zksInstance.serverStats.packetsReceived - 2 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.minCommittedLog + 1.44118530151022592E17 == 0
zksInstance.serverStats.packetsReceived - 5 * zksInstance.sessionTracker.nextSessionId + 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) + 3.6029632537755648E17 == 0
2 * zksInstance.serverStats.packetsSent - 2 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.dataTree.lastProcessedZxid + 1.44118530151022592E17 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177795226533888E17 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) + 2.16177795226533888E17 == 0
zksInstance.serverStats.totalLatency - 40 * zksInstance.sessionTracker.nextSessionId - 338 * zksInstance.zkDb.minCommittedLog + 2.8823706030204518E18 == 0
4 * zksInstance.sessionTracker.nextSessionId + zksInstance.zkDb.dataTree.lastProcessedZxid - 2 * zksInstance.zkDb.maxCommittedLog - 2.8823706030204518E17 == 0
3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.dataTree.lastProcessedZxid + zksInstance.zkDb.minCommittedLog - 2.16177795226533888E17 == 0
4 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.dataTree.lastProcessedZxid - 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 2.8823706030204518E17 == 0
2 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.maxCommittedLog + zksInstance.zkDb.minCommittedLog - 1.44118530151022592E17 == 0
4 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.maxCommittedLog - daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 2.8823706030204518E17 == 0
4 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.maxCommittedLog - daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 2.8823706030204518E17 == 0
zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog - daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 7.2059265075511296E16 == 0
zksInstance.serverCnxnFactory.maxClientCnxns == zksInstance.txnLogFactory.snapLog.dbId
zksInstance.serverCnxnFactory.maxClientCnxns == daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.maxSessionTimeout == 240000
zksInstance.minSessionTimeout == 20000
zksInstance.sessionTracker.currentTime == 25403620
zksInstance.sessionTracker.nextExpirationTime == 25404000
zksInstance.sessionTracker.nextSessionId == 72059258889502721L || zksInstance.sessionTracker.nextSessionId == 72059258889502722L || zksInstance.sessionTracker.nextSessionId == 72059258889502723L
zksInstance.maxSessionTimeout % zksInstance.serverStats.packetsSent == 0
50 * zksInstance.hzxid - 2 * zksInstance.serverStats.maxLatency - 75 * zksInstance.sessionTracker.nextSessionId + 5.404444416712704E18 == 0
20 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 17 * zksInstance.sessionTracker.nextSessionId + 1.22500740112154624E18 == 0
2 * zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.minCommittedLog + 2.1617777666850816E17 == 0
2 * zksInstance.serverStats.maxLatency - 50 * zksInstance.serverStats.packetsReceived + 75 * zksInstance.sessionTracker.nextSessionId - 5.404444416712704E18 == 0
2 * zksInstance.serverStats.maxLatency - 50 * zksInstance.serverStats.packetsSent + 75 * zksInstance.sessionTracker.nextSessionId - 5.404444416712704E18 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog + 15 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 9.223372036854776E18 == 0
20 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 17 * zksInstance.sessionTracker.nextSessionId + 1.22500740112154624E18 == 0
2 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.minCommittedLog + 2.1617777666850816E17 == 0
20 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 17 * zksInstance.sessionTracker.nextSessionId + 1.22500740112154624E18 == 0
2 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.minCommittedLog + 2.1617777666850816E17 == 0
zksInstance.serverStats.totalLatency - 3 * zksInstance.sessionTracker.nextSessionId - 40 * zksInstance.zkDb.minCommittedLog + 2.1617777666850816E17 == 0
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId) == daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.zkDb.dataTree.scount)
zksInstance.sessionTracker.currentTime == 26224820
zksInstance.sessionTracker.nextExpirationTime == 26226000
zksInstance.sessionTracker.nextSessionId == 72059312707665921L || zksInstance.sessionTracker.nextSessionId == 72059312707665922L || zksInstance.sessionTracker.nextSessionId == 72059312707665923L
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId))
46 * zksInstance.hzxid - 2 * zksInstance.serverStats.maxLatency - 69 * zksInstance.sessionTracker.nextSessionId + 4.9720925768289485E18 == 0
46 * zksInstance.hzxid - 2 * zksInstance.serverStats.totalLatency - 53 * zksInstance.sessionTracker.nextSessionId + 3.8191435735062938E18 == 0
2 * zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.minCommittedLog + 2.1617793812299776E17 == 0
2 * zksInstance.serverStats.maxLatency - 46 * zksInstance.serverStats.packetsReceived + 69 * zksInstance.sessionTracker.nextSessionId - 4.9720925768289485E18 == 0
2 * zksInstance.serverStats.maxLatency - 46 * zksInstance.serverStats.packetsSent + 69 * zksInstance.sessionTracker.nextSessionId - 4.9720925768289485E18 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog + 18 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 - 9.223372036854776E18 == 0
46 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.serverStats.totalLatency - 53 * zksInstance.sessionTracker.nextSessionId + 3.8191435735062938E18 == 0
2 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.minCommittedLog + 2.1617793812299776E17 == 0
46 * zksInstance.serverStats.packetsSent - 2 * zksInstance.serverStats.totalLatency - 53 * zksInstance.sessionTracker.nextSessionId + 3.8191435735062938E18 == 0
2 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.minCommittedLog + 2.1617793812299776E17 == 0
zksInstance.serverStats.totalLatency - 8 * zksInstance.sessionTracker.nextSessionId - 23 * zksInstance.zkDb.minCommittedLog + 5.7647450166132736E17 == 0
zksInstance.sessionTracker.currentTime == 25403911
zksInstance.sessionTracker.nextSessionId == 72059258908573697L || zksInstance.sessionTracker.nextSessionId == 72059258908573698L
zksInstance.txnLogFactory.txnLog.dbId <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.dbId >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
daikon.Quant.eltsEqual(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId))
24 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 72 * zksInstance.sessionTracker.nextSessionId + 5.1882666414173061E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177776725721088E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.8823703563429478E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 2.8823703563429478E17 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog + 16 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 9.223372036854776E18 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog + 16 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 - 9.223372036854776E18 == 0
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
daikon.Quant.getElement_Object(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE, zksInstance.requestsInProcess-1) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId)
zksInstance.sessionTracker.currentTime == 26225024
zksInstance.sessionTracker.nextSessionId == 72059312721100801L || zksInstance.sessionTracker.nextSessionId == 72059312721100802L
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId) != null
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId))
zksInstance.txnLogFactory.txnLog.dbId <= daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
daikon.Quant.eltsEqual(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId))
26 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 78 * zksInstance.sessionTracker.nextSessionId + 5.6206263922458624E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.161779381633024E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.882372508844032E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 2.882372508844032E17 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog + 22 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 9.223372036854776E18 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog + 22 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 - 9.223372036854776E18 == 0
zksInstance.sessionTracker.currentTime == 25403715
zksInstance.sessionTracker.nextSessionId == 72059258895728641L
zksInstance.sessionTracker.currentTime == 26224888
zksInstance.sessionTracker.nextSessionId == 72059312712187905L
zksInstance.serverStats.minLatency >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.currentTime == 25403992
zksInstance.sessionTracker.nextSessionId == 72059258913882113L
zksInstance.sessionTracker.currentTime == 26225091
zksInstance.sessionTracker.nextSessionId == 72059312725491713L
zksInstance.requestsInProcess == 0 || zksInstance.requestsInProcess == 1 || zksInstance.requestsInProcess == 2
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 24 || zksInstance.serverStats.maxLatency == 51
zksInstance.sessionTracker.nextSessionId == 72059257461538817L || zksInstance.sessionTracker.nextSessionId == 72059257461538818L || zksInstance.sessionTracker.nextSessionId == 72059258229096449L
zksInstance.maxSessionTimeout < daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess >= zksInstance.txnLogFactory.txnLog.dbId
zksInstance.serverStats.maxLatency % daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) == 0
zksInstance.serverStats.packetsSent >= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.currentSize >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.dbId <= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.dbId <= daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.lastZxidSeen % daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) == 0
zksInstance.txnLogFactory.txnLog.lastZxidSeen >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
zksInstance.hzxid + 2 * zksInstance.requestsInProcess - 4 * zksInstance.sessionTracker.nextSessionId + 2.8823702984615526E17 == 0
zksInstance.hzxid - zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.2059257461538816E16 == 0
zksInstance.hzxid - 2 * zksInstance.serverStats.packetsReceived + 4 * zksInstance.sessionTracker.nextSessionId - 2.8823702984615526E17 == 0
2.302672896E9 * zksInstance.hzxid - 2.302672891E9 * zksInstance.serverStats.packetsSent - 15 * zksInstance.sessionTracker.nextSessionId + 1.08088886422575514E18 == 0
67 * zksInstance.hzxid - 2 * zksInstance.serverStats.totalLatency - 110 * zksInstance.sessionTracker.nextSessionId + 7.9265183207692698E18 == 0
2.302672896E9 * zksInstance.hzxid - 15 * zksInstance.sessionTracker.nextSessionId - 2.302672891E9 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 1.08088886192308224E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177772384616448E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.8823702984615526E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2.8823702984615526E17 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId + 2.302672891E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) + 2.16177770081943552E17 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId + 2.302672891E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 + 2.16177772384616448E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.8823702984615526E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 2.8823702984615526E17 == 0
2 * zksInstance.requestsInProcess + zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177772384616448E17 == 0
zksInstance.requestsInProcess + zksInstance.serverStats.packetsReceived - 4 * zksInstance.sessionTracker.nextSessionId + 2.8823702984615526E17 == 0
2 * zksInstance.requestsInProcess + zksInstance.serverStats.packetsSent - 4 * zksInstance.sessionTracker.nextSessionId + 2.8823702984615526E17 == 0
67 * zksInstance.requestsInProcess + zksInstance.serverStats.totalLatency - 79 * zksInstance.sessionTracker.nextSessionId + 5.6926813394615665E18 == 0
2 * zksInstance.requestsInProcess - 4 * zksInstance.sessionTracker.nextSessionId + zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2.8823702984615526E17 == 0
767557632 * zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId + 767557632 * zksInstance.zkDb.minCommittedLog + 7.2059256693981184E16 == 0
767557632 * zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId + 767557632 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 7.2059256693981184E16 == 0
767557632 * zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId + 767557632 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 7.2059257461538816E16 == 0
51 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 102 * zksInstance.sessionTracker.nextSessionId + 7.3500442610769592E18 == 0
zksInstance.serverStats.count - 2 * zksInstance.serverStats.packetsReceived + 5 * zksInstance.sessionTracker.nextSessionId - 3.6029628730769408E17 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059257461538816E16 == 0
67 * zksInstance.serverStats.count - 2 * zksInstance.serverStats.totalLatency - 43 * zksInstance.sessionTracker.nextSessionId + 3.0985480708461691E18 == 0
zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 7.2059257461538816E16 == 0
zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 1.44118514923077632E17 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.16177772384616448E17 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.16177772384616448E17 == 0
255852544 * zksInstance.serverStats.maxLatency + 17 * zksInstance.sessionTracker.nextSessionId - 1.3048479744E10 * zksInstance.zkDb.minCommittedLog - 1.22500737684615987E18 == 0
255852544 * zksInstance.serverStats.maxLatency + 17 * zksInstance.sessionTracker.nextSessionId - 1.3048479744E10 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 1.22500737684615987E18 == 0
2 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.packetsSent - 4 * zksInstance.sessionTracker.nextSessionId + 2.8823702984615526E17 == 0
2 * zksInstance.serverStats.packetsReceived - 4 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2.8823702984615526E17 == 0
767557631 * zksInstance.serverStats.packetsReceived + 4 * zksInstance.sessionTracker.nextSessionId - 3.070230528E9 * zksInstance.zkDb.minCommittedLog - 2.8823703138127053E17 == 0
zksInstance.serverStats.packetsReceived - 4 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.8823702984615526E17 == 0
zksInstance.serverStats.packetsReceived - 4 * zksInstance.sessionTracker.nextSessionId + 3.070230528E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) + 2.8823702677592474E17 == 0
zksInstance.serverStats.packetsReceived - 4 * zksInstance.sessionTracker.nextSessionId + 3.070230528E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 + 2.8823702984615526E17 == 0
zksInstance.serverStats.packetsReceived - 4 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.8823702984615526E17 == 0
67 * zksInstance.serverStats.packetsSent - 2 * zksInstance.serverStats.totalLatency - 110 * zksInstance.sessionTracker.nextSessionId + 7.9265183207692698E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177772384616448E17 == 0
zksInstance.serverStats.packetsSent - 4 * zksInstance.sessionTracker.nextSessionId + 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.8823702984615526E17 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.302672896E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) + 2.16177770081943552E17 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.302672896E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 + 2.16177772384616448E17 == 0
zksInstance.serverStats.packetsSent - 4 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.8823702984615526E17 == 0
2 * zksInstance.serverStats.totalLatency + 110 * zksInstance.sessionTracker.nextSessionId - 67 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 7.9265183207692698E18 == 0
zksInstance.serverStats.totalLatency - 12 * zksInstance.sessionTracker.nextSessionId - 67 * zksInstance.zkDb.minCommittedLog + 8.6471108953846579E17 == 0
zksInstance.serverStats.totalLatency - 79 * zksInstance.sessionTracker.nextSessionId + 67 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 5.6926813394615665E18 == 0
zksInstance.serverStats.totalLatency - 79 * zksInstance.sessionTracker.nextSessionId - 67 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 5.6926813394615665E18 == 0
3 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen + zksInstance.zkDb.minCommittedLog - 2.16177772384616448E17 == 0
4 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 2.8823702984615526E17 == 0
4 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 2.8823702984615526E17 == 0
3 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 2.302672896E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 2.16177770081943552E17 == 0
3 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 2.302672896E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 2.16177772384616448E17 == 0
4 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 2.8823702984615526E17 == 0
4 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 - 2.8823702984615526E17 == 0
zksInstance.sessionTracker.nextSessionId - 767557632 * zksInstance.zkDb.minCommittedLog - 767557632 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 7.2059256693981184E16 == 0
zksInstance.sessionTracker.nextSessionId - 767557632 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 767557632 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 7.2059256693981184E16 == 0
zksInstance.sessionTracker.nextSessionId - 767557632 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 767557632 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 - 7.2059257461538816E16 == 0
zksInstance.sessionTracker.nextSessionId - 767557632 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 767557632 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 7.2059257461538816E16 == 0
zksInstance.sessionTracker.nextSessionId - 767557632 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 767557632 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 - 7.2059258229096448E16 == 0
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 18 || zksInstance.serverStats.maxLatency == 21
zksInstance.sessionTracker.nextSessionId == 72059311256502273L || zksInstance.sessionTracker.nextSessionId == 72059311256502274L || zksInstance.sessionTracker.nextSessionId == 72059312048046081L
zksInstance.txnLogFactory.txnLog.dbId == 0
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)
zksInstance.serverStats.packetsReceived > zksInstance.txnLogFactory.txnLog.dbId
zksInstance.serverStats.packetsSent > zksInstance.txnLogFactory.txnLog.dbId
zksInstance.sessionTracker.currentTime > zksInstance.txnLogFactory.txnLog.dbId
zksInstance.sessionTracker.nextExpirationTime > zksInstance.txnLogFactory.txnLog.dbId
zksInstance.sessionTracker.nextSessionId > zksInstance.txnLogFactory.txnLog.dbId
zksInstance.hzxid + 2 * zksInstance.requestsInProcess - 4 * zksInstance.sessionTracker.nextSessionId + 2.8823724502600909E17 == 0
zksInstance.hzxid - zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.2059311256502272E16 == 0
21 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 63 * zksInstance.sessionTracker.nextSessionId + 4.5397366091596431E18 == 0
zksInstance.hzxid - 2 * zksInstance.serverStats.packetsReceived + 4 * zksInstance.sessionTracker.nextSessionId - 2.8823724502600909E17 == 0
2.374631424E9 * zksInstance.hzxid - 2.374631419E9 * zksInstance.serverStats.packetsSent - 15 * zksInstance.sessionTracker.nextSessionId + 1.0808896712221655E18 == 0
21 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 47 * zksInstance.sessionTracker.nextSessionId + 3.3867876290556068E18 == 0
2.374631424E9 * zksInstance.hzxid - 15 * zksInstance.sessionTracker.nextSessionId - 2.374631419E9 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 1.08088966884753408E18 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177933769506816E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.8823724502600909E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId + 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2.8823724502600909E17 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId + 2.374631419E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) + 2.16177931394875392E17 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId + 2.374631419E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 + 2.16177933769506816E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.8823724502600909E17 == 0
zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 2.8823724502600909E17 == 0
2 * zksInstance.requestsInProcess + zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177933769506816E17 == 0
zksInstance.requestsInProcess + zksInstance.serverStats.packetsReceived - 4 * zksInstance.sessionTracker.nextSessionId + 2.8823724502600909E17 == 0
2 * zksInstance.requestsInProcess + zksInstance.serverStats.packetsSent - 4 * zksInstance.sessionTracker.nextSessionId + 2.8823724502600909E17 == 0
25 * zksInstance.requestsInProcess + zksInstance.serverStats.totalLatency - 37 * zksInstance.sessionTracker.nextSessionId + 2.6661945164905841E18 == 0
2 * zksInstance.requestsInProcess - 4 * zksInstance.sessionTracker.nextSessionId + zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2.8823724502600909E17 == 0
791543808 * zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId + 791543808 * zksInstance.zkDb.minCommittedLog + 7.2059310464958464E16 == 0
791543808 * zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId + 791543808 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 7.2059310464958464E16 == 0
791543808 * zksInstance.requestsInProcess - zksInstance.sessionTracker.nextSessionId + 791543808 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 7.2059311256502272E16 == 0
21 * zksInstance.serverStats.count - zksInstance.serverStats.maxLatency - 42 * zksInstance.sessionTracker.nextSessionId + 3.0264910727730954E18 == 0
zksInstance.serverStats.count - 2 * zksInstance.serverStats.packetsReceived + 5 * zksInstance.sessionTracker.nextSessionId - 3.6029655628251136E17 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059311256502272E16 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent + daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 1 == 0
21 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency - 26 * zksInstance.sessionTracker.nextSessionId + 1.87354209266905907E18 == 0
zksInstance.serverStats.count + zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 7.2059311256502272E16 == 0
zksInstance.serverStats.count - 2 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 1.44118622513004544E17 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId + 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.16177933769506816E17 == 0
zksInstance.serverStats.count - 3 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.16177933769506816E17 == 0
zksInstance.serverStats.maxLatency - 21 * zksInstance.serverStats.packetsSent + 63 * zksInstance.sessionTracker.nextSessionId - 4.5397366091596431E18 == 0
zksInstance.serverStats.maxLatency + 63 * zksInstance.sessionTracker.nextSessionId - 21 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 4.5397366091596431E18 == 0
263847936 * zksInstance.serverStats.maxLatency + 7 * zksInstance.sessionTracker.nextSessionId - 5.540806656E9 * zksInstance.zkDb.minCommittedLog - 5.044151787955159E17 == 0
263847936 * zksInstance.serverStats.maxLatency + 7 * zksInstance.sessionTracker.nextSessionId - 5.540806656E9 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 5.044151787955159E17 == 0
2 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.packetsSent - 4 * zksInstance.sessionTracker.nextSessionId + 2.8823724502600909E17 == 0
25 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 63 * zksInstance.sessionTracker.nextSessionId + 4.5397366091596431E18 == 0
2 * zksInstance.serverStats.packetsReceived - 4 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2.8823724502600909E17 == 0
791543807 * zksInstance.serverStats.packetsReceived + 4 * zksInstance.sessionTracker.nextSessionId - 3.166175232E9 * zksInstance.zkDb.minCommittedLog - 2.882372466090967E17 == 0
zksInstance.serverStats.packetsReceived - 4 * zksInstance.sessionTracker.nextSessionId + daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.8823724502600909E17 == 0
zksInstance.serverStats.packetsReceived - 4 * zksInstance.sessionTracker.nextSessionId + 3.166175232E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) + 2.8823724185983386E17 == 0
zksInstance.serverStats.packetsReceived - 4 * zksInstance.sessionTracker.nextSessionId + 3.166175232E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 + 2.8823724502600909E17 == 0
zksInstance.serverStats.packetsReceived - 4 * zksInstance.sessionTracker.nextSessionId - daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.8823724502600909E17 == 0
21 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 47 * zksInstance.sessionTracker.nextSessionId + 3.3867876290556068E18 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - zksInstance.zkDb.minCommittedLog + 2.16177933769506816E17 == 0
zksInstance.serverStats.packetsSent - 4 * zksInstance.sessionTracker.nextSessionId + 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.8823724502600909E17 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.374631424E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) + 2.16177931394875392E17 == 0
zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.374631424E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 + 2.16177933769506816E17 == 0
zksInstance.serverStats.packetsSent - 4 * zksInstance.sessionTracker.nextSessionId - 2 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.8823724502600909E17 == 0
zksInstance.serverStats.totalLatency + 47 * zksInstance.sessionTracker.nextSessionId - 21 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 3.3867876290556068E18 == 0
zksInstance.serverStats.totalLatency - 12 * zksInstance.sessionTracker.nextSessionId - 25 * zksInstance.zkDb.minCommittedLog + 8.6471173507802726E17 == 0
zksInstance.serverStats.totalLatency - 37 * zksInstance.sessionTracker.nextSessionId + 25 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.6661945164905841E18 == 0
zksInstance.serverStats.totalLatency - 37 * zksInstance.sessionTracker.nextSessionId - 25 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.6661945164905841E18 == 0
3 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen + zksInstance.zkDb.minCommittedLog - 2.16177933769506816E17 == 0
4 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 2.8823724502600909E17 == 0
4 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 2 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 2.8823724502600909E17 == 0
3 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 2.374631424E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) - 2.16177931394875392E17 == 0
3 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 2.374631424E9 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 - 2.16177933769506816E17 == 0
4 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 2.8823724502600909E17 == 0
4 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 - 2.8823724502600909E17 == 0
zksInstance.sessionTracker.nextSessionId - 791543808 * zksInstance.zkDb.minCommittedLog - 791543808 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 7.2059310464958464E16 == 0
zksInstance.sessionTracker.nextSessionId - 791543808 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 791543808 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 7.2059310464958464E16 == 0
zksInstance.sessionTracker.nextSessionId - 791543808 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 791543808 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 - 7.2059311256502272E16 == 0
zksInstance.sessionTracker.nextSessionId - 791543808 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 791543808 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 7.2059311256502272E16 == 0
zksInstance.sessionTracker.nextSessionId - 791543808 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 791543808 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 - 7.205931204804608E16 == 0
zksInstance.sessionTracker.currentTime == 25403821
zksInstance.sessionTracker.nextSessionId == 72059258902740993L || zksInstance.sessionTracker.nextSessionId == 72059258902740994L || zksInstance.sessionTracker.nextSessionId == 72059258902740995L
zksInstance.serverStats.maxLatency - 14 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
28 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 42 * zksInstance.sessionTracker.nextSessionId + 3.0264888739151217E18 == 0
19 * zksInstance.hzxid - zksInstance.serverStats.totalLatency - 16 * zksInstance.sessionTracker.nextSessionId + 1.15294814244385587E18 == 0
2 * zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.minCommittedLog + 2.16177776708222976E17 == 0
zksInstance.serverStats.maxLatency - 28 * zksInstance.serverStats.packetsReceived + 42 * zksInstance.sessionTracker.nextSessionId - 3.0264888739151217E18 == 0
zksInstance.serverStats.maxLatency - 28 * zksInstance.serverStats.packetsSent + 42 * zksInstance.sessionTracker.nextSessionId - 3.0264888739151217E18 == 0
zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog + 21 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 9.223372036854776E18 == 0
19 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency - 16 * zksInstance.sessionTracker.nextSessionId + 1.15294814244385587E18 == 0
2 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.minCommittedLog + 2.16177776708222976E17 == 0
19 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency - 16 * zksInstance.sessionTracker.nextSessionId + 1.15294814244385587E18 == 0
2 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.minCommittedLog + 2.16177776708222976E17 == 0
zksInstance.serverStats.totalLatency - 3 * zksInstance.sessionTracker.nextSessionId - 38 * zksInstance.zkDb.minCommittedLog + 2.16177776708222976E17 == 0
zksInstance.serverStats.minLatency == 3 || zksInstance.serverStats.minLatency == 18 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26224964
zksInstance.sessionTracker.nextSessionId == 72059312717103105L || zksInstance.sessionTracker.nextSessionId == 72059312717103106L || zksInstance.sessionTracker.nextSessionId == 72059312717103107L
zksInstance.serverStats.maxLatency - 9 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
zksInstance.serverStats.maxLatency % daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 0
zksInstance.serverStats.totalLatency - 26 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
18 * zksInstance.hzxid - zksInstance.serverStats.maxLatency - 27 * zksInstance.sessionTracker.nextSessionId + 1.94560144336178381E18 == 0
36 * zksInstance.hzxid - 2 * zksInstance.serverStats.totalLatency - 41 * zksInstance.sessionTracker.nextSessionId + 2.9544318214012273E18 == 0
2 * zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.minCommittedLog + 2.16177938151309312E17 == 0
zksInstance.serverStats.maxLatency - 18 * zksInstance.serverStats.packetsReceived + 27 * zksInstance.sessionTracker.nextSessionId - 1.94560144336178381E18 == 0
zksInstance.serverStats.maxLatency - 18 * zksInstance.serverStats.packetsSent + 27 * zksInstance.sessionTracker.nextSessionId - 1.94560144336178381E18 == 0
36 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.serverStats.totalLatency - 41 * zksInstance.sessionTracker.nextSessionId + 2.9544318214012273E18 == 0
2 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.minCommittedLog + 2.16177938151309312E17 == 0
36 * zksInstance.serverStats.packetsSent - 2 * zksInstance.serverStats.totalLatency - 41 * zksInstance.sessionTracker.nextSessionId + 2.9544318214012273E18 == 0
2 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId - 2 * zksInstance.zkDb.minCommittedLog + 2.16177938151309312E17 == 0
2 * zksInstance.serverStats.totalLatency - 13 * zksInstance.sessionTracker.nextSessionId - 36 * zksInstance.zkDb.minCommittedLog + 9.3677106532234035E17 == 0
zksInstance.sessionTracker.currentTime == 25380904
zksInstance.sessionTracker.nextExpirationTime == 25383000
zksInstance.sessionTracker.nextSessionId == 72059257400852481L
zksInstance.sessionTracker.currentTime == 25380983
zksInstance.sessionTracker.nextSessionId == 72059257406029825L
zksInstance.sessionTracker.currentTime == 25380622
zksInstance.sessionTracker.nextSessionId == 72059257382371329L
34 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
34 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.sessionTracker.currentTime == 25381065
zksInstance.sessionTracker.nextSessionId == 72059257411403777L
zksInstance.serverStats.minLatency == 18 || zksInstance.serverStats.minLatency == 152 || zksInstance.serverStats.minLatency == 9223372036854775807L
zksInstance.sessionTracker.currentTime == 26317292
zksInstance.sessionTracker.nextExpirationTime == 26319000
zksInstance.sessionTracker.nextSessionId == 72059318767910913L
zksInstance.hzxid != zksInstance.requestsInProcess
134 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.serverStats.minLatency + 134 * zksInstance.zkDb.dataTree.lastProcessedZxid + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.self.acceptedEpoch == zksInstance.serverCnxnFactory.zkServer.requestsInProcess
zksInstance.self.acceptedEpoch == zksInstance.syncProcessor.zks.requestsInProcess
zksInstance.self.acceptedEpoch == daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.electionEpoch == zksInstance.self.bcVote.peerEpoch
zksInstance.self.bcVote.electionEpoch == zksInstance.self.cnxnFactory.maxClientCnxns
zksInstance.self.bcVote.electionEpoch == zksInstance.self.maxSessionTimeout
zksInstance.self.bcVote.electionEpoch == zksInstance.self.minSessionTimeout
zksInstance.self.bcVote.electionEpoch == zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.self.bcVote.electionEpoch == zksInstance.serverCnxnFactory.zkServer.maxSessionTimeout
zksInstance.self.bcVote.electionEpoch == zksInstance.serverCnxnFactory.zkServer.minSessionTimeout
zksInstance.self.bcVote.electionEpoch == zksInstance.syncProcessor.requestOfDeath.zxid
zksInstance.self.bcVote.electionEpoch == zksInstance.syncProcessor.zks.maxSessionTimeout
zksInstance.self.bcVote.electionEpoch == zksInstance.syncProcessor.zks.minSessionTimeout
zksInstance.self.bcVote.electionEpoch == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.version == zksInstance.self.electionType
zksInstance.self.bcVote.version == daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen == zksInstance.zkDb.maxCommittedLog
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch-1) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.initLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.syncLimit-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.version)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionType)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.end_fle)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.start_fle)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.tick)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.cxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.sessionId)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.requestOfDeath.type)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess-1)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.myid) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.myid-1) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.sessionTracker.serverId-1)
zksInstance.self.bcVote.electionEpoch == -1
zksInstance.self.bcVote.zxid == 0 || zksInstance.self.bcVote.zxid == 4294967309L
zksInstance.self.electionTimeTaken == 25416928 || zksInstance.self.electionTimeTaken == 25417838
daikon.Quant.eltsNotEqual(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, null)
zksInstance.self.zkDb.minCommittedLog == 0 || zksInstance.self.zkDb.minCommittedLog == 4294967297L || zksInstance.self.zkDb.minCommittedLog == 4294967310L
zksInstance.serverCnxnFactory.maxClientCnxns == -1 || zksInstance.serverCnxnFactory.maxClientCnxns == 100
zksInstance.sessionTracker.currentTime == 25414904
zksInstance.sessionTracker.nextExpirationTime == 25416000
zksInstance.syncProcessor.randRoll == 37915 || zksInstance.syncProcessor.randRoll == 47023
zksInstance.syncProcessor.requestOfDeath.createTime == 25414820
zksInstance.tickTime == 2000 || zksInstance.tickTime == 3000
zksInstance.txnLogFactory.snapLog.close == false
zksInstance.zkDb.dataTree.scount == 0 || zksInstance.zkDb.dataTree.scount == 13
daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE) == 3
daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1 != 0
daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 1 || daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) == 2
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) != null
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) != null
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version) != null
zksInstance.hzxid % zksInstance.self.OBSERVER_ID == 0
zksInstance.hzxid % zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE == 0
zksInstance.hzxid < zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE
zksInstance.hzxid > zksInstance.self.bcVote.electionEpoch
zksInstance.hzxid % zksInstance.self.bcVote.id == 0
zksInstance.hzxid < zksInstance.self.bcVote.id
zksInstance.hzxid == zksInstance.self.bcVote.version*zksInstance.self.bcVote.version
zksInstance.self.bcVote.version == zksInstance.hzxid*zksInstance.hzxid
zksInstance.hzxid % zksInstance.self.electionTimeTaken == 0
zksInstance.hzxid % zksInstance.self.myid == 0
zksInstance.hzxid % zksInstance.self.tickTime == 0
zksInstance.hzxid < zksInstance.self.tickTime
zksInstance.hzxid % zksInstance.self.zkDb.commitLogBuffer == 0
zksInstance.hzxid < zksInstance.self.zkDb.commitLogBuffer
zksInstance.hzxid % zksInstance.self.zkDb.commitLogCount == 0
zksInstance.hzxid < zksInstance.self.zkDb.commitLogCount
zksInstance.hzxid != zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.hzxid % zksInstance.serverCnxnFactory.zkServer.superSecret == 0
zksInstance.hzxid < zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.hzxid < zksInstance.tickTime
zksInstance.hzxid != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.hzxid % daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1 == 0
zksInstance.maxSessionTimeout <= zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.maxSessionTimeout <= daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.requestsInProcess != zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.requestsInProcess < zksInstance.tickTime
zksInstance.requestsInProcess != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.requestsInProcess != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.self.OBSERVER_ID > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.self.OBSERVER_ID > zksInstance.tickTime
zksInstance.self.OBSERVER_ID > daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE < zksInstance.tickTime
zksInstance.self.QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE > daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.self.acceptedEpoch > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.self.acceptedEpoch < zksInstance.tickTime
zksInstance.self.acceptedEpoch < daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.self.acceptedEpoch >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.electionEpoch < zksInstance.self.bcVote.zxid
zksInstance.self.bcVote.electionEpoch < zksInstance.self.zkDb.maxCommittedLog
zksInstance.self.bcVote.electionEpoch < zksInstance.self.zkDb.minCommittedLog
zksInstance.self.bcVote.electionEpoch < zksInstance.serverStats.count
zksInstance.self.bcVote.electionEpoch < zksInstance.serverStats.maxLatency
zksInstance.self.bcVote.electionEpoch < zksInstance.serverStats.packetsReceived
zksInstance.self.bcVote.electionEpoch < zksInstance.serverStats.packetsSent
zksInstance.self.bcVote.electionEpoch < zksInstance.serverStats.totalLatency
zksInstance.self.bcVote.electionEpoch < zksInstance.tickTime
zksInstance.self.bcVote.electionEpoch < zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.self.bcVote.electionEpoch < zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.self.bcVote.electionEpoch < zksInstance.zkDb.dataTree.scount
zksInstance.self.bcVote.electionEpoch < zksInstance.zkDb.minCommittedLog
zksInstance.self.bcVote.electionEpoch < daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.electionEpoch < daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.electionEpoch <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.electionEpoch <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.id > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.self.bcVote.id < zksInstance.tickTime
zksInstance.self.bcVote.id > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.version > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.self.bcVote.version < zksInstance.tickTime
zksInstance.self.bcVote.version < daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.zxid > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.self.bcVote.zxid != zksInstance.tickTime
zksInstance.self.bcVote.zxid >= zksInstance.txnLogFactory.txnLog.dbId
zksInstance.self.bcVote.zxid != zksInstance.zkDb.commitLogBuffer
zksInstance.self.bcVote.zxid != zksInstance.zkDb.commitLogCount
zksInstance.self.bcVote.zxid != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.zxid != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.zxid >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.eltsEqual(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.txnLogFactory.txnLog.dbId))
zksInstance.self.electionTimeTaken > zksInstance.self.tickTime
zksInstance.self.electionTimeTaken > zksInstance.self.zkDb.commitLogBuffer
zksInstance.self.electionTimeTaken > zksInstance.self.zkDb.commitLogCount
zksInstance.self.electionTimeTaken > zksInstance.syncProcessor.randRoll
zksInstance.self.electionTimeTaken > zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.self.electionTimeTaken > zksInstance.syncProcessor.snapCount
zksInstance.self.electionTimeTaken > zksInstance.tickTime
zksInstance.self.electionTimeTaken > zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.self.electionTimeTaken > zksInstance.zkDb.commitLogBuffer
zksInstance.self.electionTimeTaken > zksInstance.zkDb.commitLogCount
zksInstance.self.electionTimeTaken > daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.self.myid < zksInstance.tickTime
zksInstance.self.myid < zksInstance.zkDb.commitLogBuffer
zksInstance.self.myid < zksInstance.zkDb.commitLogCount
zksInstance.self.myid <= daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.self.myid >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.subsetOf(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.self.tickTime > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.self.tickTime > daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.commitLogBuffer > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.self.zkDb.commitLogBuffer < zksInstance.tickTime
zksInstance.self.zkDb.commitLogBuffer > daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.commitLogCount > zksInstance.serverCnxnFactory.maxClientCnxns
zksInstance.self.zkDb.commitLogCount < zksInstance.tickTime
zksInstance.self.zkDb.commitLogCount > daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog % zksInstance.serverCnxnFactory.maxClientCnxns == 0
zksInstance.self.zkDb.maxCommittedLog >= zksInstance.serverStats.packetsSent
zksInstance.self.zkDb.maxCommittedLog != zksInstance.tickTime
zksInstance.self.zkDb.maxCommittedLog >= zksInstance.txnLogFactory.txnLog.dbId
zksInstance.self.zkDb.maxCommittedLog != zksInstance.zkDb.commitLogBuffer
zksInstance.self.zkDb.maxCommittedLog != zksInstance.zkDb.commitLogCount
zksInstance.self.zkDb.maxCommittedLog % daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 0
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.maxCommittedLog % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 == 0
zksInstance.self.zkDb.maxCommittedLog >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.minCommittedLog % zksInstance.serverCnxnFactory.maxClientCnxns == 0
zksInstance.self.zkDb.minCommittedLog >= zksInstance.serverStats.packetsSent
zksInstance.self.zkDb.minCommittedLog != zksInstance.tickTime
zksInstance.self.zkDb.minCommittedLog >= zksInstance.txnLogFactory.txnLog.dbId
zksInstance.self.zkDb.minCommittedLog != zksInstance.zkDb.commitLogBuffer
zksInstance.self.zkDb.minCommittedLog != zksInstance.zkDb.commitLogCount
zksInstance.self.zkDb.minCommittedLog % daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) == 0
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.minCommittedLog % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 == 0
zksInstance.self.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.serverCnxnFactory.zkServer.superSecret
zksInstance.serverCnxnFactory.maxClientCnxns != zksInstance.serverStats.count
zksInstance.serverCnxnFactory.maxClientCnxns != zksInstance.serverStats.minLatency
zksInstance.serverCnxnFactory.maxClientCnxns != zksInstance.serverStats.packetsReceived
zksInstance.serverCnxnFactory.maxClientCnxns != zksInstance.serverStats.packetsSent
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.sessionTracker.expirationInterval
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.superSecret
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.syncProcessor.requestOfDeath.createTime
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.syncProcessor.snapCount
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.tickTime
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.serverCnxnFactory.maxClientCnxns != zksInstance.txnLogFactory.txnLog.dbId
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.serverCnxnFactory.maxClientCnxns != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.zkDb.commitLogBuffer
zksInstance.serverCnxnFactory.maxClientCnxns < zksInstance.zkDb.commitLogCount
zksInstance.serverCnxnFactory.maxClientCnxns != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.serverCnxnFactory.maxClientCnxns != zksInstance.zkDb.dataTree.scount
zksInstance.serverCnxnFactory.maxClientCnxns != zksInstance.zkDb.minCommittedLog
zksInstance.serverCnxnFactory.maxClientCnxns != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.maxClientCnxns != daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.maxClientCnxns != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.maxClientCnxns != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) % zksInstance.serverCnxnFactory.maxClientCnxns == 0
zksInstance.serverCnxnFactory.maxClientCnxns != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.maxClientCnxns != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.serverCnxnFactory.maxClientCnxns >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.serverCnxnFactory.maxClientCnxns != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 % zksInstance.serverCnxnFactory.maxClientCnxns == 0
daikon.Quant.eltsEqual(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version))
zksInstance.serverCnxnFactory.zkServer.superSecret > zksInstance.tickTime
zksInstance.serverCnxnFactory.zkServer.superSecret > daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.serverStats.count < zksInstance.tickTime
zksInstance.serverStats.maxLatency < zksInstance.tickTime
zksInstance.serverStats.maxLatency != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.minLatency != zksInstance.tickTime
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.minLatency != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.packetsReceived < zksInstance.tickTime
zksInstance.serverStats.packetsSent < zksInstance.tickTime
zksInstance.serverStats.packetsSent >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.serverStats.totalLatency < zksInstance.tickTime
zksInstance.serverStats.totalLatency != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.sessionTracker.currentTime > zksInstance.tickTime
zksInstance.sessionTracker.currentTime != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.sessionTracker.currentTime > daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.expirationInterval > daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextExpirationTime > zksInstance.tickTime
zksInstance.sessionTracker.nextExpirationTime != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.sessionTracker.nextExpirationTime > daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.sessionTracker.nextSessionId > zksInstance.tickTime
zksInstance.sessionTracker.nextSessionId > daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.myid))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.myid-1))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.version))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.myid))
daikon.Quant.eltsEqual(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.myid-1))
zksInstance.superSecret > zksInstance.tickTime
zksInstance.superSecret > daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.randRoll > zksInstance.tickTime
zksInstance.syncProcessor.randRoll > zksInstance.zkDb.commitLogBuffer
zksInstance.syncProcessor.randRoll > zksInstance.zkDb.commitLogCount
zksInstance.syncProcessor.randRoll > daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.requestOfDeath.createTime > zksInstance.tickTime
zksInstance.syncProcessor.requestOfDeath.createTime > daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.syncProcessor.snapCount > zksInstance.tickTime
zksInstance.syncProcessor.snapCount > daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.tickTime < zksInstance.txnLogFactory.snapLog.SNAP_MAGIC
zksInstance.tickTime != zksInstance.txnLogFactory.txnLog.currentSize
zksInstance.tickTime > zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.tickTime != zksInstance.txnLogFactory.txnLog.lastZxidSeen
zksInstance.tickTime < zksInstance.txnLogFactory.txnLog.preAllocSize
zksInstance.tickTime > zksInstance.zkDb.commitLogBuffer
zksInstance.tickTime > zksInstance.zkDb.commitLogCount
zksInstance.tickTime != zksInstance.zkDb.dataTree.lastProcessedZxid
zksInstance.tickTime > zksInstance.zkDb.dataTree.scount
zksInstance.tickTime != zksInstance.zkDb.minCommittedLog
zksInstance.tickTime > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.tickTime > daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.tickTime > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.tickTime > daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
zksInstance.tickTime > daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.snapLog.SNAP_MAGIC > daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.currentSize != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.dbId <= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.dbId >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.dbId <= daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.dbId != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.dbId <= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.dbId >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.dbId <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS > daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.preAllocSize > daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.zkDb.commitLogBuffer > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.commitLogBuffer > daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.zkDb.commitLogBuffer > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.zkDb.commitLogCount > daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.commitLogCount > daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
zksInstance.zkDb.commitLogCount > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.lastProcessedZxid != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.dataTree.scount >= daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.dataTree.scount != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.dataTree.scount >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.minCommittedLog >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) <= daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) != daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE) != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE) != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1 != daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
429496731 * zksInstance.self.electionTimeTaken + 91 * zksInstance.self.zkDb.minCommittedLog - 3.9084202521E11 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.0916487488062368E16 == 0
429496731 * zksInstance.self.electionTimeTaken + 91 * zksInstance.self.zkDb.minCommittedLog - 3.9084202521E11 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.0916878330087578E16 == 0
429496731 * zksInstance.self.electionTimeTaken + 91 * zksInstance.self.zkDb.minCommittedLog - 3.9084202521E11 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.0916487488062368E16 == 0
429496731 * zksInstance.self.electionTimeTaken + 91 * zksInstance.self.zkDb.minCommittedLog - 3.9084202521E11 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.0916878330087578E16 == 0
95630154 * zksInstance.self.electionTimeTaken + 1526727020 * zksInstance.serverStats.maxLatency - 2093 * zksInstance.txnLogFactory.txnLog.currentSize - 2.430624738846912E15 == 0
46 * zksInstance.self.electionTimeTaken + 455 * zksInstance.serverStats.maxLatency - 41860 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1169178688 == 0
46 * zksInstance.self.electionTimeTaken + 455 * zksInstance.serverStats.maxLatency - 41860 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1169220548 == 0
46 * zksInstance.self.electionTimeTaken + 455 * zksInstance.serverStats.maxLatency - 41860 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1169178688 == 0
46 * zksInstance.self.electionTimeTaken + 455 * zksInstance.serverStats.maxLatency - 41860 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1169220548 == 0
429496731 * zksInstance.self.electionTimeTaken + 91 * zksInstance.zkDb.minCommittedLog - 3.9084202521E11 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.0916487488062368E16 == 0
429496731 * zksInstance.self.electionTimeTaken + 91 * zksInstance.zkDb.minCommittedLog - 3.9084202521E11 * daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.0916878330087578E16 == 0
429496731 * zksInstance.self.electionTimeTaken + 91 * zksInstance.zkDb.minCommittedLog - 3.9084202521E11 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE) - 1.0916487488062368E16 == 0
429496731 * zksInstance.self.electionTimeTaken + 91 * zksInstance.zkDb.minCommittedLog - 3.9084202521E11 * daikon.Quant.size(zksInstance.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1 - 1.0916878330087578E16 == 0
zksInstance.serverCnxnFactory.maxClientCnxns + 101 * zksInstance.serverStats.count - 101 * zksInstance.serverStats.packetsReceived + 102 == 0
zksInstance.serverCnxnFactory.maxClientCnxns + 101 * zksInstance.serverStats.count - 101 * zksInstance.serverStats.packetsSent + 1 == 0
1000 * zksInstance.serverStats.count - 1000 * zksInstance.serverStats.packetsReceived + zksInstance.tickTime - 1000 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 1 == 0
3 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.packetsReceived - daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE) + 6 == 0
3 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.packetsReceived - daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1 + 5 == 0
1000 * zksInstance.serverStats.count - 1000 * zksInstance.serverStats.packetsSent + zksInstance.tickTime - 2000 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 1 == 0
zksInstance.serverStats.count - zksInstance.serverStats.packetsSent - daikon.Quant.size(zksInstance.self.cnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 == 0
3 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.packetsSent - daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE) + 3 == 0
3 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.packetsSent - daikon.Quant.size(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE)-1 + 2 == 0
zksInstance.sessionTracker.currentTime == 25765019
zksInstance.sessionTracker.nextExpirationTime == 25767000
zksInstance.sessionTracker.nextSessionId == 72059282574213121L || zksInstance.sessionTracker.nextSessionId == 72059282574213122L
11 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 17 * zksInstance.sessionTracker.nextSessionId - 1.22500780376162304E18 == 0
5 * zksInstance.serverStats.count - 4 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.205928257421312E16 == 0
2 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency + 31 * zksInstance.sessionTracker.nextSessionId - 2.23383775980060672E18 == 0
5 * zksInstance.serverStats.packetsReceived - 4 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.205928257421312E16 == 0
2 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency + 31 * zksInstance.sessionTracker.nextSessionId - 2.23383775980060672E18 == 0
2 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 31 * zksInstance.sessionTracker.nextSessionId - 2.23383775980060672E18 == 0
zksInstance.sessionTracker.currentTime == 25765644
zksInstance.sessionTracker.nextSessionId == 72059282615173121L || zksInstance.sessionTracker.nextSessionId == 72059282615173122L
11 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 13 * zksInstance.sessionTracker.nextSessionId - 9.3677067399725056E17 == 0
9 * zksInstance.serverStats.count - 8 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059282615173136E16 == 0
2 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency + 27 * zksInstance.sessionTracker.nextSessionId - 1.94560063060967424E18 == 0
9 * zksInstance.serverStats.packetsReceived - 8 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059282615173104E16 == 0
2 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency + 27 * zksInstance.sessionTracker.nextSessionId - 1.94560063060967424E18 == 0
2 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 27 * zksInstance.sessionTracker.nextSessionId - 1.94560063060967424E18 == 0
zksInstance.sessionTracker.currentTime == 25765516
zksInstance.sessionTracker.nextSessionId == 72059282606784513L || zksInstance.sessionTracker.nextSessionId == 72059282606784514L
9 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 17 * zksInstance.sessionTracker.nextSessionId - 1.2250078043153367E18 == 0
7 * zksInstance.serverStats.count - 6 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059282606784512E16 == 0
2 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency + 27 * zksInstance.sessionTracker.nextSessionId - 1.94560063038318182E18 == 0
7 * zksInstance.serverStats.packetsReceived - 6 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059282606784512E16 == 0
2 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency + 27 * zksInstance.sessionTracker.nextSessionId - 1.94560063038318182E18 == 0
2 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 27 * zksInstance.sessionTracker.nextSessionId - 1.94560063038318182E18 == 0
zksInstance.sessionTracker.currentTime == 25765348
zksInstance.sessionTracker.nextSessionId == 72059282595708929L || zksInstance.sessionTracker.nextSessionId == 72059282595708930L
11 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 22 * zksInstance.sessionTracker.nextSessionId - 1.58530421710559642E18 == 0
8 * zksInstance.serverStats.count - 7 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059282595708928E16 == 0
3 * zksInstance.serverStats.count - 2 * zksInstance.serverStats.totalLatency + 76 * zksInstance.sessionTracker.nextSessionId - 5.4765054772738785E18 == 0
8 * zksInstance.serverStats.packetsReceived - 7 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059282595708928E16 == 0
3 * zksInstance.serverStats.packetsReceived - 2 * zksInstance.serverStats.totalLatency + 76 * zksInstance.sessionTracker.nextSessionId - 5.4765054772738785E18 == 0
3 * zksInstance.serverStats.packetsSent - 2 * zksInstance.serverStats.totalLatency + 76 * zksInstance.sessionTracker.nextSessionId - 5.4765054772738785E18 == 0
zksInstance.sessionTracker.currentTime == 25764730
zksInstance.sessionTracker.nextSessionId == 72059282555207681L || zksInstance.sessionTracker.nextSessionId == 72059282555207682L
zksInstance.serverStats.totalLatency - 74 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
20 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 38 * zksInstance.sessionTracker.nextSessionId - 2.7382527370978918E18 == 0
9 * zksInstance.serverStats.count - 8 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059282555207696E16 == 0
9 * zksInstance.serverStats.packetsReceived - 8 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059282555207664E16 == 0
zksInstance.sessionTracker.currentTime == 25765188
zksInstance.sessionTracker.nextSessionId == 72059282585288705L || zksInstance.sessionTracker.nextSessionId == 72059282585288706L
12 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 20 * zksInstance.sessionTracker.nextSessionId - 1.44118565170577408E18 == 0
13 * zksInstance.serverStats.count - 12 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.205928258528872E16 == 0
2 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency + 36 * zksInstance.sessionTracker.nextSessionId - 2.5941341730703933E18 == 0
13 * zksInstance.serverStats.packetsReceived - 12 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059282585288688E16 == 0
2 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency + 36 * zksInstance.sessionTracker.nextSessionId - 2.5941341730703933E18 == 0
2 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 36 * zksInstance.sessionTracker.nextSessionId - 2.5941341730703933E18 == 0
zksInstance.serverCnxnFactory.maxClientCnxns == 0
zksInstance.sessionTracker.currentTime == 25735386 || zksInstance.sessionTracker.currentTime == 25737000
zksInstance.sessionTracker.nextExpirationTime == 25737000 || zksInstance.sessionTracker.nextExpirationTime == 25740000
zksInstance.sessionTracker.nextSessionId == 72059280632184833L || zksInstance.sessionTracker.nextSessionId == 72059280632184834L || zksInstance.sessionTracker.nextSessionId == 72059280649093120L
daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns) != null
zksInstance.hzxid % daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) == 0
zksInstance.maxSessionTimeout < daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1
zksInstance.txnLogFactory.txnLog.lastZxidSeen >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 >= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
40 * zksInstance.hzxid - zksInstance.requestsInProcess - 80 * zksInstance.sessionTracker.nextSessionId + 5.7647424505747866E18 == 0
3 * zksInstance.hzxid - 2 * zksInstance.serverStats.maxLatency + 99 * zksInstance.sessionTracker.nextSessionId - 7.1338687825862984E18 == 0
44 * zksInstance.hzxid - zksInstance.serverStats.packetsReceived - 86 * zksInstance.sessionTracker.nextSessionId + 6.1970981343678956E18 == 0
16 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 35 * zksInstance.sessionTracker.nextSessionId - 2.5220748221264691E18 == 0
807 * zksInstance.hzxid - 2 * zksInstance.sessionTracker.currentTime - 807 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 51470772 == 0
750 * zksInstance.hzxid - zksInstance.sessionTracker.nextExpirationTime - 750 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 25737000 == 0
50724861 * zksInstance.hzxid - 12 * zksInstance.sessionTracker.nextSessionId - 50724857 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 8.6471136758621798E17 == 0
16908286 * zksInstance.hzxid - zksInstance.sessionTracker.nextSessionId - 50724857 * zksInstance.zkDb.minCommittedLog + 7.2059280632184832E16 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId + 50724857 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.16177841845829632E17 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId + 50724857 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2.16177841896554496E17 == 0
16908287 * zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId - 50724857 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE) + 2.8823712257946419E17 == 0
16908287 * zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId - 50724857 * daikon.Quant.size(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE)-1 + 2.8823712252873933E17 == 0
16908287 * zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId - 50724857 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.8823712252873933E17 == 0
16908287 * zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId - 50724857 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 2.8823712247801446E17 == 0
zksInstance.hzxid - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 4 == 0
zksInstance.hzxid - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 4 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 == 0
zksInstance.requestsInProcess - 20 * zksInstance.serverStats.count + 40 * zksInstance.sessionTracker.nextSessionId - 2.8823712252873933E18 == 0
zksInstance.requestsInProcess - 40 * zksInstance.serverStats.packetsSent + 80 * zksInstance.sessionTracker.nextSessionId - 5.7647424505747866E18 == 0
zksInstance.requestsInProcess + 80 * zksInstance.sessionTracker.nextSessionId - 40 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 5.7647424505747866E18 == 0
zksInstance.requestsInProcess - 40 * zksInstance.sessionTracker.nextSessionId + 676331478 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.8823712246110618E18 == 0
zksInstance.requestsInProcess - 40 * zksInstance.sessionTracker.nextSessionId + 676331478 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2.8823712252873933E18 == 0
22 * zksInstance.serverStats.count - zksInstance.serverStats.packetsReceived - 42 * zksInstance.sessionTracker.nextSessionId + 3.0264897865517629E18 == 0
32 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.totalLatency + 121 * zksInstance.sessionTracker.nextSessionId - 8.7191729564943647E18 == 0
zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 7.2059280632184832E16 == 0
zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 7.2059280632184832E16 == 0
2 * zksInstance.serverStats.maxLatency - 99 * zksInstance.sessionTracker.nextSessionId - 3 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.1338687825862984E18 == 0
zksInstance.serverStats.maxLatency - 56 * zksInstance.sessionTracker.nextSessionId + 946864072 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 4.0353197144554865E18 == 0
zksInstance.serverStats.maxLatency - 56 * zksInstance.sessionTracker.nextSessionId + 946864072 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 4.0353197154023506E18 == 0
zksInstance.serverStats.maxLatency - 51 * zksInstance.sessionTracker.nextSessionId - 5 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 3.6750233122414264E18 == 0
zksInstance.serverStats.maxLatency - 51 * zksInstance.sessionTracker.nextSessionId - 5 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 3.6750233122414264E18 == 0
zksInstance.serverStats.packetsReceived - 44 * zksInstance.serverStats.packetsSent + 86 * zksInstance.sessionTracker.nextSessionId - 6.1970981343678956E18 == 0
zksInstance.serverStats.packetsReceived + 86 * zksInstance.sessionTracker.nextSessionId - 44 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 6.1970981343678956E18 == 0
zksInstance.serverStats.packetsReceived - 18 * zksInstance.sessionTracker.nextSessionId + 304349163 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 1.29706705107497779E18 == 0
zksInstance.serverStats.packetsReceived - 18 * zksInstance.sessionTracker.nextSessionId + 304349163 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 1.29706705137932698E18 == 0
zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId - 45 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 7.2059280632184832E16 == 0
zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId - 45 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 7.2059280632184784E16 == 0
16 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 35 * zksInstance.sessionTracker.nextSessionId - 2.5220748221264691E18 == 0
zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId - 4 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 7.2059280632184832E16 == 0
zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId - 4 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 7.2059280632184832E16 == 0
zksInstance.serverStats.totalLatency - 35 * zksInstance.sessionTracker.nextSessionId - 16 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2.5220748221264691E18 == 0
zksInstance.serverStats.totalLatency - 60 * zksInstance.sessionTracker.nextSessionId - 23 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 4.3235568379310899E18 == 0
zksInstance.serverStats.totalLatency - 60 * zksInstance.sessionTracker.nextSessionId - 23 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 4.3235568379310899E18 == 0
3 * zksInstance.sessionTracker.nextSessionId + 16908286 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 50724861 * zksInstance.zkDb.minCommittedLog - 2.16177841896554496E17 == 0
3 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 50724861 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 2.16177841845829632E17 == 0
3 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 50724861 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 2.16177841896554496E17 == 0
zksInstance.sessionTracker.currentTime == 26235749 || zksInstance.sessionTracker.currentTime == 26238000
zksInstance.sessionTracker.nextExpirationTime == 26238000 || zksInstance.sessionTracker.nextExpirationTime == 26241000
zksInstance.sessionTracker.nextSessionId == 72059313423974401L || zksInstance.sessionTracker.nextSessionId == 72059313423974402L || zksInstance.sessionTracker.nextSessionId == 72059313430790144L
39 * zksInstance.hzxid - zksInstance.requestsInProcess - 78 * zksInstance.sessionTracker.nextSessionId + 5.6206264470700032E18 == 0
zksInstance.hzxid - 2 * zksInstance.serverStats.maxLatency + 51 * zksInstance.sessionTracker.nextSessionId - 3.6750249846226944E18 == 0
41 * zksInstance.hzxid - zksInstance.serverStats.packetsReceived - 80 * zksInstance.sessionTracker.nextSessionId + 5.764745073917952E18 == 0
7 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 19 * zksInstance.sessionTracker.nextSessionId - 1.3691269550555136E18 == 0
2251 * zksInstance.hzxid - 4 * zksInstance.sessionTracker.currentTime - 2251 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 104942996 == 0
750 * zksInstance.hzxid - zksInstance.sessionTracker.nextExpirationTime - 750 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 26238000 == 0
20447229 * zksInstance.hzxid - 12 * zksInstance.sessionTracker.nextSessionId - 20447225 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 8.647117610876928E17 == 0
6815742 * zksInstance.hzxid - zksInstance.sessionTracker.nextSessionId - 20447225 * zksInstance.zkDb.minCommittedLog + 7.20593134239744E16 == 0
6815743 * zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId - 20447225 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE) + 2.8823725371634483E17 == 0
6815743 * zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId - 20447225 * daikon.Quant.size(zksInstance.serverCnxnFactory.sessionMap_FOR_ENCLOSING_USE)-1 + 2.882372536958976E17 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId + 20447225 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.16177940251475968E17 == 0
zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId + 20447225 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2.161779402719232E17 == 0
6815743 * zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId - 20447225 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.882372536958976E17 == 0
6815743 * zksInstance.hzxid - 4 * zksInstance.sessionTracker.nextSessionId - 20447225 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 2.8823725367545037E17 == 0
2 * zksInstance.requestsInProcess - 39 * zksInstance.serverStats.count + 78 * zksInstance.sessionTracker.nextSessionId - 5.6206264470700032E18 == 0
41 * zksInstance.requestsInProcess - 39 * zksInstance.serverStats.packetsReceived + 78 * zksInstance.sessionTracker.nextSessionId - 5.6206264470700032E18 == 0
2 * zksInstance.requestsInProcess - 39 * zksInstance.serverStats.packetsSent + 78 * zksInstance.sessionTracker.nextSessionId - 5.6206264470700032E18 == 0
zksInstance.requestsInProcess + 78 * zksInstance.sessionTracker.nextSessionId - 39 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 5.6206264470700032E18 == 0
zksInstance.requestsInProcess - 39 * zksInstance.sessionTracker.nextSessionId + 265813975 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.8103132232691876E18 == 0
zksInstance.requestsInProcess - 39 * zksInstance.sessionTracker.nextSessionId + 265813975 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2.8103132235350016E18 == 0
41 * zksInstance.serverStats.count - 2 * zksInstance.serverStats.packetsReceived - 78 * zksInstance.sessionTracker.nextSessionId + 5.6206264470700032E18 == 0
2251 * zksInstance.serverStats.count - 2251 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.currentTime - 26233498 == 0
20447228 * zksInstance.serverStats.count - 20447229 * zksInstance.serverStats.packetsSent + 3 * zksInstance.sessionTracker.nextSessionId - 2.16177940251475968E17 == 0
zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 7.20593134239744E16 == 0
zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 7.20593134239744E16 == 0
230538416 * zksInstance.serverStats.maxLatency - 204832 * zksInstance.sessionTracker.currentTime - 60777 * zksInstance.txnLogFactory.txnLog.currentSize + 5.373920939168E12 == 0
2251 * zksInstance.serverStats.maxLatency + 27 * zksInstance.sessionTracker.currentTime - 60777 * zksInstance.zkDb.minCommittedLog - 708365223 == 0
1000 * zksInstance.serverStats.maxLatency + 9 * zksInstance.sessionTracker.nextExpirationTime - 27000 * zksInstance.zkDb.minCommittedLog - 236142000 == 0
2 * zksInstance.serverStats.maxLatency - 51 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen + 3.6750249846226944E18 == 0
2271914 * zksInstance.serverStats.maxLatency + 9 * zksInstance.sessionTracker.nextSessionId - 61341687 * zksInstance.zkDb.minCommittedLog - 6.485338208157696E17 == 0
zksInstance.serverStats.maxLatency - 27 * zksInstance.sessionTracker.nextSessionId + 184025061 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 1.94560146226328371E18 == 0
zksInstance.serverStats.maxLatency - 27 * zksInstance.sessionTracker.nextSessionId + 184025061 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 1.9456014624473088E18 == 0
2 * zksInstance.serverStats.packetsReceived - 41 * zksInstance.serverStats.packetsSent + 78 * zksInstance.sessionTracker.nextSessionId - 5.6206264470700032E18 == 0
zksInstance.serverStats.packetsReceived + 80 * zksInstance.sessionTracker.nextSessionId - 41 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 5.764745073917952E18 == 0
zksInstance.serverStats.packetsReceived - 31 * zksInstance.sessionTracker.nextSessionId + 211288030 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 2.23383871593191834E18 == 0
zksInstance.serverStats.packetsReceived - 31 * zksInstance.sessionTracker.nextSessionId + 211288030 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 2.2338387161432064E18 == 0
zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId - 42 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 7.20593134239744E16 == 0
zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId - 42 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 7.2059313423974352E16 == 0
zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 7.20593134239744E16 == 0
zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 7.20593134239744E16 == 0
zksInstance.serverStats.totalLatency - 19 * zksInstance.sessionTracker.nextSessionId - 7 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 1.3691269550555136E18 == 0
zksInstance.serverStats.totalLatency - 34 * zksInstance.sessionTracker.nextSessionId - 6 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.4500166564151296E18 == 0
zksInstance.serverStats.totalLatency - 34 * zksInstance.sessionTracker.nextSessionId - 6 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 2.4500166564151296E18 == 0
zksInstance.sessionTracker.nextSessionId + 2271914 * zksInstance.txnLogFactory.txnLog.lastZxidSeen - 6815743 * zksInstance.zkDb.minCommittedLog - 7.20593134239744E16 == 0
3 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 20447229 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 2.16177940251475968E17 == 0
3 * zksInstance.sessionTracker.nextSessionId - zksInstance.txnLogFactory.txnLog.lastZxidSeen - 20447229 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 2.161779402719232E17 == 0
zksInstance.sessionTracker.nextExpirationTime == 25752000 || zksInstance.sessionTracker.nextExpirationTime == 25755000 || zksInstance.sessionTracker.nextExpirationTime == 25758000
1000 * zksInstance.hzxid - zksInstance.sessionTracker.nextExpirationTime + 2000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) + 25750000 == 0
1000 * zksInstance.hzxid - zksInstance.sessionTracker.nextExpirationTime + 2000 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 + 25752000 == 0
9830399 * zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - 9830399 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2.16177845157888E17 == 0
9830399 * zksInstance.serverStats.count - 9830399 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.20592816996352E16 == 0
9830399 * zksInstance.serverStats.count - 9830399 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.20592817094656E16 == 0
16683593 * zksInstance.serverStats.maxLatency + 3 * zksInstance.sessionTracker.nextSessionId - 350355453 * zksInstance.zkDb.minCommittedLog - 2.16177845157888E17 == 0
120 * zksInstance.sessionTracker.currentTime - zksInstance.sessionTracker.nextExpirationTime - 210840 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 3.064485E9 == 0
120 * zksInstance.sessionTracker.currentTime - zksInstance.sessionTracker.nextExpirationTime - 210840 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 - 3.06469584E9 == 0
zksInstance.sessionTracker.currentTime + 1757 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1782 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 25753732 == 0
zksInstance.sessionTracker.currentTime + 1757 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 1782 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 - 25755514 == 0
zksInstance.sessionTracker.currentTime + 1757 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1782 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 25751975 == 0
zksInstance.sessionTracker.currentTime + 1757 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 - 1782 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 - 25753757 == 0
zksInstance.sessionTracker.nextSessionId - 202833919 * zksInstance.zkDb.minCommittedLog + 202833919 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 7.205928192212992E16 == 0
zksInstance.sessionTracker.nextSessionId + 116785151 * daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE) - 116785151 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 7.2059281836081152E16 == 0
zksInstance.sessionTracker.nextExpirationTime == 26253000 || zksInstance.sessionTracker.nextExpirationTime == 26256000 || zksInstance.sessionTracker.nextExpirationTime == 26259000
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 <= daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)
3691861 * zksInstance.hzxid - zksInstance.sessionTracker.nextSessionId - 3691861 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 7.205931450138624E16 == 0
11075583 * zksInstance.serverStats.count - 11075583 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059314479235072E16 == 0
11075583 * zksInstance.serverStats.count - 11075583 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059314490310656E16 == 0
5055981 * zksInstance.serverStats.maxLatency + zksInstance.sessionTracker.nextSessionId - 136511487 * zksInstance.zkDb.minCommittedLog - 7.205931450138624E16 == 0
3691861 * zksInstance.serverStats.maxLatency + 9 * zksInstance.sessionTracker.nextSessionId - 99680247 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 6.4853383051247616E17 == 0
zksInstance.sessionTracker.nextExpirationTime == 25743000 || zksInstance.sessionTracker.nextExpirationTime == 25746000
11927551 * zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - 11927551 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2.1617784281530368E17 == 0
11927551 * zksInstance.serverStats.count - 11927551 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.2059280914579456E16 == 0
11927551 * zksInstance.serverStats.count - 11927551 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059280926507008E16 == 0
7278865 * zksInstance.serverStats.maxLatency + 3 * zksInstance.sessionTracker.nextSessionId - 327548925 * zksInstance.zkDb.minCommittedLog - 2.1617784281530368E17 == 0
11927551 * zksInstance.serverStats.maxLatency + 45 * zksInstance.sessionTracker.nextSessionId - 536739795 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 3.2426676422295552E18 == 0
zksInstance.sessionTracker.nextExpirationTime == 26241000 || zksInstance.sessionTracker.nextExpirationTime == 26244000 || zksInstance.sessionTracker.nextExpirationTime == 26247000
10616831 * zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - 10616831 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2.16177941129920512E17 == 0
10616831 * zksInstance.serverStats.count - 10616831 * zksInstance.serverStats.packetsReceived + zksInstance.sessionTracker.nextSessionId - 7.205931368873984E16 == 0
10616831 * zksInstance.serverStats.count - 10616831 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059313699356672E16 == 0
112918527 * zksInstance.serverStats.maxLatency + 31 * zksInstance.sessionTracker.nextSessionId - 3.500474337E9 * zksInstance.zkDb.minCommittedLog - 2.23383872500917862E18 == 0
10616831 * zksInstance.serverStats.maxLatency + 31 * zksInstance.sessionTracker.nextSessionId - 329121761 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 2.23383872500917862E18 == 0
zksInstance.sessionTracker.nextExpirationTime == 25746000 || zksInstance.sessionTracker.nextExpirationTime == 25749000 || zksInstance.sessionTracker.nextExpirationTime == 25752000
13369343 * zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - 13369343 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2.16177843938721792E17 == 0
13369343 * zksInstance.serverStats.count - 13369343 * zksInstance.serverStats.packetsReceived + 2 * zksInstance.sessionTracker.nextSessionId - 1.4411856259907584E17 == 0
13369343 * zksInstance.serverStats.count - 13369343 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.205928129953792E16 == 0
13369343 * zksInstance.serverStats.maxLatency + 72 * zksInstance.sessionTracker.nextSessionId - 962592696 * zksInstance.zkDb.minCommittedLog - 5.188268254529323E18 == 0
13369343 * zksInstance.serverStats.maxLatency + 72 * zksInstance.sessionTracker.nextSessionId - 962592696 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 5.188268254529323E18 == 0
13369343 * zksInstance.serverStats.packetsReceived - 13369343 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.205928129953792E16 == 0
zksInstance.sessionTracker.nextExpirationTime == 26247000 || zksInstance.sessionTracker.nextExpirationTime == 26250000 || zksInstance.sessionTracker.nextExpirationTime == 26253000
11206655 * zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - 11206655 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2.16177942255108096E17 == 0
78446585 * zksInstance.requestsInProcess + 2241331 * zksInstance.serverStats.maxLatency - 7 * zksInstance.sessionTracker.nextSessionId + 5.0441519851680563E17 == 0
11206655 * zksInstance.serverStats.count - 11206655 * zksInstance.serverStats.packetsReceived + 2 * zksInstance.sessionTracker.nextSessionId - 1.44118628147658752E17 == 0
11206655 * zksInstance.serverStats.count - 11206655 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059314073829376E16 == 0
111542271 * zksInstance.serverStats.maxLatency + 34 * zksInstance.sessionTracker.nextSessionId - 3.792437214E9 * zksInstance.zkDb.minCommittedLog - 2.4500166788912251E18 == 0
11206655 * zksInstance.serverStats.packetsReceived - 11206655 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059314073829376E16 == 0
zksInstance.sessionTracker.nextExpirationTime == 25761000 || zksInstance.sessionTracker.nextExpirationTime == 25764000
10354687 * zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - 10354687 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2.16177846347759616E17 == 0
320995297 * zksInstance.requestsInProcess + 10354687 * zksInstance.serverStats.maxLatency - 31 * zksInstance.sessionTracker.nextSessionId + 2.2338377452725207E18 == 0
10354687 * zksInstance.serverStats.count - 10354687 * zksInstance.serverStats.packetsReceived + 2 * zksInstance.sessionTracker.nextSessionId - 1.44118564211130368E17 == 0
10354687 * zksInstance.serverStats.count - 10354687 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059282105565184E16 == 0
10354687 * zksInstance.serverStats.maxLatency + 29 * zksInstance.sessionTracker.nextSessionId - 300285923 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 2.08971918136167629E18 == 0
10354687 * zksInstance.serverStats.packetsReceived - 10354687 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059282105565184E16 == 0
zksInstance.sessionTracker.nextExpirationTime == 26259000 || zksInstance.sessionTracker.nextExpirationTime == 26262000 || zksInstance.sessionTracker.nextExpirationTime == 26265000
10616831 * zksInstance.hzxid - 3 * zksInstance.sessionTracker.nextSessionId - 10616831 * zksInstance.txnLogFactory.txnLog.lastZxidSeen + 2.16177944659820544E17 == 0
445906902 * zksInstance.requestsInProcess + 10616831 * zksInstance.serverStats.maxLatency - 42 * zksInstance.sessionTracker.nextSessionId + 3.0264912247915807E18 == 0
10616831 * zksInstance.serverStats.count - 10616831 * zksInstance.serverStats.packetsReceived + 2 * zksInstance.sessionTracker.nextSessionId - 1.44118629751980032E17 == 0
10616831 * zksInstance.serverStats.count - 10616831 * zksInstance.serverStats.packetsSent + zksInstance.sessionTracker.nextSessionId - 7.2059314875990016E16 == 0
10616831 * zksInstance.serverStats.maxLatency + 24 * zksInstance.sessionTracker.nextSessionId - 254803944 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) - 1.72942355727856435E18 == 0
10616831 * zksInstance.serverStats.packetsReceived - 10616831 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059314875990016E16 == 0
zksInstance.sessionTracker.currentTime == 25739740 || zksInstance.sessionTracker.currentTime == 25740000
zksInstance.sessionTracker.nextExpirationTime == 25740000 || zksInstance.sessionTracker.nextExpirationTime == 25743000
zksInstance.sessionTracker.nextSessionId == 72059280917463041L
daikon.Quant.size(zksInstance.sessionTracker.sessionSets_FOR_ENCLOSING_USE)-1 % zksInstance.serverStats.minLatency == 0
2080 * zksInstance.requestsInProcess - 65 * zksInstance.serverStats.maxLatency + 8 * zksInstance.sessionTracker.currentTime - 205920000 == 0
6657040 * zksInstance.requestsInProcess + 25604 * zksInstance.sessionTracker.currentTime - 65 * zksInstance.txnLogFactory.txnLog.currentSize - 6.5904696E11 == 0
260 * zksInstance.requestsInProcess + zksInstance.sessionTracker.currentTime - 260 * zksInstance.zkDb.minCommittedLog - 25740000 == 0
zksInstance.serverStats.minLatency + 15 * zksInstance.zkDb.dataTree.lastProcessedZxid + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.sessionTracker.currentTime == 26239875
zksInstance.sessionTracker.nextExpirationTime == 26241000
zksInstance.sessionTracker.nextSessionId == 72059313694375937L
zksInstance.serverStats.minLatency + 24 * zksInstance.zkDb.dataTree.lastProcessedZxid + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
zksInstance.sessionTracker.currentTime == 25751868
zksInstance.sessionTracker.nextExpirationTime == 25752000
zksInstance.sessionTracker.nextSessionId == 72059281712283649L || zksInstance.sessionTracker.nextSessionId == 72059281712283650L
zksInstance.serverStats.totalLatency - 53 * zksInstance.sessionTracker.nextSessionId + 2147483647 == 0
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.2059281712283648E16 == 0
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId + 7.2059281712283648E16 == 0
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.2059281712283648E16 == 0
20 * zksInstance.hzxid - 3 * zksInstance.serverStats.totalLatency + 91 * zksInstance.sessionTracker.nextSessionId - 6.557394635817812E18 == 0
zksInstance.hzxid - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 7.2059281712283648E16 == 0
zksInstance.hzxid - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 7.2059281712283648E16 == 0
10 * zksInstance.serverStats.count - 7 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177845136850944E17 == 0
20 * zksInstance.serverStats.count - 3 * zksInstance.serverStats.totalLatency + 91 * zksInstance.sessionTracker.nextSessionId - 6.557394635817812E18 == 0
zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 7.2059281712283648E16 == 0
zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 7.2059281712283648E16 == 0
10 * zksInstance.serverStats.packetsReceived - 7 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.16177845136850944E17 == 0
20 * zksInstance.serverStats.packetsReceived - 3 * zksInstance.serverStats.totalLatency + 91 * zksInstance.sessionTracker.nextSessionId - 6.557394635817812E18 == 0
zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 7.2059281712283648E16 == 0
zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 7.2059281712283648E16 == 0
20 * zksInstance.serverStats.packetsSent - 3 * zksInstance.serverStats.totalLatency + 91 * zksInstance.sessionTracker.nextSessionId - 6.557394635817812E18 == 0
zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 7.2059281712283648E16 == 0
zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 7.2059281712283648E16 == 0
zksInstance.serverStats.totalLatency - 44 * zksInstance.sessionTracker.nextSessionId - 13 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 3.1706083953404805E18 == 0
zksInstance.serverStats.totalLatency - 44 * zksInstance.sessionTracker.nextSessionId - 13 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 3.1706083953404805E18 == 0
zksInstance.sessionTracker.currentTime == 26251994
zksInstance.sessionTracker.nextExpirationTime == 26253000
zksInstance.sessionTracker.nextSessionId == 72059314488606721L || zksInstance.sessionTracker.nextSessionId == 72059314488606722L
daikon.Quant.eltsEqual(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE, daikon.Quant.getElement_Object(zksInstance.sessionTracker.sessionsById_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.maxClientCnxns))
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId + 7.205931448860672E16 == 0
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId + 7.205931448860672E16 == 0
4 * zksInstance.hzxid - 3 * zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId + 7.205931448860672E16 == 0
4 * zksInstance.hzxid - zksInstance.serverStats.totalLatency + 23 * zksInstance.sessionTracker.nextSessionId - 1.65736423323795456E18 == 0
zksInstance.hzxid - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 7.205931448860672E16 == 0
zksInstance.hzxid - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 7.205931448860672E16 == 0
10 * zksInstance.serverStats.count - 7 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.1617794346582016E17 == 0
4 * zksInstance.serverStats.count - zksInstance.serverStats.totalLatency + 23 * zksInstance.sessionTracker.nextSessionId - 1.65736423323795456E18 == 0
zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 7.205931448860672E16 == 0
zksInstance.serverStats.count - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 7.205931448860672E16 == 0
10 * zksInstance.serverStats.packetsReceived - 7 * zksInstance.serverStats.packetsSent - 3 * zksInstance.sessionTracker.nextSessionId + 2.1617794346582016E17 == 0
4 * zksInstance.serverStats.packetsReceived - zksInstance.serverStats.totalLatency + 23 * zksInstance.sessionTracker.nextSessionId - 1.65736423323795456E18 == 0
zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 7.205931448860672E16 == 0
zksInstance.serverStats.packetsReceived - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 7.205931448860672E16 == 0
4 * zksInstance.serverStats.packetsSent - zksInstance.serverStats.totalLatency + 23 * zksInstance.sessionTracker.nextSessionId - 1.65736423323795456E18 == 0
zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 7.205931448860672E16 == 0
zksInstance.serverStats.packetsSent - zksInstance.sessionTracker.nextSessionId - 3 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 7.205931448860672E16 == 0
zksInstance.serverStats.totalLatency - 30 * zksInstance.sessionTracker.nextSessionId - 9 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE) + 2.1617794346582016E18 == 0
zksInstance.serverStats.totalLatency - 30 * zksInstance.sessionTracker.nextSessionId - 9 * daikon.Quant.size(zksInstance.zkDb.dataTree.ephemerals_FOR_ENCLOSING_USE)-1 + 2.1617794346582016E18 == 0
zksInstance.self.qcm.RECV_CAPACITY == zksInstance.syncProcessor.snapCount
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.hzxid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverCnxnFactory.zkServer.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.count)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.maxLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.totalLatency)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.hzxid) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.syncProcessor.zks.requestsInProcess)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.acceptedEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.peerEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.currentVote.electionEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.logicalclock)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.qcm.SEND_CAPACITY)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsReceived)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.electionEpoch) == daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.serverStats.packetsSent)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.bcVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.bcVote.peerEpoch) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedEpoch)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.currentVote.id-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.quorumPeers_FOR_ENCLOSING_USE, zksInstance.self.electionAlg.proposedLeader-1) == daikon.Quant.getElement_Object(zksInstance.self.qcm.view_FOR_ENCLOSING_USE, zksInstance.self.myid)
daikon.Quant.getElement_Object(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half) == daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.quorumConfig.half)
zksInstance.self.bcVote.id == 4 || zksInstance.self.bcVote.id == 5
zksInstance.self.bcVote.zxid == 0 || zksInstance.self.bcVote.zxid == 4294969298L
zksInstance.self.electionTimeTaken == 223 || zksInstance.self.electionTimeTaken == 254
zksInstance.self.myid == 3 || zksInstance.self.myid == 4
zksInstance.self.qcm.threadCnt == 6 || zksInstance.self.qcm.threadCnt == 8
zksInstance.sessionTracker.nextSessionId == 216174510836416512L || zksInstance.sessionTracker.nextSessionId == 288232104575959040L
zksInstance.syncProcessor.randRoll >= 0
zksInstance.syncProcessor.requestOfDeath.createTime == 26373702
zksInstance.txnLogFactory.txnLog.currentSize == 0 || zksInstance.txnLogFactory.txnLog.currentSize == 16 || zksInstance.txnLogFactory.txnLog.currentSize == 102416
daikon.Quant.getElement_Object(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE, zksInstance.self.electionType) != null
zksInstance.hzxid < zksInstance.self.qcm.threadCnt
zksInstance.hzxid <= zksInstance.syncProcessor.randRoll
zksInstance.hzxid < daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.self.acceptedEpoch <= daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.electionEpoch < zksInstance.self.bcVote.id
zksInstance.self.bcVote.electionEpoch < zksInstance.self.qcm.threadCnt
zksInstance.self.bcVote.electionEpoch < daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.id > zksInstance.self.quorumConfig.half
zksInstance.self.bcVote.id >= daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.id <= daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.self.bcVote.peerEpoch < daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.self.bcVote.zxid != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.self.electionAlg.finalizeWait > zksInstance.syncProcessor.randRoll
zksInstance.self.electionType >= daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.self.myid <= daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.self.qcm.RECV_CAPACITY >= zksInstance.syncProcessor.randRoll
zksInstance.self.qcm.cnxTO > zksInstance.syncProcessor.randRoll
zksInstance.self.qcm.maxBuffer > zksInstance.syncProcessor.randRoll
zksInstance.self.qcm.threadCnt > zksInstance.self.quorumConfig.half
zksInstance.self.qcm.threadCnt != zksInstance.syncProcessor.randRoll
zksInstance.self.qcm.threadCnt != zksInstance.zkDb.dataTree.scount
zksInstance.self.qcm.threadCnt > daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.self.quorumConfig.half != zksInstance.zkDb.dataTree.scount
zksInstance.self.quorumConfig.half <= daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.self.tickTime > zksInstance.syncProcessor.randRoll
zksInstance.self.zkDb.commitLogBuffer > zksInstance.syncProcessor.randRoll
zksInstance.self.zkDb.commitLogCount > zksInstance.syncProcessor.randRoll
zksInstance.self.zkDb.maxCommittedLog >= zksInstance.zkDb.dataTree.scount
zksInstance.self.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.self.zkDb.minCommittedLog >= zksInstance.zkDb.dataTree.scount
zksInstance.self.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.randRoll < zksInstance.txnLogFactory.txnLog.fsyncWarningThresholdMS
zksInstance.syncProcessor.randRoll >= daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)-1
zksInstance.syncProcessor.randRoll >= daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.txnLogFactory.txnLog.lastZxidSeen >= zksInstance.zkDb.dataTree.scount
zksInstance.zkDb.dataTree.scount <= zksInstance.zkDb.maxCommittedLog
zksInstance.zkDb.dataTree.scount <= zksInstance.zkDb.minCommittedLog
zksInstance.zkDb.dataTree.scount != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.dataTree.scount != daikon.Quant.size(zksInstance.self.qcm.queueSendMap_FOR_ENCLOSING_USE)
zksInstance.zkDb.dataTree.scount != daikon.Quant.size(zksInstance.self.qcm.view_FOR_ENCLOSING_USE)
zksInstance.zkDb.maxCommittedLog != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
zksInstance.zkDb.minCommittedLog != daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1 > daikon.Quant.size(zksInstance.self.zkDb.sessionsWithTimeouts_FOR_ENCLOSING_USE)
daikon.Quant.size(zksInstance.self.qcm.lastMessageSent_FOR_ENCLOSING_USE)-1 > daikon.Quant.size(zksInstance.sessionTracker.touchTable_FOR_ENCLOSING_USE)
zksInstance.serverStats.maxLatency == 0 || zksInstance.serverStats.maxLatency == 94
zksInstance.sessionTracker.currentTime == 25539829
zksInstance.sessionTracker.nextExpirationTime == 25542000
zksInstance.sessionTracker.nextSessionId == 72059267816095745L
64 * zksInstance.hzxid + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
64 * zksInstance.serverStats.count + zksInstance.serverStats.minLatency + 9.223372036854776E18 * zksInstance.zkDb.minCommittedLog - 9.223372036854776E18 == 0
