package daikon.cassandra;
import daikon.*;
import java.util.Set;
import java.util.ArrayList;
import java.util.List;
//this class is automatically generated by our scripts
public class InvariantPool1999{

	public static List<Invariant> invariants1999 = new ArrayList<>();

	public static void installInv1999(){
		invariants1999.add(new Invariant(1000, "CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1001, "CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1002, "CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize >= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue() >= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1003, "CommitLog.instance.segmentManager.size != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1004, "StorageService.instance.RING_DELAY != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1005, "cfsInstance.compactionStrategyManager.fanout != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1006, "cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1007, "cfsInstance.indexManager.DEFAULT_PAGE_SIZE != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1008, "cfsInstance.metadata.resource.hash != resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1009, "cfsInstance.metadata.resource.hash != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1010, "cfsInstance.metadata.resource.hash != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1011, "CommitLog.instance.executor.lastSyncedAt - 32406705 * resultSetInstance.metadata.columnCount + 242687123 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 8.9332302442052E13 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 32406705 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() + 242687123 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 8.9332302442052E13 == 0);
			}
		});
		invariants1999.add(new Invariant(1012, "CommitLog.instance.executor.lastSyncedAt - 32406705 * resultSetInstance.metadata.columnCount + 242687123 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1 - 8.9332059754929E13 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 32406705 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() + 242687123 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1 - 8.9332059754929E13 == 0);
			}
		});
		invariants1999.add(new Invariant(1013, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition - 218 * CommitLog.instance.segmentManager.allocatingFrom.id - CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset + 3.7743500293576E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() - 218 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() + 3.7743500293576E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1014, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition - 310 * CommitLog.instance.segmentManager.allocatingFrom.id - CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset + 5.36719499587552E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() - 310 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() + 5.36719499587552E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1015, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition - CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset - 218 * CommitLog.instance.segmentManager.availableSegment.id + 3.77435002935978E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() - 218 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + 3.77435002935978E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1016, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition - CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset - 310 * CommitLog.instance.segmentManager.availableSegment.id + 5.3671949958786194E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() - 310 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + 5.3671949958786194E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1017, "92 * CommitLog.instance.segmentManager.allocatingFrom.id - CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset + CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset - 1.59284496651792E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (92 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() - 1.59284496651792E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1018, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset - CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset - 92 * CommitLog.instance.segmentManager.availableSegment.id + 1.59284496651884E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() - 92 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + 1.59284496651884E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1019, "CFMetadataInstance.partitionColumns.statics.complexIdx == 0 || CFMetadataInstance.partitionColumns.statics.complexIdx == 1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == 0 || ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == 1);
			}
		});
		invariants1999.add(new Invariant(1020, "CFMetadataInstance.resource.hash == -1493090399 || CFMetadataInstance.resource.hash == -1493090398"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == -1493090399 || ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == -1493090398);
			}
		});
		invariants1999.add(new Invariant(1021, "CommitLog.instance.segmentManager.allocatingFrom.fd == 177 || CommitLog.instance.segmentManager.allocatingFrom.fd == 187 || CommitLog.instance.segmentManager.allocatingFrom.fd == 252"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 177 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 187 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 252);
			}
		});
		invariants1999.add(new Invariant(1022, "CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224505L || CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224506L || CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224507L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224505L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224506L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224507L);
			}
		});
		invariants1999.add(new Invariant(1023, "CommitLog.instance.segmentManager.allocatingFrom.nextId == 35 || CommitLog.instance.segmentManager.allocatingFrom.nextId == 36 || CommitLog.instance.segmentManager.allocatingFrom.nextId == 37"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 35 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 36 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 37);
			}
		});
		invariants1999.add(new Invariant(1024, "CommitLog.instance.segmentManager.availableSegment.fd == 177 || CommitLog.instance.segmentManager.availableSegment.fd == 214 || CommitLog.instance.segmentManager.availableSegment.fd == 252"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 177 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 214 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 252);
			}
		});
		invariants1999.add(new Invariant(1025, "CommitLog.instance.segmentManager.availableSegment.id == 1731353224506L || CommitLog.instance.segmentManager.availableSegment.id == 1731353224507L || CommitLog.instance.segmentManager.availableSegment.id == 1731353224508L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224506L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224507L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224508L);
			}
		});
		invariants1999.add(new Invariant(1026, "cfsInstance.fileIndexGenerator == 0 || cfsInstance.fileIndexGenerator == 1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() == 0 || ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() == 1);
			}
		});
		invariants1999.add(new Invariant(1027, "cfsInstance.metadata.resource.hash == -1493090399 || cfsInstance.metadata.resource.hash == -1493090398"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == -1493090399 || ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == -1493090398);
			}
		});
		invariants1999.add(new Invariant(1028, "cfsInstance.readOrdering.current.id == 0 || cfsInstance.readOrdering.current.id == 1 || cfsInstance.readOrdering.current.id == 2"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() == 0 || ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() == 1 || ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() == 2);
			}
		});
		invariants1999.add(new Invariant(1029, "daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) == 1 || daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) == 3"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) == 0 || daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) == 1 || daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) == 3);
			}
		});
		invariants1999.add(new Invariant(1030, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK > CFMetadataInstance.partitionColumns.statics.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1031, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1032, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK >= cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() >= ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1033, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK >= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() >= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1034, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK > CFMetadataInstance.partitionColumns.statics.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1035, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK >= CFMetadataInstance.partitionColumns.statics.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() >= ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1036, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK >= cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() >= ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1037, "CFMetadataInstance.partitionColumns.regulars.complexIdx != CFMetadataInstance.partitionColumns.statics.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() != ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1038, "CFMetadataInstance.partitionColumns.statics.complexIdx < CFMetadataInstance.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1039, "CFMetadataInstance.partitionColumns.statics.complexIdx < CFMetadataInstance.partitioner.MAXIMUM"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1040, "CFMetadataInstance.partitionColumns.statics.complexIdx > CFMetadataInstance.partitioner.MINIMUM.token"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1041, "CFMetadataInstance.partitionColumns.statics.complexIdx > CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1042, "CFMetadataInstance.partitionColumns.statics.complexIdx < CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1043, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.MAX_MUTATION_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1044, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.archiver.restorePointInTime"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1045, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1046, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.executor.markerIntervalNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1047, "CFMetadataInstance.partitionColumns.statics.complexIdx >= CommitLog.instance.executor.syncComplete.NOT_SET"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() >= ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1048, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1049, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1050, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1051, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.idBase"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1052, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1053, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.segmentManager.availableSegment.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1054, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1055, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1056, "CFMetadataInstance.partitionColumns.statics.complexIdx < StorageService.instance.RING_DELAY"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1057, "CFMetadataInstance.partitionColumns.statics.complexIdx < cfsInstance.compactionStrategyManager.fanout"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1058, "CFMetadataInstance.partitionColumns.statics.complexIdx < cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1059, "CFMetadataInstance.partitionColumns.statics.complexIdx < cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1060, "CFMetadataInstance.partitionColumns.statics.complexIdx > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1061, "CFMetadataInstance.partitionColumns.statics.complexIdx < cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1062, "CFMetadataInstance.partitionColumns.statics.complexIdx <= resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() <= ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1063, "CFMetadataInstance.partitioner.HEAP_SIZE < CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1064, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS < CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1065, "CommitLog.instance.executor.syncComplete.NOT_SET <= cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() <= ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1066, "CommitLog.instance.executor.syncComplete.NOT_SET <= cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() <= ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1067, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset > CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1068, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset > CommitLog.instance.segmentManager.availableSegment.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1069, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset > CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1070, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset > CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1071, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset > cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1072, "CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1073, "CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize >= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue() >= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1074, "cfsInstance.fileIndexGenerator <= resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() <= ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1075, "cfsInstance.readOrdering.current.id >= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() >= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1076, "2 * CFMetadataInstance.partitionColumns.regulars.complexIdx + CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.fileIndexGenerator - 1.731353224506E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 1.731353224506E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1077, "CFMetadataInstance.partitionColumns.regulars.complexIdx + CommitLog.instance.segmentManager.allocatingFrom.nextId - cfsInstance.metadata.resource.hash - 1493090435 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 1493090435 == 0);
			}
		});
		invariants1999.add(new Invariant(1078, "2 * CFMetadataInstance.partitionColumns.regulars.complexIdx + CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.fileIndexGenerator - 1.731353224507E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 1.731353224507E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1079, "2 * CFMetadataInstance.partitionColumns.statics.complexIdx - CommitLog.instance.segmentManager.allocatingFrom.id + cfsInstance.fileIndexGenerator + 1.731353224504E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 1.731353224504E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1080, "CFMetadataInstance.partitionColumns.statics.complexIdx - CommitLog.instance.segmentManager.allocatingFrom.nextId + cfsInstance.metadata.resource.hash + 1493090434 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 1493090434 == 0);
			}
		});
		invariants1999.add(new Invariant(1081, "2 * CFMetadataInstance.partitionColumns.statics.complexIdx - CommitLog.instance.segmentManager.availableSegment.id + cfsInstance.fileIndexGenerator + 1.731353224505E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 1.731353224505E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1082, "2 * CFMetadataInstance.resource.hash + CommitLog.instance.executor.pending - 2 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) + 2.986180798E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - 2 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) + 2.986180798E9 == 0);
			}
		});
		invariants1999.add(new Invariant(1083, "75 * CFMetadataInstance.resource.hash + CommitLog.instance.segmentManager.allocatingFrom.fd + 75 * cfsInstance.fileIndexGenerator + 1.11981779598E11 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (75 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() + 75 * ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 1.11981779598E11 == 0);
			}
		});
		invariants1999.add(new Invariant(1084, "2 * CFMetadataInstance.resource.hash - CommitLog.instance.segmentManager.allocatingFrom.id + cfsInstance.fileIndexGenerator + 1.734339405302E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 1.734339405302E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1085, "2 * CFMetadataInstance.resource.hash - CommitLog.instance.segmentManager.allocatingFrom.nextId + cfsInstance.fileIndexGenerator + 2.986180832E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 2.986180832E9 == 0);
			}
		});
		invariants1999.add(new Invariant(1086, "393216000 * CFMetadataInstance.resource.hash + 5242880 * CommitLog.instance.segmentManager.availableSegment.fd - 37 * CommitLog.instance.segmentManager.size + 5.8710703339995136E17 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (393216000 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() + 5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() - 37 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 5.8710703339995136E17 == 0);
			}
		});
		invariants1999.add(new Invariant(1087, "2 * CFMetadataInstance.resource.hash - CommitLog.instance.segmentManager.availableSegment.id + cfsInstance.fileIndexGenerator + 1.734339405303E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 1.734339405303E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1088, "2 * CommitLog.instance.executor.lastSyncedAt - 460328361 * CommitLog.instance.executor.pending - 471826074 * CommitLog.instance.executor.written - 1.78418440401974E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 460328361 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - 471826074 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() - 1.78418440401974E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1089, "2 * CommitLog.instance.executor.lastSyncedAt + 11497713 * CommitLog.instance.executor.pending - 1415478222 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.7897000508248E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() + 11497713 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - 1415478222 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.7897000508248E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1090, "4 * CommitLog.instance.executor.lastSyncedAt - 22995426 * CommitLog.instance.executor.written + 1380985083 * resultSetInstance.metadata.columnCount - 3.57920033437381E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (4 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 22995426 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() + 1380985083 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() - 3.57920033437381E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1091, "2 * CommitLog.instance.executor.lastSyncedAt - 11497713 * CommitLog.instance.executor.written - 1380985083 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.78956564255983E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 11497713 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() - 1380985083 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.78956564255983E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1092, "2 * CommitLog.instance.executor.lastSyncedAt - 11497713 * CommitLog.instance.executor.written - 1380985083 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1 - 1.78957945241066E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 11497713 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() - 1380985083 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1 - 1.78957945241066E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1093, "1460 * CommitLog.instance.executor.lastSyncedAt - 1537961254 * CommitLog.instance.segmentManager.allocatingFrom.allocatePosition + 2.00598513333E11 * resultSetInstance.metadata.columnCount - 1.30646878196920016E17 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (1460 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 1537961254 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() + 2.00598513333E11 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() - 1.30646878196920016E17 == 0);
			}
		});
		invariants1999.add(new Invariant(1094, "319 * CommitLog.instance.executor.lastSyncedAt - 61241516 * CommitLog.instance.segmentManager.allocatingFrom.allocatePosition - 2.00598513333E11 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 2.8545627071698876E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (319 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 61241516 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() - 2.00598513333E11 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 2.8545627071698876E16 == 0);
			}
		});
		invariants1999.add(new Invariant(1095, "319 * CommitLog.instance.executor.lastSyncedAt - 61241516 * CommitLog.instance.segmentManager.allocatingFrom.allocatePosition - 2.00598513333E11 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1 - 2.8545827670212208E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (319 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 61241516 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() - 2.00598513333E11 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1 - 2.8545827670212208E16 == 0);
			}
		});
		invariants1999.add(new Invariant(1096, "1460 * CommitLog.instance.executor.lastSyncedAt - 1537961254 * CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset + 2.00598513333E11 * resultSetInstance.metadata.columnCount - 1.30646890500610048E17 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (1460 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 1537961254 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() + 2.00598513333E11 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() - 1.30646890500610048E17 == 0);
			}
		});
		invariants1999.add(new Invariant(1097, "319 * CommitLog.instance.executor.lastSyncedAt - 61241516 * CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset - 2.00598513333E11 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 2.8545627561631004E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (319 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 61241516 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() - 2.00598513333E11 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 2.8545627561631004E16 == 0);
			}
		});
		invariants1999.add(new Invariant(1098, "319 * CommitLog.instance.executor.lastSyncedAt - 61241516 * CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset - 2.00598513333E11 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1 - 2.8545828160144336E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (319 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 61241516 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() - 2.00598513333E11 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1 - 2.8545828160144336E16 == 0);
			}
		});
		invariants1999.add(new Invariant(1099, "319 * CommitLog.instance.executor.lastSyncedAt - 11497713 * CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset + 1.10521608183E11 * resultSetInstance.metadata.columnCount - 2.854625185049204E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (319 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 11497713 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() + 1.10521608183E11 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() - 2.854625185049204E16 == 0);
			}
		});
		invariants1999.add(new Invariant(1100, "319 * CommitLog.instance.executor.lastSyncedAt - 11497713 * CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset - 2.21043216366E11 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 2.8545699242451128E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (319 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 11497713 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() - 2.21043216366E11 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 2.8545699242451128E16 == 0);
			}
		});
		invariants1999.add(new Invariant(1101, "319 * CommitLog.instance.executor.lastSyncedAt - 11497713 * CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset - 2.21043216366E11 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1 - 2.8545920285667492E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (319 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 11497713 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() - 2.21043216366E11 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1 - 2.8545920285667492E16 == 0);
			}
		});
		invariants1999.add(new Invariant(1102, "CommitLog.instance.executor.pending + 2 * CommitLog.instance.segmentManager.allocatingFrom.id - 2 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 3.46270644901E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - 2 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 3.46270644901E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1103, "CommitLog.instance.executor.pending + 2 * CommitLog.instance.segmentManager.availableSegment.id - 2 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 3.462706449012E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - 2 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 3.462706449012E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1104, "CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.fileIndexGenerator + cfsInstance.readOrdering.current.id - 1.731353224506E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - 1.731353224506E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1105, "CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.readOrdering.current.id - daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224503E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224503E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1106, "5242880 * CommitLog.instance.segmentManager.availableSegment.fd - 37 * CommitLog.instance.segmentManager.size + 393216000 * cfsInstance.metadata.resource.hash + 5.8710703339995136E17 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() - 37 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 393216000 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 5.8710703339995136E17 == 0);
			}
		});
		invariants1999.add(new Invariant(1107, "CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.fileIndexGenerator + cfsInstance.readOrdering.current.id - 1.731353224507E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - 1.731353224507E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1108, "CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.readOrdering.current.id - daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224504E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224504E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1109, "CFMetadataInstance.compactValueColumn.NO_POSITION == CFMetadataInstance.compactValueColumn.position"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() == ((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.position"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1110, "CFMetadataInstance.compactValueColumn.NO_POSITION == CommitLog.instance.executor.syncComplete.CANCELLED"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.CANCELLED"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1111, "CFMetadataInstance.compactValueColumn.NO_POSITION == cfsInstance.metadata.compactValueColumn.NO_POSITION"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1112, "CFMetadataInstance.compactValueColumn.comparisonOrder == cfsInstance.metadata.compactValueColumn.comparisonOrder"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1113, "CFMetadataInstance.compactValueColumn.hash == cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1114, "CFMetadataInstance.compactValueColumn.name.interned == CFMetadataInstance.compactValueColumn.type.isByteOrderComparable"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.interned"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.type.isByteOrderComparable"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1115, "CFMetadataInstance.compactValueColumn.name.interned == CFMetadataInstance.isCompound"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.interned"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCompound"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1116, "CFMetadataInstance.compactValueColumn.name.interned == CFMetadataInstance.isCounter"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.interned"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1117, "CFMetadataInstance.compactValueColumn.name.interned == CFMetadataInstance.isIndex"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.interned"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isIndex"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1118, "CFMetadataInstance.compactValueColumn.name.interned == CFMetadataInstance.partitioner.partitionOrdering.isByteOrderComparable"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.interned"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CFMetadataInstance.partitioner.partitionOrdering.isByteOrderComparable"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1119, "CFMetadataInstance.compactValueColumn.name.interned == cfsInstance.directories.metadata.isCompound"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.interned"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.directories.metadata.isCompound"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1120, "CFMetadataInstance.isCounter == CFMetadataInstance.partitioner.comparator.isByteOrderComparable"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CFMetadataInstance.partitioner.comparator.isByteOrderComparable"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1121, "CFMetadataInstance.isDense == CFMetadataInstance.partitioner.comparator.isByteOrderComparable"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isDense"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CFMetadataInstance.partitioner.comparator.isByteOrderComparable"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1122, "CFMetadataInstance.isIndex == CFMetadataInstance.partitioner.partitionOrdering.isByteOrderComparable"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isIndex"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CFMetadataInstance.partitioner.partitionOrdering.isByteOrderComparable"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1123, "CFMetadataInstance.isIndex == cfsInstance.directories.metadata.isIndex"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isIndex"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.directories.metadata.isIndex"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1124, "CFMetadataInstance.isIndex == cfsInstance.metadata.isIndex"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isIndex"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.metadata.isIndex"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1125, "CFMetadataInstance.isIndex == cfsInstance.metric.aliasFactory.isIndex"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isIndex"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.metric.aliasFactory.isIndex"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1126, "CFMetadataInstance.isIndex == cfsInstance.metric.factory.isIndex"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isIndex"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.metric.factory.isIndex"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1127, "CFMetadataInstance.partitionColumns.regulars.complexIdx == CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1128, "CFMetadataInstance.partitioner.EMPTY_SIZE == cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1129, "CFMetadataInstance.partitioner.EMPTY_SIZE == cfsInstance.metadata.partitioner.EMPTY_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.metadata.partitioner.EMPTY_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1130, "CFMetadataInstance.partitioner.comparator.isByteOrderComparable == CommitLog.instance.executor.syncRequested"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.partitioner.comparator.isByteOrderComparable"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CommitLog.instance.executor.syncRequested"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1131, "CFMetadataInstance.partitioner.comparator.isByteOrderComparable == cfsInstance.compactionStrategyManager.partitionSSTablesByTokenRange"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.partitioner.comparator.isByteOrderComparable"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.partitionSSTablesByTokenRange"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1132, "CFMetadataInstance.partitioner.comparator.isByteOrderComparable == cfsInstance.directories.metadata.isDense"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.partitioner.comparator.isByteOrderComparable"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.directories.metadata.isDense"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1133, "CFMetadataInstance.partitioner.partitionOrdering.isByteOrderComparable == cfsInstance.diskBoundaryManager.diskBoundaries.isInvalid"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.partitioner.partitionOrdering.isByteOrderComparable"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.isInvalid"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1134, "CommitLog.instance.executor.syncComplete.CANCELLED == cfsInstance.metadata.compactValueColumn.NO_POSITION"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.CANCELLED"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1135, "StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE == StorageService.instance.valueFactory.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue() == ((Number)(InvariantChecker.getValue("StorageService.instance.valueFactory.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1136, "StorageService.instance.tokenMetadata.partitioner.MAXIMUM == StorageService.instance.valueFactory.partitioner.MAXIMUM"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue() == ((Number)(InvariantChecker.getValue("StorageService.instance.valueFactory.partitioner.MAXIMUM"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1137, "cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion == cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1138, "cfsInstance.directories.metadata.isCompound == cfsInstance.metadata.isCompound"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("cfsInstance.directories.metadata.isCompound"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.metadata.isCompound"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1139, "cfsInstance.directories.metadata.isCompound == cfsInstance.viewManager.baseTableMetadata.isCompound"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("cfsInstance.directories.metadata.isCompound"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.viewManager.baseTableMetadata.isCompound"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1140, "cfsInstance.directories.metadata.isDense == cfsInstance.metadata.isDense"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("cfsInstance.directories.metadata.isDense"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.metadata.isDense"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1141, "cfsInstance.directories.metadata.isDense == cfsInstance.viewManager.baseTableMetadata.isDense"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("cfsInstance.directories.metadata.isDense"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.viewManager.baseTableMetadata.isDense"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1142, "cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion == cfsInstance.diskBoundaryManager.diskBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1143, "cfsInstance.metadata.compactValueColumn.NO_POSITION == cfsInstance.metadata.compactValueColumn.position"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.position"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1144, "CFMetadataInstance.compactValueColumn.NO_POSITION == -1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() == -1);
			}
		});
		invariants1999.add(new Invariant(1145, "CFMetadataInstance.compactValueColumn.comparisonOrder == 4611956916719281408L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() == 4611956916719281408L);
			}
		});
		invariants1999.add(new Invariant(1146, "CFMetadataInstance.compactValueColumn.hash == 1376485651"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() == 1376485651);
			}
		});
		invariants1999.add(new Invariant(1147, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE == 48"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() == 48);
			}
		});
		invariants1999.add(new Invariant(1148, "CFMetadataInstance.compactValueColumn.name.interned == false"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.interned"))).booleanValue() == false);
			}
		});
		invariants1999.add(new Invariant(1149, "CFMetadataInstance.compactValueColumn.name.prefixComparison == -693153616176873472L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() == -693153616176873472L);
			}
		});
		invariants1999.add(new Invariant(1150, "CFMetadataInstance.partitioner.EMPTY_SIZE == 32"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() == 32);
			}
		});
		invariants1999.add(new Invariant(1151, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID == 1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() == 1);
			}
		});
		invariants1999.add(new Invariant(1152, "CFMetadataInstance.partitioner.comparator.isByteOrderComparable == false"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.partitioner.comparator.isByteOrderComparable"))).booleanValue() == false);
			}
		});
		invariants1999.add(new Invariant(1153, "CFMetadataInstance.partitioner.partitionOrdering.isByteOrderComparable == false"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.partitioner.partitionOrdering.isByteOrderComparable"))).booleanValue() == false);
			}
		});
		invariants1999.add(new Invariant(1154, "CFMetadataInstance.resource.hash == -1493090397 || CFMetadataInstance.resource.hash == -1493090396 || CFMetadataInstance.resource.hash == 1377534570"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == -1493090397 || ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == -1493090396 || ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == 1377534570);
			}
		});
		invariants1999.add(new Invariant(1155, "CommitLog.instance.segmentManager.allocatingFrom.fd == 177 || CommitLog.instance.segmentManager.allocatingFrom.fd == 178 || CommitLog.instance.segmentManager.allocatingFrom.fd == 182"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 177 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 178 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 182);
			}
		});
		invariants1999.add(new Invariant(1156, "CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224509L || CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224510L || CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224511L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224509L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224510L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224511L);
			}
		});
		invariants1999.add(new Invariant(1157, "CommitLog.instance.segmentManager.allocatingFrom.nextId == 39 || CommitLog.instance.segmentManager.allocatingFrom.nextId == 40 || CommitLog.instance.segmentManager.allocatingFrom.nextId == 41"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 39 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 40 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 41);
			}
		});
		invariants1999.add(new Invariant(1158, "CommitLog.instance.segmentManager.availableSegment.fd == 177 || CommitLog.instance.segmentManager.availableSegment.fd == 178 || CommitLog.instance.segmentManager.availableSegment.fd == 182"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 177 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 178 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 182);
			}
		});
		invariants1999.add(new Invariant(1159, "CommitLog.instance.segmentManager.availableSegment.id == 1731353224510L || CommitLog.instance.segmentManager.availableSegment.id == 1731353224511L || CommitLog.instance.segmentManager.availableSegment.id == 1731353224512L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224510L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224511L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224512L);
			}
		});
		invariants1999.add(new Invariant(1160, "StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE == 24"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue() == 24);
			}
		});
		invariants1999.add(new Invariant(1161, "StorageService.instance.tokenMetadata.partitioner.MAXIMUM == 9223372036854775807L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue() == 9223372036854775807L);
			}
		});
		invariants1999.add(new Invariant(1162, "cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion == -1 || cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue() == -1 || ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue() == 0);
			}
		});
		invariants1999.add(new Invariant(1163, "cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue() == 0);
			}
		});
		invariants1999.add(new Invariant(1164, "cfsInstance.metadata.compactValueColumn.NO_POSITION == -1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue() == -1);
			}
		});
		invariants1999.add(new Invariant(1165, "cfsInstance.metadata.compactValueColumn.comparisonOrder == 4611956916719281408L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue() == 4611956916719281408L);
			}
		});
		invariants1999.add(new Invariant(1166, "cfsInstance.metadata.compactValueColumn.hash == 1376485651"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue() == 1376485651);
			}
		});
		invariants1999.add(new Invariant(1167, "cfsInstance.metadata.resource.hash == -1493090397 || cfsInstance.metadata.resource.hash == -1493090396 || cfsInstance.metadata.resource.hash == 1377534570"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == -1493090397 || ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == -1493090396 || ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == 1377534570);
			}
		});
		invariants1999.add(new Invariant(1168, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1169, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1170, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1171, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1172, "CFMetadataInstance.compactValueColumn.NO_POSITION < CFMetadataInstance.partitionColumns.regulars.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1173, "CFMetadataInstance.compactValueColumn.NO_POSITION > CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1174, "CFMetadataInstance.compactValueColumn.NO_POSITION < CommitLog.instance.executor.lastSyncedAt"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1175, "CFMetadataInstance.compactValueColumn.NO_POSITION < CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1176, "CFMetadataInstance.compactValueColumn.NO_POSITION < CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1177, "CFMetadataInstance.compactValueColumn.NO_POSITION < CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1178, "CFMetadataInstance.compactValueColumn.NO_POSITION < CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1179, "CFMetadataInstance.compactValueColumn.NO_POSITION < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1180, "CFMetadataInstance.compactValueColumn.NO_POSITION < CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1181, "CFMetadataInstance.compactValueColumn.NO_POSITION < CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1182, "CFMetadataInstance.compactValueColumn.NO_POSITION < CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1183, "CFMetadataInstance.compactValueColumn.NO_POSITION < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1184, "CFMetadataInstance.compactValueColumn.NO_POSITION < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1185, "CFMetadataInstance.compactValueColumn.NO_POSITION < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1186, "CFMetadataInstance.compactValueColumn.NO_POSITION < cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1187, "CFMetadataInstance.compactValueColumn.NO_POSITION < cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1188, "CFMetadataInstance.compactValueColumn.NO_POSITION > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1189, "CFMetadataInstance.compactValueColumn.NO_POSITION < cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1190, "CFMetadataInstance.compactValueColumn.NO_POSITION < resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1191, "CFMetadataInstance.compactValueColumn.NO_POSITION <= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() <= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1192, "CFMetadataInstance.compactValueColumn.comparisonOrder > CFMetadataInstance.partitionColumns.regulars.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1193, "CFMetadataInstance.compactValueColumn.comparisonOrder > CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1194, "CFMetadataInstance.compactValueColumn.comparisonOrder > CommitLog.instance.executor.lastSyncedAt"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1195, "CFMetadataInstance.compactValueColumn.comparisonOrder > CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1196, "CFMetadataInstance.compactValueColumn.comparisonOrder > CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1197, "CFMetadataInstance.compactValueColumn.comparisonOrder > CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1198, "CFMetadataInstance.compactValueColumn.comparisonOrder > CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1199, "CFMetadataInstance.compactValueColumn.comparisonOrder > CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1200, "CFMetadataInstance.compactValueColumn.comparisonOrder > CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1201, "CFMetadataInstance.compactValueColumn.comparisonOrder > CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1202, "CFMetadataInstance.compactValueColumn.comparisonOrder > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1203, "CFMetadataInstance.compactValueColumn.comparisonOrder > CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1204, "CFMetadataInstance.compactValueColumn.comparisonOrder > CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1205, "CFMetadataInstance.compactValueColumn.comparisonOrder > CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1206, "CFMetadataInstance.compactValueColumn.comparisonOrder > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1207, "CFMetadataInstance.compactValueColumn.comparisonOrder > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1208, "CFMetadataInstance.compactValueColumn.comparisonOrder > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1209, "CFMetadataInstance.compactValueColumn.comparisonOrder > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1210, "CFMetadataInstance.compactValueColumn.comparisonOrder > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1211, "CFMetadataInstance.compactValueColumn.comparisonOrder > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1212, "CFMetadataInstance.compactValueColumn.hash > CFMetadataInstance.partitionColumns.regulars.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1213, "CFMetadataInstance.compactValueColumn.hash > CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1214, "CFMetadataInstance.compactValueColumn.hash < CommitLog.instance.executor.lastSyncedAt"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1215, "CFMetadataInstance.compactValueColumn.hash > CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1216, "CFMetadataInstance.compactValueColumn.hash > CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1217, "CFMetadataInstance.compactValueColumn.hash > CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1218, "CFMetadataInstance.compactValueColumn.hash > CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1219, "CFMetadataInstance.compactValueColumn.hash < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1220, "CFMetadataInstance.compactValueColumn.hash > CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1221, "CFMetadataInstance.compactValueColumn.hash > CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1222, "CFMetadataInstance.compactValueColumn.hash > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1223, "CFMetadataInstance.compactValueColumn.hash > CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1224, "CFMetadataInstance.compactValueColumn.hash < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1225, "CFMetadataInstance.compactValueColumn.hash > CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1226, "CFMetadataInstance.compactValueColumn.hash > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1227, "CFMetadataInstance.compactValueColumn.hash > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1228, "CFMetadataInstance.compactValueColumn.hash > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1229, "CFMetadataInstance.compactValueColumn.hash > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1230, "CFMetadataInstance.compactValueColumn.hash > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1231, "CFMetadataInstance.compactValueColumn.hash > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1232, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE > CFMetadataInstance.partitionColumns.regulars.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1233, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE > CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1234, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE < CommitLog.instance.executor.lastSyncedAt"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1235, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE > CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1236, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE < CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1237, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE < CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1238, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE < CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1239, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1240, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE < CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1241, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE < CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1242, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1243, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1244, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1245, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1246, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1247, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1248, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1249, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1250, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1251, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1252, "CFMetadataInstance.compactValueColumn.name.prefixComparison < CFMetadataInstance.partitionColumns.regulars.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1253, "CFMetadataInstance.compactValueColumn.name.prefixComparison < CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1254, "CFMetadataInstance.compactValueColumn.name.prefixComparison < CommitLog.instance.executor.lastSyncedAt"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1255, "CFMetadataInstance.compactValueColumn.name.prefixComparison < CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1256, "CFMetadataInstance.compactValueColumn.name.prefixComparison < CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1257, "CFMetadataInstance.compactValueColumn.name.prefixComparison < CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1258, "CFMetadataInstance.compactValueColumn.name.prefixComparison < CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1259, "CFMetadataInstance.compactValueColumn.name.prefixComparison < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1260, "CFMetadataInstance.compactValueColumn.name.prefixComparison < CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1261, "CFMetadataInstance.compactValueColumn.name.prefixComparison < CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1262, "CFMetadataInstance.compactValueColumn.name.prefixComparison < CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1263, "CFMetadataInstance.compactValueColumn.name.prefixComparison < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1264, "CFMetadataInstance.compactValueColumn.name.prefixComparison < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1265, "CFMetadataInstance.compactValueColumn.name.prefixComparison < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1266, "CFMetadataInstance.compactValueColumn.name.prefixComparison < cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1267, "CFMetadataInstance.compactValueColumn.name.prefixComparison < cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1268, "CFMetadataInstance.compactValueColumn.name.prefixComparison < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1269, "CFMetadataInstance.compactValueColumn.name.prefixComparison < cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1270, "CFMetadataInstance.compactValueColumn.name.prefixComparison < resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() < ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1271, "CFMetadataInstance.compactValueColumn.name.prefixComparison < daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() < daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1272, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CFMetadataInstance.partitioner.EMPTY_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1273, "CFMetadataInstance.partitionColumns.regulars.complexIdx < StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1274, "CFMetadataInstance.partitionColumns.regulars.complexIdx < StorageService.instance.tokenMetadata.partitioner.MAXIMUM"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1275, "CFMetadataInstance.partitionColumns.regulars.complexIdx > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1276, "CFMetadataInstance.partitionColumns.regulars.complexIdx > cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1277, "CFMetadataInstance.partitionColumns.regulars.complexIdx > cfsInstance.metadata.compactValueColumn.NO_POSITION"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1278, "CFMetadataInstance.partitionColumns.regulars.complexIdx < cfsInstance.metadata.compactValueColumn.comparisonOrder"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1279, "CFMetadataInstance.partitionColumns.regulars.complexIdx < cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1280, "CFMetadataInstance.partitionColumns.statics.complexIdx != CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() != ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1281, "CFMetadataInstance.partitionColumns.statics.complexIdx >= cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() >= ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1282, "CFMetadataInstance.partitionColumns.statics.complexIdx != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1283, "CFMetadataInstance.partitioner.EMPTY_SIZE < CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1284, "CFMetadataInstance.partitioner.EMPTY_SIZE < CommitLog.instance.executor.lastSyncedAt"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1285, "CFMetadataInstance.partitioner.EMPTY_SIZE > CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1286, "CFMetadataInstance.partitioner.EMPTY_SIZE < CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1287, "CFMetadataInstance.partitioner.EMPTY_SIZE < CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1288, "CFMetadataInstance.partitioner.EMPTY_SIZE < CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1289, "CFMetadataInstance.partitioner.EMPTY_SIZE < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1290, "CFMetadataInstance.partitioner.EMPTY_SIZE < CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1291, "CFMetadataInstance.partitioner.EMPTY_SIZE < CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1292, "CFMetadataInstance.partitioner.EMPTY_SIZE < CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1293, "CFMetadataInstance.partitioner.EMPTY_SIZE < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1294, "CFMetadataInstance.partitioner.EMPTY_SIZE < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1295, "CFMetadataInstance.partitioner.EMPTY_SIZE < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1296, "CFMetadataInstance.partitioner.EMPTY_SIZE > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1297, "CFMetadataInstance.partitioner.EMPTY_SIZE > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1298, "CFMetadataInstance.partitioner.EMPTY_SIZE < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1299, "CFMetadataInstance.partitioner.EMPTY_SIZE > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1300, "CFMetadataInstance.partitioner.EMPTY_SIZE > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1301, "CFMetadataInstance.partitioner.EMPTY_SIZE > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1302, "CFMetadataInstance.partitioner.HEAP_SIZE > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1303, "CFMetadataInstance.partitioner.MAXIMUM > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1304, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID > CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1305, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID < CommitLog.instance.executor.lastSyncedAt"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1306, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID < CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1307, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID < CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1308, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID < CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1309, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1310, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID < CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1311, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID < CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1312, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID < CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1313, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1314, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1315, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1316, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1317, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1318, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID <= resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() <= ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1319, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1320, "CFMetadataInstance.partitioner.MINIMUM.token < cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1321, "CFMetadataInstance.resource.hash != StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1322, "CFMetadataInstance.resource.hash < StorageService.instance.tokenMetadata.partitioner.MAXIMUM"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1323, "CFMetadataInstance.resource.hash != cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1324, "CFMetadataInstance.resource.hash < cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1325, "CFMetadataInstance.resource.hash != cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1326, "CFMetadataInstance.resource.hash < cfsInstance.metadata.compactValueColumn.NO_POSITION"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1327, "CFMetadataInstance.resource.hash < cfsInstance.metadata.compactValueColumn.comparisonOrder"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1328, "CFMetadataInstance.resource.hash < cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1329, "CFMetadataInstance.resource.hash != cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1330, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1331, "CommitLog.instance.MAX_MUTATION_SIZE > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1332, "CommitLog.instance.archiver.restorePointInTime > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1333, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1334, "CommitLog.instance.executor.lastSyncedAt > StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1335, "CommitLog.instance.executor.lastSyncedAt < StorageService.instance.tokenMetadata.partitioner.MAXIMUM"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1336, "CommitLog.instance.executor.lastSyncedAt > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1337, "CommitLog.instance.executor.lastSyncedAt > cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1338, "CommitLog.instance.executor.lastSyncedAt > cfsInstance.metadata.compactValueColumn.NO_POSITION"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1339, "CommitLog.instance.executor.lastSyncedAt < cfsInstance.metadata.compactValueColumn.comparisonOrder"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1340, "CommitLog.instance.executor.lastSyncedAt > cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1341, "CommitLog.instance.executor.markerIntervalNanos > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1342, "CommitLog.instance.executor.pending < StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1343, "CommitLog.instance.executor.pending < StorageService.instance.tokenMetadata.partitioner.MAXIMUM"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1344, "CommitLog.instance.executor.pending >= cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() >= ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1345, "CommitLog.instance.executor.pending >= cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() >= ((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1346, "CommitLog.instance.executor.pending > cfsInstance.metadata.compactValueColumn.NO_POSITION"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1347, "CommitLog.instance.executor.pending < cfsInstance.metadata.compactValueColumn.comparisonOrder"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1348, "CommitLog.instance.executor.pending < cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1349, "CommitLog.instance.executor.syncComplete.CANCELLED <= cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.CANCELLED"))).intValue() <= ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1350, "CommitLog.instance.executor.written > StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() > ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1351, "CommitLog.instance.executor.written < StorageService.instance.tokenMetadata.partitioner.MAXIMUM"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1352, "CommitLog.instance.executor.written > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1353, "CommitLog.instance.executor.written > cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1354, "CommitLog.instance.executor.written > cfsInstance.metadata.compactValueColumn.NO_POSITION"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1355, "CommitLog.instance.executor.written < cfsInstance.metadata.compactValueColumn.comparisonOrder"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1356, "CommitLog.instance.executor.written < cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1357, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1358, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1359, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition > StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1360, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition < StorageService.instance.tokenMetadata.partitioner.MAXIMUM"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1361, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1362, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition > cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1363, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition > cfsInstance.metadata.compactValueColumn.NO_POSITION"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1364, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition < cfsInstance.metadata.compactValueColumn.comparisonOrder"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1365, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition < cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1366, "CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1367, "CommitLog.instance.segmentManager.allocatingFrom.fd > StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() > ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1368, "CommitLog.instance.segmentManager.allocatingFrom.fd < StorageService.instance.tokenMetadata.partitioner.MAXIMUM"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1369, "CommitLog.instance.segmentManager.allocatingFrom.fd > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1370, "CommitLog.instance.segmentManager.allocatingFrom.fd > cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1371, "CommitLog.instance.segmentManager.allocatingFrom.fd > cfsInstance.metadata.compactValueColumn.NO_POSITION"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1372, "CommitLog.instance.segmentManager.allocatingFrom.fd < cfsInstance.metadata.compactValueColumn.comparisonOrder"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1373, "CommitLog.instance.segmentManager.allocatingFrom.fd < cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1374, "CommitLog.instance.segmentManager.allocatingFrom.id > StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1375, "CommitLog.instance.segmentManager.allocatingFrom.id < StorageService.instance.tokenMetadata.partitioner.MAXIMUM"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1376, "CommitLog.instance.segmentManager.allocatingFrom.id > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1377, "CommitLog.instance.segmentManager.allocatingFrom.id > cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1378, "CommitLog.instance.segmentManager.allocatingFrom.id > cfsInstance.metadata.compactValueColumn.NO_POSITION"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1379, "CommitLog.instance.segmentManager.allocatingFrom.id < cfsInstance.metadata.compactValueColumn.comparisonOrder"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1380, "CommitLog.instance.segmentManager.allocatingFrom.id > cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1381, "CommitLog.instance.segmentManager.allocatingFrom.idBase > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1382, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset > StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() > ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1383, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset < StorageService.instance.tokenMetadata.partitioner.MAXIMUM"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1384, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1385, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset > cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1386, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset > cfsInstance.metadata.compactValueColumn.NO_POSITION"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1387, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset < cfsInstance.metadata.compactValueColumn.comparisonOrder"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1388, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset < cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1389, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset > StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() > ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1390, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset < StorageService.instance.tokenMetadata.partitioner.MAXIMUM"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1391, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1392, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset > cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1393, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset > cfsInstance.metadata.compactValueColumn.NO_POSITION"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1394, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset < cfsInstance.metadata.compactValueColumn.comparisonOrder"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1395, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset < cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1396, "CommitLog.instance.segmentManager.allocatingFrom.nextId > StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() > ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1397, "CommitLog.instance.segmentManager.allocatingFrom.nextId < StorageService.instance.tokenMetadata.partitioner.MAXIMUM"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1398, "CommitLog.instance.segmentManager.allocatingFrom.nextId > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1399, "CommitLog.instance.segmentManager.allocatingFrom.nextId > cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1400, "CommitLog.instance.segmentManager.allocatingFrom.nextId > cfsInstance.metadata.compactValueColumn.NO_POSITION"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1401, "CommitLog.instance.segmentManager.allocatingFrom.nextId < cfsInstance.metadata.compactValueColumn.comparisonOrder"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1402, "CommitLog.instance.segmentManager.allocatingFrom.nextId < cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1403, "CommitLog.instance.segmentManager.allocatingFrom.replayLimitId > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1404, "CommitLog.instance.segmentManager.availableSegment.allocatePosition > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1405, "CommitLog.instance.segmentManager.availableSegment.fd > StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() > ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1406, "CommitLog.instance.segmentManager.availableSegment.fd < StorageService.instance.tokenMetadata.partitioner.MAXIMUM"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1407, "CommitLog.instance.segmentManager.availableSegment.fd > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1408, "CommitLog.instance.segmentManager.availableSegment.fd > cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1409, "CommitLog.instance.segmentManager.availableSegment.fd > cfsInstance.metadata.compactValueColumn.NO_POSITION"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1410, "CommitLog.instance.segmentManager.availableSegment.fd < cfsInstance.metadata.compactValueColumn.comparisonOrder"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1411, "CommitLog.instance.segmentManager.availableSegment.fd < cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1412, "CommitLog.instance.segmentManager.availableSegment.id > StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() > ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1413, "CommitLog.instance.segmentManager.availableSegment.id < StorageService.instance.tokenMetadata.partitioner.MAXIMUM"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1414, "CommitLog.instance.segmentManager.availableSegment.id > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1415, "CommitLog.instance.segmentManager.availableSegment.id > cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1416, "CommitLog.instance.segmentManager.availableSegment.id > cfsInstance.metadata.compactValueColumn.NO_POSITION"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1417, "CommitLog.instance.segmentManager.availableSegment.id < cfsInstance.metadata.compactValueColumn.comparisonOrder"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1418, "CommitLog.instance.segmentManager.availableSegment.id > cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1419, "CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1420, "CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1421, "CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1422, "CommitLog.instance.segmentManager.size > StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() > ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1423, "CommitLog.instance.segmentManager.size < StorageService.instance.tokenMetadata.partitioner.MAXIMUM"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1424, "CommitLog.instance.segmentManager.size > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1425, "CommitLog.instance.segmentManager.size > cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1426, "CommitLog.instance.segmentManager.size > cfsInstance.metadata.compactValueColumn.NO_POSITION"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1427, "CommitLog.instance.segmentManager.size < cfsInstance.metadata.compactValueColumn.comparisonOrder"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1428, "CommitLog.instance.segmentManager.size < cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1429, "StorageService.instance.RING_DELAY > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1430, "StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1431, "StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1432, "StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1433, "StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1434, "StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1435, "StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1436, "StorageService.instance.tokenMetadata.partitioner.MAXIMUM > cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1437, "StorageService.instance.tokenMetadata.partitioner.MAXIMUM > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1438, "StorageService.instance.tokenMetadata.partitioner.MAXIMUM > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1439, "StorageService.instance.tokenMetadata.partitioner.MAXIMUM > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1440, "StorageService.instance.tokenMetadata.partitioner.MAXIMUM > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1441, "StorageService.instance.tokenMetadata.partitioner.MAXIMUM > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1442, "cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion < cfsInstance.compactionStrategyManager.fanout"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1443, "cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion < cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1444, "cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion <= cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue() <= ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1445, "cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion < cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1446, "cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion > cfsInstance.metadata.compactValueColumn.NO_POSITION"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1447, "cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion < cfsInstance.metadata.compactValueColumn.comparisonOrder"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1448, "cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion < cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1449, "cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1450, "cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion <= cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue() <= ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1451, "cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion < cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1452, "cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion < resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue() < ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1453, "cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion <= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue() <= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1454, "cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion <= cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue() <= ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1455, "cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1456, "cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion <= cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue() <= ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1457, "cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion < resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue() < ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1458, "cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion <= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue() <= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1459, "cfsInstance.fileIndexGenerator > cfsInstance.metadata.compactValueColumn.NO_POSITION"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1460, "cfsInstance.fileIndexGenerator < cfsInstance.metadata.compactValueColumn.comparisonOrder"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1461, "cfsInstance.fileIndexGenerator < cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1462, "cfsInstance.fileIndexGenerator != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1463, "cfsInstance.metadata.compactValueColumn.NO_POSITION > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1464, "cfsInstance.metadata.compactValueColumn.NO_POSITION < cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1465, "cfsInstance.metadata.compactValueColumn.NO_POSITION < resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1466, "cfsInstance.metadata.compactValueColumn.NO_POSITION <= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue() <= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1467, "cfsInstance.metadata.compactValueColumn.comparisonOrder > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1468, "cfsInstance.metadata.compactValueColumn.comparisonOrder > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1469, "cfsInstance.metadata.compactValueColumn.comparisonOrder > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1470, "cfsInstance.metadata.compactValueColumn.comparisonOrder > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1471, "cfsInstance.metadata.compactValueColumn.hash > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1472, "cfsInstance.metadata.compactValueColumn.hash > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1473, "cfsInstance.metadata.compactValueColumn.hash > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1474, "cfsInstance.metadata.compactValueColumn.hash > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1475, "cfsInstance.metadata.resource.hash != cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1476, "5242880 * CFMetadataInstance.partitionColumns.regulars.complexIdx + 5242880 * CommitLog.instance.segmentManager.allocatingFrom.id - CommitLog.instance.segmentManager.size - 9.077277193708503E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() + 5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 9.077277193708503E18 == 0);
			}
		});
		invariants1999.add(new Invariant(1477, "5242880 * CFMetadataInstance.partitionColumns.regulars.complexIdx + 5242880 * CommitLog.instance.segmentManager.availableSegment.id - CommitLog.instance.segmentManager.size - 9.0772771937137459E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() + 5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 9.0772771937137459E18 == 0);
			}
		});
		invariants1999.add(new Invariant(1478, "5.741249932E9 * CFMetadataInstance.partitionColumns.regulars.complexIdx + cfsInstance.fileIndexGenerator + 2 * cfsInstance.metadata.resource.hash - 2.75506914E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5.741249932E9 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 2 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 2.75506914E9 == 0);
			}
		});
		invariants1999.add(new Invariant(1479, "CommitLog.instance.executor.lastSyncedAt - 27338555 * CommitLog.instance.executor.pending - 65535743 * CommitLog.instance.executor.written - 8.9417810196661E13 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 27338555 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - 65535743 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() - 8.9417810196661E13 == 0);
			}
		});
		invariants1999.add(new Invariant(1480, "92 * CommitLog.instance.executor.lastSyncedAt - 3.514141296E9 * CommitLog.instance.executor.written - 27338555 * CommitLog.instance.segmentManager.allocatingFrom.allocatePosition - 8.229588349707137E15 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (92 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 3.514141296E9 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() - 27338555 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() - 8.229588349707137E15 == 0);
			}
		});
		invariants1999.add(new Invariant(1481, "92 * CommitLog.instance.executor.lastSyncedAt - 3.514141296E9 * CommitLog.instance.executor.written - 27338555 * CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset - 8.229588568415577E15 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (92 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 3.514141296E9 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() - 27338555 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() - 8.229588568415577E15 == 0);
			}
		});
		invariants1999.add(new Invariant(1482, "119 * CommitLog.instance.executor.lastSyncedAt - 1.0313900477E10 * CommitLog.instance.executor.written + 27338555 * CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset - 1.0637569383079894E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (119 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 1.0313900477E10 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() + 27338555 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() - 1.0637569383079894E16 == 0);
			}
		});
		invariants1999.add(new Invariant(1483, "5242880 * CommitLog.instance.segmentManager.allocatingFrom.id - CommitLog.instance.segmentManager.size + 5242880 * cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion - 9.0772771937032602E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 5242880 * ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue() - 9.0772771937032602E18 == 0);
			}
		});
		invariants1999.add(new Invariant(1484, "CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.fileIndexGenerator - daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224507E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224507E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1485, "2 * CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.readOrdering.current.id - 2 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 3.462706449015E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - 2 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 3.462706449015E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1486, "5242880 * CommitLog.instance.segmentManager.availableSegment.id - CommitLog.instance.segmentManager.size + 5242880 * cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion - 9.077277193708503E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 5242880 * ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue() - 9.077277193708503E18 == 0);
			}
		});
		invariants1999.add(new Invariant(1487, "CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.fileIndexGenerator - daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224508E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224508E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1488, "2 * CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.readOrdering.current.id - 2 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 3.462706449017E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - 2 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 3.462706449017E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1489, "5.741249932E9 * cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion + cfsInstance.fileIndexGenerator + 2 * cfsInstance.metadata.resource.hash + 2.986180792E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5.741249932E9 * ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 2 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 2.986180792E9 == 0);
			}
		});
		invariants1999.add(new Invariant(1490, "CFMetadataInstance.allColumnFilter.isFetchAll == CFMetadataInstance.keyValidator.isByteOrderComparable"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CFMetadataInstance.keyValidator.isByteOrderComparable"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1491, "CFMetadataInstance.allColumnFilter.isFetchAll == CFMetadataInstance.partitioner.comparator.isByteOrderComparable"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CFMetadataInstance.partitioner.comparator.isByteOrderComparable"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1492, "CFMetadataInstance.allColumnFilter.isFetchAll == cfsInstance.metadata.keyValidator.isByteOrderComparable"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.metadata.keyValidator.isByteOrderComparable"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1493, "CFMetadataInstance.isIndex == CFMetadataInstance.partitioner.comparator.isByteOrderComparable"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isIndex"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CFMetadataInstance.partitioner.comparator.isByteOrderComparable"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1494, "CFMetadataInstance.partitioner.comparator.isByteOrderComparable == cfsInstance.compactionStrategyManager.isActive"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.partitioner.comparator.isByteOrderComparable"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.isActive"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1495, "CFMetadataInstance.partitioner.comparator.isByteOrderComparable == true"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.partitioner.comparator.isByteOrderComparable"))).booleanValue() == true);
			}
		});
		invariants1999.add(new Invariant(1496, "CFMetadataInstance.resource.hash == -1493090403 || CFMetadataInstance.resource.hash == 1292670864 || CFMetadataInstance.resource.hash == 2144393077"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == -1493090403 || ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == 1292670864 || ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == 2144393077);
			}
		});
		invariants1999.add(new Invariant(1497, "CommitLog.instance.segmentManager.allocatingFrom.fd == 179 || CommitLog.instance.segmentManager.allocatingFrom.fd == 183 || CommitLog.instance.segmentManager.allocatingFrom.fd == 217"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 179 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 183 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 217);
			}
		});
		invariants1999.add(new Invariant(1498, "CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224495L || CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224496L || CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224497L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224495L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224496L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224497L);
			}
		});
		invariants1999.add(new Invariant(1499, "CommitLog.instance.segmentManager.allocatingFrom.nextId == 25 || CommitLog.instance.segmentManager.allocatingFrom.nextId == 26 || CommitLog.instance.segmentManager.allocatingFrom.nextId == 27"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 25 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 26 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 27);
			}
		});
		invariants1999.add(new Invariant(1500, "CommitLog.instance.segmentManager.availableSegment.fd == 177 || CommitLog.instance.segmentManager.availableSegment.fd == 183 || CommitLog.instance.segmentManager.availableSegment.fd == 217"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 177 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 183 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 217);
			}
		});
		invariants1999.add(new Invariant(1501, "CommitLog.instance.segmentManager.availableSegment.id == 1731353224496L || CommitLog.instance.segmentManager.availableSegment.id == 1731353224497L || CommitLog.instance.segmentManager.availableSegment.id == 1731353224498L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224496L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224497L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224498L);
			}
		});
		invariants1999.add(new Invariant(1502, "cfsInstance.metadata.resource.hash == -1493090403 || cfsInstance.metadata.resource.hash == 1292670864 || cfsInstance.metadata.resource.hash == 2144393077"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == -1493090403 || ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == 1292670864 || ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == 2144393077);
			}
		});
		invariants1999.add(new Invariant(1503, "cfsInstance.readOrdering.current.id == 0 || cfsInstance.readOrdering.current.id == 2 || cfsInstance.readOrdering.current.id == 3"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() == 0 || ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() == 2 || ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() == 3);
			}
		});
		invariants1999.add(new Invariant(1504, "cfsInstance.sampleLatencyNanos == 0 || cfsInstance.sampleLatencyNanos == 2500000000L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue() == 0 || ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue() == 2500000000L);
			}
		});
		invariants1999.add(new Invariant(1505, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1506, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1507, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK != cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1508, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1509, "CFMetadataInstance.partitionColumns.regulars.complexIdx != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1510, "CFMetadataInstance.partitionColumns.regulars.complexIdx != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1511, "CFMetadataInstance.partitionColumns.statics.complexIdx <= cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() <= ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1512, "CFMetadataInstance.partitioner.EMPTY_SIZE != CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1513, "CFMetadataInstance.partitioner.EMPTY_SIZE != CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1514, "CFMetadataInstance.partitioner.EMPTY_SIZE != CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1515, "CFMetadataInstance.partitioner.EMPTY_SIZE > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1516, "CFMetadataInstance.partitioner.EMPTY_SIZE < cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1517, "CFMetadataInstance.partitioner.HEAP_SIZE != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1518, "CFMetadataInstance.partitioner.MAXIMUM > cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1519, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID != CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() != ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1520, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID >= CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() >= ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1521, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID != cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1522, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1523, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID != cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1524, "CFMetadataInstance.partitioner.MINIMUM.serialVersionUID != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1525, "CFMetadataInstance.partitioner.MINIMUM.token < cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1526, "CFMetadataInstance.resource.hash != cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1527, "CFMetadataInstance.resource.hash <= cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() <= ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1528, "CFMetadataInstance.resource.hash != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1529, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1530, "CommitLog.instance.MAX_MUTATION_SIZE != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1531, "CommitLog.instance.archiver.restorePointInTime > cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1532, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1533, "CommitLog.instance.executor.markerIntervalNanos != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1534, "CommitLog.instance.executor.written != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1535, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1536, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1537, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1538, "CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1539, "CommitLog.instance.segmentManager.allocatingFrom.fd != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1540, "CommitLog.instance.segmentManager.allocatingFrom.idBase > cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1541, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset != StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() != ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1542, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1543, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset != StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() != ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1544, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1545, "CommitLog.instance.segmentManager.allocatingFrom.nextId != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1546, "CommitLog.instance.segmentManager.allocatingFrom.replayLimitId > cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1547, "CommitLog.instance.segmentManager.availableSegment.allocatePosition != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1548, "CommitLog.instance.segmentManager.availableSegment.fd != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1549, "CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1550, "CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1551, "CommitLog.instance.segmentManager.size != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1552, "StorageService.instance.RING_DELAY != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1553, "StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1554, "StorageService.instance.tokenMetadata.partitioner.MAXIMUM > cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1555, "cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion <= cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue() <= ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1556, "cfsInstance.compactionStrategyManager.fanout != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1557, "cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1558, "cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1559, "cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion <= cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue() <= ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1560, "cfsInstance.fileIndexGenerator != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1561, "cfsInstance.indexManager.DEFAULT_PAGE_SIZE != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1562, "cfsInstance.metadata.resource.hash != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1563, "cfsInstance.readOrdering.current.id != cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1564, "cfsInstance.sampleLatencyNanos != resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue() != ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1565, "2 * CFMetadataInstance.partitionColumns.regulars.complexIdx - CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.allocatingFrom.id - 1.731353224497E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - 1.731353224497E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1566, "2 * CFMetadataInstance.partitionColumns.regulars.complexIdx - CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.availableSegment.id - 1.731353224498E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - 1.731353224498E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1567, "2621440 * CommitLog.instance.executor.pending - 2621440 * CommitLog.instance.segmentManager.allocatingFrom.id + CommitLog.instance.segmentManager.size + 4.538638596809687E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2621440 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - 2621440 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 4.538638596809687E18 == 0);
			}
		});
		invariants1999.add(new Invariant(1568, "CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.allocatingFrom.id - 2 * cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion + 1.731353224495E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue() + 1.731353224495E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1569, "2 * CommitLog.instance.executor.pending - 2 * CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.fileIndexGenerator + 3.462706448992E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 3.462706448992E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1570, "3 * CommitLog.instance.executor.pending - 3 * CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.readOrdering.current.id + 5.194059673488E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (3 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - 3 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() + 5.194059673488E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1571, "2621440 * CommitLog.instance.executor.pending - 2621440 * CommitLog.instance.segmentManager.availableSegment.id + CommitLog.instance.segmentManager.size + 4.5386385968123085E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2621440 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - 2621440 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 4.5386385968123085E18 == 0);
			}
		});
		invariants1999.add(new Invariant(1572, "CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.availableSegment.id - 2 * cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion + 1.731353224496E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue() + 1.731353224496E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1573, "2 * CommitLog.instance.executor.pending - 2 * CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.fileIndexGenerator + 3.462706448994E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 3.462706448994E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1574, "3 * CommitLog.instance.executor.pending - 3 * CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.readOrdering.current.id + 5.194059673491E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (3 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - 3 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() + 5.194059673491E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1575, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition - 89 * CommitLog.instance.segmentManager.allocatingFrom.id - CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset + 1.54090436980047E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() - 89 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() + 1.54090436980047E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1576, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition - CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset - 89 * CommitLog.instance.segmentManager.availableSegment.id + 1.54090436980136E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() - 89 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + 1.54090436980136E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1577, "46 * CommitLog.instance.segmentManager.allocatingFrom.id + 3 * CommitLog.instance.segmentManager.availableSegment.fd - 28 * cfsInstance.fileIndexGenerator - 7.9642248327365E13 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (46 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + 3 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() - 28 * ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 7.9642248327365E13 == 0);
			}
		});
		invariants1999.add(new Invariant(1578, "CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.readOrdering.current.id - daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224492E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224492E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1579, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset - CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset - 89 * CommitLog.instance.segmentManager.availableSegment.id + 1.54090436980144E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() - 89 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + 1.54090436980144E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1580, "3 * CommitLog.instance.segmentManager.availableSegment.fd + 46 * CommitLog.instance.segmentManager.availableSegment.id - 28 * cfsInstance.fileIndexGenerator - 7.9642248327411E13 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (3 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() + 46 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - 28 * ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 7.9642248327411E13 == 0);
			}
		});
		invariants1999.add(new Invariant(1581, "CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.readOrdering.current.id - daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224493E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224493E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1582, "CFMetadataInstance.compactValueColumn.type.isByteOrderComparable == CFMetadataInstance.isCompound"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.type.isByteOrderComparable"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCompound"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1583, "CFMetadataInstance.compactValueColumn.type.isByteOrderComparable == CFMetadataInstance.isCounter"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.type.isByteOrderComparable"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1584, "CFMetadataInstance.compactValueColumn.hash == 0 || CFMetadataInstance.compactValueColumn.hash == 1376485651"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() == 0 || ((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() == 1376485651);
			}
		});
		invariants1999.add(new Invariant(1585, "CFMetadataInstance.compactValueColumn.type.isByteOrderComparable == false"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.type.isByteOrderComparable"))).booleanValue() == false);
			}
		});
		invariants1999.add(new Invariant(1586, "CFMetadataInstance.resource.hash == -1493090398 || CFMetadataInstance.resource.hash == -1493090397"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == -1493090398 || ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == -1493090397);
			}
		});
		invariants1999.add(new Invariant(1587, "CommitLog.instance.segmentManager.allocatingFrom.fd == 177 || CommitLog.instance.segmentManager.allocatingFrom.fd == 178 || CommitLog.instance.segmentManager.allocatingFrom.fd == 214"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 177 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 178 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 214);
			}
		});
		invariants1999.add(new Invariant(1588, "CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224507L || CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224508L || CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224509L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224507L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224508L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224509L);
			}
		});
		invariants1999.add(new Invariant(1589, "CommitLog.instance.segmentManager.allocatingFrom.nextId == 37 || CommitLog.instance.segmentManager.allocatingFrom.nextId == 38 || CommitLog.instance.segmentManager.allocatingFrom.nextId == 39"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 37 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 38 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 39);
			}
		});
		invariants1999.add(new Invariant(1590, "CommitLog.instance.segmentManager.availableSegment.fd == 178 || CommitLog.instance.segmentManager.availableSegment.fd == 182 || CommitLog.instance.segmentManager.availableSegment.fd == 214"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 178 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 182 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 214);
			}
		});
		invariants1999.add(new Invariant(1591, "CommitLog.instance.segmentManager.availableSegment.id == 1731353224508L || CommitLog.instance.segmentManager.availableSegment.id == 1731353224509L || CommitLog.instance.segmentManager.availableSegment.id == 1731353224510L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224508L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224509L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224510L);
			}
		});
		invariants1999.add(new Invariant(1592, "CommitLog.instance.segmentManager.size == 10485760"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() == 10485760);
			}
		});
		invariants1999.add(new Invariant(1593, "cfsInstance.metadata.resource.hash == -1493090398 || cfsInstance.metadata.resource.hash == -1493090397"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == -1493090398 || ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == -1493090397);
			}
		});
		invariants1999.add(new Invariant(1594, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK != CFMetadataInstance.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() != ((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1595, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK != CFMetadataInstance.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() != ((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1596, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK != CFMetadataInstance.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() != ((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1597, "CFMetadataInstance.compactValueColumn.NO_POSITION < CFMetadataInstance.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1598, "CFMetadataInstance.compactValueColumn.NO_POSITION < CFMetadataInstance.partitionColumns.statics.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1599, "CFMetadataInstance.compactValueColumn.comparisonOrder > CFMetadataInstance.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1600, "CFMetadataInstance.compactValueColumn.comparisonOrder > CFMetadataInstance.partitionColumns.statics.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.comparisonOrder"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1601, "CFMetadataInstance.compactValueColumn.hash != CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1602, "CFMetadataInstance.compactValueColumn.hash > CFMetadataInstance.compactValueColumn.name.prefixComparison"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1603, "CFMetadataInstance.compactValueColumn.hash != CFMetadataInstance.partitionColumns.regulars.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1604, "CFMetadataInstance.compactValueColumn.hash >= CFMetadataInstance.partitionColumns.statics.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() >= ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1605, "CFMetadataInstance.compactValueColumn.hash != CFMetadataInstance.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1606, "CFMetadataInstance.compactValueColumn.hash < CFMetadataInstance.partitioner.MAXIMUM"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1607, "CFMetadataInstance.compactValueColumn.hash > CFMetadataInstance.partitioner.MINIMUM.token"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1608, "CFMetadataInstance.compactValueColumn.hash != CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1609, "CFMetadataInstance.compactValueColumn.hash != CommitLog.instance.MAX_MUTATION_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1610, "CFMetadataInstance.compactValueColumn.hash < CommitLog.instance.archiver.restorePointInTime"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1611, "CFMetadataInstance.compactValueColumn.hash != CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1612, "CFMetadataInstance.compactValueColumn.hash != CommitLog.instance.executor.markerIntervalNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1613, "CFMetadataInstance.compactValueColumn.hash >= CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() >= ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1614, "CFMetadataInstance.compactValueColumn.hash >= CommitLog.instance.executor.syncComplete.NOT_SET"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() >= ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1615, "CFMetadataInstance.compactValueColumn.hash != CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1616, "CFMetadataInstance.compactValueColumn.hash != CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1617, "CFMetadataInstance.compactValueColumn.hash != CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1618, "CFMetadataInstance.compactValueColumn.hash != CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1619, "CFMetadataInstance.compactValueColumn.hash != CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1620, "CFMetadataInstance.compactValueColumn.hash != CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1621, "CFMetadataInstance.compactValueColumn.hash < CommitLog.instance.segmentManager.allocatingFrom.idBase"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1622, "CFMetadataInstance.compactValueColumn.hash != CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1623, "CFMetadataInstance.compactValueColumn.hash != CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1624, "CFMetadataInstance.compactValueColumn.hash != CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1625, "CFMetadataInstance.compactValueColumn.hash < CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1626, "CFMetadataInstance.compactValueColumn.hash != CommitLog.instance.segmentManager.availableSegment.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1627, "CFMetadataInstance.compactValueColumn.hash != CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1628, "CFMetadataInstance.compactValueColumn.hash != CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1629, "CFMetadataInstance.compactValueColumn.hash != CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1630, "CFMetadataInstance.compactValueColumn.hash != CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1631, "CFMetadataInstance.compactValueColumn.hash != StorageService.instance.RING_DELAY"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1632, "CFMetadataInstance.compactValueColumn.hash != cfsInstance.compactionStrategyManager.fanout"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1633, "CFMetadataInstance.compactValueColumn.hash != cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1634, "CFMetadataInstance.compactValueColumn.hash != cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1635, "CFMetadataInstance.compactValueColumn.hash != cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1636, "CFMetadataInstance.compactValueColumn.hash > cfsInstance.metadata.compactValueColumn.NO_POSITION"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1637, "CFMetadataInstance.compactValueColumn.hash < cfsInstance.metadata.compactValueColumn.comparisonOrder"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1638, "CFMetadataInstance.compactValueColumn.hash != cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1639, "CFMetadataInstance.compactValueColumn.hash < cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1640, "CFMetadataInstance.compactValueColumn.hash != resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() != ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1641, "CFMetadataInstance.compactValueColumn.hash >= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() >= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1642, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE > CFMetadataInstance.partitionColumns.statics.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1643, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE != CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1644, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE != CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1645, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE != CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1646, "CFMetadataInstance.compactValueColumn.name.prefixComparison < CFMetadataInstance.partitionColumns.statics.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.prefixComparison"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1647, "CFMetadataInstance.partitionColumns.statics.complexIdx > cfsInstance.metadata.compactValueColumn.NO_POSITION"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1648, "CFMetadataInstance.partitionColumns.statics.complexIdx < cfsInstance.metadata.compactValueColumn.comparisonOrder"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.comparisonOrder"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1649, "CFMetadataInstance.partitionColumns.statics.complexIdx < cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1650, "CFMetadataInstance.partitionColumns.regulars.complexIdx - CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.allocatingFrom.id + 1.731353224508E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + 1.731353224508E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1651, "CFMetadataInstance.partitionColumns.regulars.complexIdx - CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.availableSegment.id + 1.731353224509E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + 1.731353224509E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1652, "CFMetadataInstance.partitionColumns.regulars.complexIdx + CommitLog.instance.executor.pending - cfsInstance.metadata.resource.hash - 1493090399 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 1493090399 == 0);
			}
		});
		invariants1999.add(new Invariant(1653, "2 * CFMetadataInstance.partitionColumns.regulars.complexIdx - CommitLog.instance.segmentManager.allocatingFrom.id + cfsInstance.fileIndexGenerator + 1.731353224506E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 1.731353224506E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1654, "CFMetadataInstance.partitionColumns.regulars.complexIdx - CommitLog.instance.segmentManager.allocatingFrom.nextId + cfsInstance.metadata.resource.hash + 1493090435 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 1493090435 == 0);
			}
		});
		invariants1999.add(new Invariant(1655, "2 * CFMetadataInstance.partitionColumns.regulars.complexIdx - CommitLog.instance.segmentManager.availableSegment.id + cfsInstance.fileIndexGenerator + 1.731353224507E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 1.731353224507E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1656, "CFMetadataInstance.partitionColumns.statics.complexIdx + CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.allocatingFrom.id - 1.731353224509E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - 1.731353224509E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1657, "CFMetadataInstance.partitionColumns.statics.complexIdx + CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.availableSegment.id - 1.73135322451E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - 1.73135322451E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1658, "CFMetadataInstance.partitionColumns.statics.complexIdx - CommitLog.instance.executor.pending + cfsInstance.metadata.resource.hash + 1493090398 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 1493090398 == 0);
			}
		});
		invariants1999.add(new Invariant(1659, "2 * CFMetadataInstance.partitionColumns.statics.complexIdx + CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.fileIndexGenerator - 1.731353224508E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 1.731353224508E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1660, "CFMetadataInstance.partitionColumns.statics.complexIdx + CommitLog.instance.segmentManager.allocatingFrom.nextId - cfsInstance.metadata.resource.hash - 1493090436 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 1493090436 == 0);
			}
		});
		invariants1999.add(new Invariant(1661, "2 * CFMetadataInstance.partitionColumns.statics.complexIdx + CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.fileIndexGenerator - 1.731353224509E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 1.731353224509E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1662, "37 * CFMetadataInstance.resource.hash - 37 * CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.allocatingFrom.fd + 5.524434494E10 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (37 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 37 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() + 5.524434494E10 == 0);
			}
		});
		invariants1999.add(new Invariant(1663, "CFMetadataInstance.resource.hash - CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.allocatingFrom.id + 1.732846314906E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + 1.732846314906E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1664, "CFMetadataInstance.resource.hash - CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.allocatingFrom.nextId + 1493090436 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() + 1493090436 == 0);
			}
		});
		invariants1999.add(new Invariant(1665, "36 * CFMetadataInstance.resource.hash - 36 * CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.availableSegment.fd + 5.375125415E10 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (36 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 36 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() + 5.375125415E10 == 0);
			}
		});
		invariants1999.add(new Invariant(1666, "CFMetadataInstance.resource.hash - CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.availableSegment.id + 1.732846314907E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + 1.732846314907E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1667, "CFMetadataInstance.resource.hash - CommitLog.instance.executor.pending + cfsInstance.fileIndexGenerator + 1493090397 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 1493090397 == 0);
			}
		});
		invariants1999.add(new Invariant(1668, "73 * CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.allocatingFrom.fd + 37 * CommitLog.instance.segmentManager.allocatingFrom.id - 6.4060069306655E13 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (73 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() + 37 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - 6.4060069306655E13 == 0);
			}
		});
		invariants1999.add(new Invariant(1669, "73 * CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.allocatingFrom.fd + 37 * CommitLog.instance.segmentManager.availableSegment.id - 6.4060069306692E13 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (73 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() + 37 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - 6.4060069306692E13 == 0);
			}
		});
		invariants1999.add(new Invariant(1670, "37 * CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.allocatingFrom.fd - 37 * cfsInstance.metadata.resource.hash - 5.524434494E10 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (37 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() - 37 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 5.524434494E10 == 0);
			}
		});
		invariants1999.add(new Invariant(1671, "CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.fileIndexGenerator + 1.731353224508E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 1.731353224508E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1672, "CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.allocatingFrom.nextId - cfsInstance.metadata.resource.hash - 1493090436 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 1493090436 == 0);
			}
		});
		invariants1999.add(new Invariant(1673, "36 * CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.availableSegment.fd - 36 * cfsInstance.metadata.resource.hash - 5.375125415E10 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (36 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() - 36 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 5.375125415E10 == 0);
			}
		});
		invariants1999.add(new Invariant(1674, "CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.fileIndexGenerator + 1.731353224509E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 1.731353224509E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1675, "CommitLog.instance.executor.pending - cfsInstance.fileIndexGenerator - cfsInstance.metadata.resource.hash - 1493090397 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 1493090397 == 0);
			}
		});
		invariants1999.add(new Invariant(1676, "CommitLog.instance.executor.pending + 2 * cfsInstance.metadata.resource.hash + cfsInstance.readOrdering.current.id + 2.986180794E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + 2 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() + 2.986180794E9 == 0);
			}
		});
		invariants1999.add(new Invariant(1677, "CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.fileIndexGenerator - 2 * cfsInstance.metadata.resource.hash - 1.734339405302E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 1.734339405302E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1678, "CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.readOrdering.current.id - daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224505E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224505E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1679, "CommitLog.instance.segmentManager.allocatingFrom.nextId - cfsInstance.fileIndexGenerator - 2 * cfsInstance.metadata.resource.hash - 2.986180832E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 2.986180832E9 == 0);
			}
		});
		invariants1999.add(new Invariant(1680, "CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.fileIndexGenerator - 2 * cfsInstance.metadata.resource.hash - 1.734339405303E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 1.734339405303E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1681, "CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.readOrdering.current.id - daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224506E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224506E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1682, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK == CFMetadataInstance.partitionColumns.regulars.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() == ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1683, "CFMetadataInstance.resource.hash == -1493090402 || CFMetadataInstance.resource.hash == -1493090401"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == -1493090402 || ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == -1493090401);
			}
		});
		invariants1999.add(new Invariant(1684, "CommitLog.instance.segmentManager.allocatingFrom.fd == 180 || CommitLog.instance.segmentManager.allocatingFrom.fd == 181 || CommitLog.instance.segmentManager.allocatingFrom.fd == 254"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 180 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 181 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 254);
			}
		});
		invariants1999.add(new Invariant(1685, "CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224499L || CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224500L || CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224501L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224499L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224500L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224501L);
			}
		});
		invariants1999.add(new Invariant(1686, "CommitLog.instance.segmentManager.allocatingFrom.nextId == 29 || CommitLog.instance.segmentManager.allocatingFrom.nextId == 30 || CommitLog.instance.segmentManager.allocatingFrom.nextId == 31"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 29 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 30 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 31);
			}
		});
		invariants1999.add(new Invariant(1687, "CommitLog.instance.segmentManager.availableSegment.fd == 181 || CommitLog.instance.segmentManager.availableSegment.fd == 215 || CommitLog.instance.segmentManager.availableSegment.fd == 254"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 181 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 215 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 254);
			}
		});
		invariants1999.add(new Invariant(1688, "CommitLog.instance.segmentManager.availableSegment.id == 1731353224500L || CommitLog.instance.segmentManager.availableSegment.id == 1731353224501L || CommitLog.instance.segmentManager.availableSegment.id == 1731353224502L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224500L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224501L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224502L);
			}
		});
		invariants1999.add(new Invariant(1689, "cfsInstance.metadata.resource.hash == -1493090402 || cfsInstance.metadata.resource.hash == -1493090401"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == -1493090402 || ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == -1493090401);
			}
		});
		invariants1999.add(new Invariant(1690, "cfsInstance.readOrdering.current.id >= 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() >= 0);
			}
		});
		invariants1999.add(new Invariant(1691, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK >= cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() >= ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1692, "CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize >= cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue() >= ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1693, "cfsInstance.fileIndexGenerator >= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() >= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1694, "CFMetadataInstance.partitionColumns.statics.complexIdx + CommitLog.instance.segmentManager.allocatingFrom.nextId - cfsInstance.metadata.resource.hash - 1493090432 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 1493090432 == 0);
			}
		});
		invariants1999.add(new Invariant(1695, "387973120 * CFMetadataInstance.resource.hash - 5242880 * CommitLog.instance.segmentManager.allocatingFrom.fd - 73 * CommitLog.instance.segmentManager.size + 5.7927894341517312E17 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (387973120 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() - 73 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 5.7927894341517312E17 == 0);
			}
		});
		invariants1999.add(new Invariant(1696, "191365120 * CFMetadataInstance.resource.hash + 2621440 * CommitLog.instance.segmentManager.availableSegment.fd - 17 * CommitLog.instance.segmentManager.size + 2.857254234619904E17 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (191365120 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() + 2621440 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() - 17 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 2.857254234619904E17 == 0);
			}
		});
		invariants1999.add(new Invariant(1697, "6 * CommitLog.instance.executor.lastSyncedAt - 101303107 * CommitLog.instance.executor.written - 168593439 * resultSetInstance.metadata.columnCount - 5.36663600159258E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (6 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 101303107 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() - 168593439 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() - 5.36663600159258E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1698, "816 * CommitLog.instance.executor.lastSyncedAt - 101303107 * CommitLog.instance.segmentManager.allocatingFrom.allocatePosition - 2.2928707704E10 * resultSetInstance.metadata.columnCount - 7.3000215673202528E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (816 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 101303107 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() - 2.2928707704E10 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() - 7.3000215673202528E16 == 0);
			}
		});
		invariants1999.add(new Invariant(1699, "816 * CommitLog.instance.executor.lastSyncedAt - 101303107 * CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset - 2.2928707704E10 * resultSetInstance.metadata.columnCount - 7.3000216483627392E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (816 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 101303107 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() - 2.2928707704E10 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() - 7.3000216483627392E16 == 0);
			}
		});
		invariants1999.add(new Invariant(1700, "816 * CommitLog.instance.executor.lastSyncedAt - 101303107 * CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset - 2.2928707704E10 * resultSetInstance.metadata.columnCount - 7.3000216483627392E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (816 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 101303107 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() - 2.2928707704E10 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() - 7.3000216483627392E16 == 0);
			}
		});
		invariants1999.add(new Invariant(1701, "2 * CommitLog.instance.executor.lastSyncedAt - 56197813 * resultSetInstance.metadata.columnCount + 101303107 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.78922444846942E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 56197813 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() + 101303107 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.78922444846942E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1702, "2 * CommitLog.instance.executor.lastSyncedAt - 56197813 * resultSetInstance.metadata.columnCount + 101303107 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1 - 1.78922343543835E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 56197813 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() + 101303107 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1 - 1.78922343543835E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1703, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition - 233 * CommitLog.instance.segmentManager.allocatingFrom.id - CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset + 4.03405301308259E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() - 233 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() + 4.03405301308259E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1704, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition - 90 * CommitLog.instance.segmentManager.allocatingFrom.id - CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset + 1.55821790204902E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() - 90 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() + 1.55821790204902E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1705, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition - CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset - 233 * CommitLog.instance.segmentManager.availableSegment.id + 4.03405301308492E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() - 233 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + 4.03405301308492E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1706, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition - CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset - 90 * CommitLog.instance.segmentManager.availableSegment.id + 1.55821790204992E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() - 90 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + 1.55821790204992E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1707, "5242880 * CommitLog.instance.segmentManager.allocatingFrom.fd + 73 * CommitLog.instance.segmentManager.size - 387973120 * cfsInstance.metadata.resource.hash - 5.7927894341517312E17 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() + 73 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 387973120 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 5.7927894341517312E17 == 0);
			}
		});
		invariants1999.add(new Invariant(1708, "CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.fileIndexGenerator - 4 * cfsInstance.metadata.resource.hash - 1.737325586104E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 4 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 1.737325586104E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1709, "CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.readOrdering.current.id - daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224495E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224495E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1710, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset - CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset - 90 * CommitLog.instance.segmentManager.availableSegment.id + 1.5582179020499997E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() - 90 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + 1.5582179020499997E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1711, "CommitLog.instance.segmentManager.allocatingFrom.nextId - cfsInstance.fileIndexGenerator - 4 * cfsInstance.metadata.resource.hash - 5.972361634E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 4 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 5.972361634E9 == 0);
			}
		});
		invariants1999.add(new Invariant(1712, "2621440 * CommitLog.instance.segmentManager.availableSegment.fd - 17 * CommitLog.instance.segmentManager.size + 191365120 * cfsInstance.metadata.resource.hash + 2.857254234619904E17 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2621440 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() - 17 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 191365120 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 2.857254234619904E17 == 0);
			}
		});
		invariants1999.add(new Invariant(1713, "CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.fileIndexGenerator - 4 * cfsInstance.metadata.resource.hash - 1.737325586105E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 4 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 1.737325586105E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1714, "CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.readOrdering.current.id - daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224496E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224496E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1715, "CommitLog.instance.segmentManager.size - 2621440 * cfsInstance.fileIndexGenerator - 7864320 * cfsInstance.metadata.resource.hash - 1.174214071287808E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 2621440 * ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 7864320 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 1.174214071287808E16 == 0);
			}
		});
		invariants1999.add(new Invariant(1716, "CFMetadataInstance.allColumnFilter.isFetchAll == CFMetadataInstance.compactValueColumn.type.isByteOrderComparable"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.type.isByteOrderComparable"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1717, "CFMetadataInstance.compactValueColumn.hash == -40591990"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() == -40591990);
			}
		});
		invariants1999.add(new Invariant(1718, "CFMetadataInstance.compactValueColumn.type.isByteOrderComparable == true"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.type.isByteOrderComparable"))).booleanValue() == true);
			}
		});
		invariants1999.add(new Invariant(1719, "CFMetadataInstance.partitionColumns.statics.complexIdx == 0 || CFMetadataInstance.partitionColumns.statics.complexIdx == 2"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == 0 || ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == 2);
			}
		});
		invariants1999.add(new Invariant(1720, "CFMetadataInstance.resource.hash == 2144393069 || CFMetadataInstance.resource.hash == 2144393070"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == 2144393069 || ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == 2144393070);
			}
		});
		invariants1999.add(new Invariant(1721, "CommitLog.instance.segmentManager.allocatingFrom.fd == 177 || CommitLog.instance.segmentManager.allocatingFrom.fd == 180 || CommitLog.instance.segmentManager.allocatingFrom.fd == 229"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 177 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 180 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 229);
			}
		});
		invariants1999.add(new Invariant(1722, "CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224479L || CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224480L || CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224481L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224479L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224480L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224481L);
			}
		});
		invariants1999.add(new Invariant(1723, "CommitLog.instance.segmentManager.allocatingFrom.nextId == 9 || CommitLog.instance.segmentManager.allocatingFrom.nextId == 10 || CommitLog.instance.segmentManager.allocatingFrom.nextId == 11"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 9 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 10 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 11);
			}
		});
		invariants1999.add(new Invariant(1724, "CommitLog.instance.segmentManager.availableSegment.fd == 177 || CommitLog.instance.segmentManager.availableSegment.fd == 178 || CommitLog.instance.segmentManager.availableSegment.fd == 229"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 177 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 178 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 229);
			}
		});
		invariants1999.add(new Invariant(1725, "CommitLog.instance.segmentManager.availableSegment.id == 1731353224480L || CommitLog.instance.segmentManager.availableSegment.id == 1731353224481L || CommitLog.instance.segmentManager.availableSegment.id == 1731353224482L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224480L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224481L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224482L);
			}
		});
		invariants1999.add(new Invariant(1726, "cfsInstance.metadata.compactValueColumn.hash == -40591990"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue() == -40591990);
			}
		});
		invariants1999.add(new Invariant(1727, "cfsInstance.metadata.resource.hash == 2144393069 || cfsInstance.metadata.resource.hash == 2144393070"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == 2144393069 || ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == 2144393070);
			}
		});
		invariants1999.add(new Invariant(1728, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK >= CFMetadataInstance.partitionColumns.statics.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() >= ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1729, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK < CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1730, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1731, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK < CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1732, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1733, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1734, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK >= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() >= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1735, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK != CFMetadataInstance.partitionColumns.statics.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() != ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1736, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK < CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1737, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1738, "CFMetadataInstance.compactValueColumn.NO_POSITION < CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1739, "CFMetadataInstance.compactValueColumn.NO_POSITION < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1740, "CFMetadataInstance.compactValueColumn.hash < CFMetadataInstance.partitionColumns.statics.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1741, "CFMetadataInstance.compactValueColumn.hash < CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1742, "CFMetadataInstance.compactValueColumn.hash < CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1743, "CFMetadataInstance.compactValueColumn.hash < CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1744, "CFMetadataInstance.compactValueColumn.hash < CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1745, "CFMetadataInstance.compactValueColumn.hash < CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1746, "CFMetadataInstance.compactValueColumn.hash < CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1747, "CFMetadataInstance.compactValueColumn.hash < CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1748, "CFMetadataInstance.compactValueColumn.hash < CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1749, "CFMetadataInstance.compactValueColumn.hash < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1750, "CFMetadataInstance.compactValueColumn.hash < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1751, "CFMetadataInstance.compactValueColumn.hash < cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1752, "CFMetadataInstance.compactValueColumn.hash < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1753, "CFMetadataInstance.compactValueColumn.hash < cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1754, "CFMetadataInstance.compactValueColumn.hash < resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1755, "CFMetadataInstance.compactValueColumn.hash < daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.hash"))).intValue() < daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1756, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE < CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1757, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE > CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1758, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1759, "CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE % resultSetInstance.metadata.columnCount == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.compactValueColumn.name.EMPTY_SIZE"))).intValue() % ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() == 0);
			}
		});
		invariants1999.add(new Invariant(1760, "CFMetadataInstance.partitionColumns.statics.complexIdx < CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1761, "CFMetadataInstance.partitionColumns.statics.complexIdx > cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1762, "CFMetadataInstance.partitionColumns.statics.complexIdx < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1763, "CFMetadataInstance.partitionColumns.statics.complexIdx != resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() != ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1764, "CFMetadataInstance.partitioner.HEAP_SIZE < CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1765, "CFMetadataInstance.partitioner.HEAP_SIZE < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1766, "CFMetadataInstance.resource.hash > CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1767, "CFMetadataInstance.resource.hash > CommitLog.instance.MAX_MUTATION_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1768, "CFMetadataInstance.resource.hash > CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1769, "CFMetadataInstance.resource.hash > CommitLog.instance.executor.markerIntervalNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1770, "CFMetadataInstance.resource.hash > CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1771, "CFMetadataInstance.resource.hash > CommitLog.instance.executor.syncComplete.NOT_SET"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1772, "CFMetadataInstance.resource.hash > CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1773, "CFMetadataInstance.resource.hash > CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1774, "CFMetadataInstance.resource.hash > CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1775, "CFMetadataInstance.resource.hash > CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1776, "CFMetadataInstance.resource.hash > CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1777, "CFMetadataInstance.resource.hash > CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1778, "CFMetadataInstance.resource.hash > CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1779, "CFMetadataInstance.resource.hash > CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1780, "CFMetadataInstance.resource.hash > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1781, "CFMetadataInstance.resource.hash > CommitLog.instance.segmentManager.availableSegment.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1782, "CFMetadataInstance.resource.hash > CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1783, "CFMetadataInstance.resource.hash > CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1784, "CFMetadataInstance.resource.hash > CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1785, "CFMetadataInstance.resource.hash > CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1786, "CFMetadataInstance.resource.hash > StorageService.instance.RING_DELAY"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1787, "CFMetadataInstance.resource.hash > cfsInstance.compactionStrategyManager.fanout"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1788, "CFMetadataInstance.resource.hash > cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1789, "CFMetadataInstance.resource.hash > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1790, "CFMetadataInstance.resource.hash > cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1791, "CFMetadataInstance.resource.hash > cfsInstance.metadata.compactValueColumn.NO_POSITION"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1792, "CFMetadataInstance.resource.hash > cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1793, "CFMetadataInstance.resource.hash > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1794, "CFMetadataInstance.resource.hash > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1795, "CFMetadataInstance.resource.hash > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1796, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1797, "CommitLog.instance.MAX_MUTATION_SIZE < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1798, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1799, "CommitLog.instance.executor.markerIntervalNanos < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1800, "CommitLog.instance.executor.pending > cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1801, "CommitLog.instance.executor.pending < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1802, "CommitLog.instance.executor.syncComplete.NOT_SET < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1803, "CommitLog.instance.executor.written > cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1804, "CommitLog.instance.executor.written < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1805, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1806, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1807, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition > cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1808, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1809, "CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1810, "CommitLog.instance.segmentManager.allocatingFrom.fd < CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1811, "CommitLog.instance.segmentManager.allocatingFrom.fd < CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1812, "CommitLog.instance.segmentManager.allocatingFrom.fd > cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1813, "CommitLog.instance.segmentManager.allocatingFrom.fd < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1814, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset > cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1815, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1816, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset > cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1817, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1818, "CommitLog.instance.segmentManager.allocatingFrom.nextId > cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1819, "CommitLog.instance.segmentManager.allocatingFrom.nextId < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1820, "CommitLog.instance.segmentManager.allocatingFrom.nextId != resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() != ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1821, "CommitLog.instance.segmentManager.availableSegment.allocatePosition < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1822, "CommitLog.instance.segmentManager.availableSegment.fd > cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1823, "CommitLog.instance.segmentManager.availableSegment.fd < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1824, "CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1825, "CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1826, "CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1827, "CommitLog.instance.segmentManager.size > cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1828, "CommitLog.instance.segmentManager.size < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1829, "StorageService.instance.RING_DELAY < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1830, "cfsInstance.compactionStrategyManager.fanout < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1831, "cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1832, "cfsInstance.fileIndexGenerator > cfsInstance.metadata.compactValueColumn.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1833, "cfsInstance.fileIndexGenerator < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1834, "cfsInstance.indexManager.DEFAULT_PAGE_SIZE < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1835, "cfsInstance.metadata.compactValueColumn.NO_POSITION < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.NO_POSITION"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1836, "cfsInstance.metadata.compactValueColumn.hash < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1837, "cfsInstance.metadata.compactValueColumn.hash < cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1838, "cfsInstance.metadata.compactValueColumn.hash < resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue() < ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1839, "cfsInstance.metadata.compactValueColumn.hash < daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.compactValueColumn.hash"))).intValue() < daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1840, "cfsInstance.metadata.resource.hash > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1841, "cfsInstance.metadata.resource.hash > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1842, "cfsInstance.metadata.resource.hash > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1843, "resultSetInstance.metadata.columnCount != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1844, "CFMetadataInstance.partitionColumns.statics.complexIdx + CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.allocatingFrom.id - 1.731353224481E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - 1.731353224481E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1845, "CFMetadataInstance.partitionColumns.statics.complexIdx + CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.availableSegment.id - 1.731353224482E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - 1.731353224482E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1846, "CFMetadataInstance.partitionColumns.statics.complexIdx + 2 * CommitLog.instance.executor.pending + 2 * cfsInstance.metadata.resource.hash - 4.28878614E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() + 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + 2 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 4.28878614E9 == 0);
			}
		});
		invariants1999.add(new Invariant(1847, "3 * CFMetadataInstance.partitionColumns.statics.complexIdx + 4 * CommitLog.instance.segmentManager.allocatingFrom.id - 2 * cfsInstance.fileIndexGenerator - 6.92541289792E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (3 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() + 4 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 6.92541289792E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1848, "CFMetadataInstance.partitionColumns.statics.complexIdx + 2 * CommitLog.instance.segmentManager.allocatingFrom.nextId - 2 * cfsInstance.metadata.resource.hash + 4.288786118E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() + 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 4.288786118E9 == 0);
			}
		});
		invariants1999.add(new Invariant(1849, "3 * CFMetadataInstance.partitionColumns.statics.complexIdx + 4 * CommitLog.instance.segmentManager.availableSegment.id - 2 * cfsInstance.fileIndexGenerator - 6.925412897924E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (3 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() + 4 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 6.925412897924E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1850, "52 * CFMetadataInstance.resource.hash - 52 * CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.allocatingFrom.fd - 1.11508439411E11 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (52 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 52 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() - 1.11508439411E11 == 0);
			}
		});
		invariants1999.add(new Invariant(1851, "2 * CFMetadataInstance.resource.hash - CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.allocatingFrom.id + 1.727064438341E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + 1.727064438341E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1852, "2 * CFMetadataInstance.resource.hash - CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.allocatingFrom.nextId - 4.288786129E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() - 4.288786129E9 == 0);
			}
		});
		invariants1999.add(new Invariant(1853, "2 * CFMetadataInstance.resource.hash - CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.availableSegment.id + 1.727064438342E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + 1.727064438342E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1854, "2 * CFMetadataInstance.resource.hash - 2 * CommitLog.instance.executor.pending + cfsInstance.readOrdering.current.id - 4.28878614E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - 4.28878614E9 == 0);
			}
		});
		invariants1999.add(new Invariant(1855, "CFMetadataInstance.resource.hash - CommitLog.instance.executor.pending - daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 2144393069 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 2144393069 == 0);
			}
		});
		invariants1999.add(new Invariant(1856, "26 * CFMetadataInstance.resource.hash - CommitLog.instance.segmentManager.allocatingFrom.fd + 26 * cfsInstance.fileIndexGenerator - 5.5754219643E10 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (26 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() + 26 * ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 5.5754219643E10 == 0);
			}
		});
		invariants1999.add(new Invariant(1857, "3 * CFMetadataInstance.resource.hash - 2 * CommitLog.instance.segmentManager.allocatingFrom.id + cfsInstance.fileIndexGenerator + 3.45627326975E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (3 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 3.45627326975E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1858, "3 * CFMetadataInstance.resource.hash - 2 * CommitLog.instance.segmentManager.allocatingFrom.nextId + cfsInstance.fileIndexGenerator - 6.43317919E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (3 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 6.43317919E9 == 0);
			}
		});
		invariants1999.add(new Invariant(1859, "CFMetadataInstance.resource.hash - CommitLog.instance.segmentManager.allocatingFrom.nextId + cfsInstance.metadata.resource.hash - 4.288786129E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 4.288786129E9 == 0);
			}
		});
		invariants1999.add(new Invariant(1860, "272629760 * CFMetadataInstance.resource.hash - 5242880 * CommitLog.instance.segmentManager.availableSegment.fd - 51 * CommitLog.instance.segmentManager.size - 5.8462536628436992E17 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (272629760 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() - 51 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 5.8462536628436992E17 == 0);
			}
		});
		invariants1999.add(new Invariant(1861, "3 * CFMetadataInstance.resource.hash - 2 * CommitLog.instance.segmentManager.availableSegment.id + cfsInstance.fileIndexGenerator + 3.456273269752E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (3 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 3.456273269752E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1862, "2 * CommitLog.instance.executor.lastSyncedAt - 60717407 * resultSetInstance.metadata.columnCount + 487227648 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.78691247621199E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 60717407 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() + 487227648 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.78691247621199E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1863, "2 * CommitLog.instance.executor.lastSyncedAt - 60717407 * resultSetInstance.metadata.columnCount + 487227648 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1 - 1.78690760393551E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 60717407 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() + 487227648 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1 - 1.78690760393551E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1864, "103 * CommitLog.instance.executor.pending - 52 * CommitLog.instance.segmentManager.allocatingFrom.id + CommitLog.instance.segmentManager.availableSegment.fd + 9.0030367672731E13 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (103 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - 52 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() + 9.0030367672731E13 == 0);
			}
		});
		invariants1999.add(new Invariant(1865, "2621440 * CommitLog.instance.executor.pending - 2621440 * CommitLog.instance.segmentManager.allocatingFrom.id + CommitLog.instance.segmentManager.size + 4.538638596767744E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2621440 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - 2621440 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 4.538638596767744E18 == 0);
			}
		});
		invariants1999.add(new Invariant(1866, "CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.allocatingFrom.id + 2 * cfsInstance.metadata.resource.hash + 1.727064438341E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + 2 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 1.727064438341E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1867, "2 * CommitLog.instance.executor.pending - 2 * CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.readOrdering.current.id + 3.46270644896E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() + 3.46270644896E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1868, "CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.allocatingFrom.nextId + 2 * cfsInstance.metadata.resource.hash - 4.288786129E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() + 2 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 4.288786129E9 == 0);
			}
		});
		invariants1999.add(new Invariant(1869, "103 * CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.availableSegment.fd - 52 * CommitLog.instance.segmentManager.availableSegment.id + 9.0030367672783E13 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (103 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() - 52 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + 9.0030367672783E13 == 0);
			}
		});
		invariants1999.add(new Invariant(1870, "52 * CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.availableSegment.fd + 52 * cfsInstance.metadata.resource.hash - 1.11508439411E11 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (52 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() + 52 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 1.11508439411E11 == 0);
			}
		});
		invariants1999.add(new Invariant(1871, "2621440 * CommitLog.instance.executor.pending - 2621440 * CommitLog.instance.segmentManager.availableSegment.id + CommitLog.instance.segmentManager.size + 4.5386385967703654E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2621440 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - 2621440 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 4.5386385967703654E18 == 0);
			}
		});
		invariants1999.add(new Invariant(1872, "CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.availableSegment.id + 2 * cfsInstance.metadata.resource.hash + 1.727064438342E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + 2 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 1.727064438342E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1873, "2 * CommitLog.instance.executor.pending - 2 * CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.readOrdering.current.id + 3.462706448962E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() + 3.462706448962E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1874, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition - 90 * CommitLog.instance.segmentManager.allocatingFrom.id - CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset + 1.55821790203102E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() - 90 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() + 1.55821790203102E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1875, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition - CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset - 90 * CommitLog.instance.segmentManager.availableSegment.id + 1.55821790203192E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() - 90 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + 1.55821790203192E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1876, "CommitLog.instance.segmentManager.allocatingFrom.fd - 26 * cfsInstance.fileIndexGenerator - 26 * cfsInstance.metadata.resource.hash + 5.5754219643E10 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() - 26 * ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 26 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 5.5754219643E10 == 0);
			}
		});
		invariants1999.add(new Invariant(1877, "2 * CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.fileIndexGenerator - 3 * cfsInstance.metadata.resource.hash - 3.45627326975E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 3 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 3.45627326975E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1878, "CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.readOrdering.current.id - daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224477E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224477E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1879, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset - CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset - 90 * CommitLog.instance.segmentManager.availableSegment.id + 1.558217902032E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() - 90 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + 1.558217902032E14 == 0);
			}
		});
		invariants1999.add(new Invariant(1880, "2 * CommitLog.instance.segmentManager.allocatingFrom.nextId - cfsInstance.fileIndexGenerator - 3 * cfsInstance.metadata.resource.hash + 6.43317919E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 3 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 6.43317919E9 == 0);
			}
		});
		invariants1999.add(new Invariant(1881, "5242880 * CommitLog.instance.segmentManager.availableSegment.fd + 51 * CommitLog.instance.segmentManager.size - 272629760 * cfsInstance.metadata.resource.hash + 5.8462536628436992E17 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() + 51 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 272629760 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 5.8462536628436992E17 == 0);
			}
		});
		invariants1999.add(new Invariant(1882, "2 * CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.fileIndexGenerator - 3 * cfsInstance.metadata.resource.hash - 3.456273269752E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 3 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 3.456273269752E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1883, "CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.readOrdering.current.id - daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224478E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224478E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1884, "CFMetadataInstance.partitionColumns.regulars.complexIdx == 1 || CFMetadataInstance.partitionColumns.regulars.complexIdx == 2"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() == 1 || ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() == 2);
			}
		});
		invariants1999.add(new Invariant(1885, "CFMetadataInstance.resource.hash == 2144393076 || CFMetadataInstance.resource.hash == 2144393077"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == 2144393076 || ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == 2144393077);
			}
		});
		invariants1999.add(new Invariant(1886, "CommitLog.instance.segmentManager.allocatingFrom.fd == 179 || CommitLog.instance.segmentManager.allocatingFrom.fd == 183 || CommitLog.instance.segmentManager.allocatingFrom.fd == 185"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 179 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 183 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 185);
			}
		});
		invariants1999.add(new Invariant(1887, "CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224493L || CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224494L || CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224495L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224493L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224494L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224495L);
			}
		});
		invariants1999.add(new Invariant(1888, "CommitLog.instance.segmentManager.allocatingFrom.nextId == 23 || CommitLog.instance.segmentManager.allocatingFrom.nextId == 24 || CommitLog.instance.segmentManager.allocatingFrom.nextId == 25"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 23 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 24 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 25);
			}
		});
		invariants1999.add(new Invariant(1889, "CommitLog.instance.segmentManager.availableSegment.fd == 179 || CommitLog.instance.segmentManager.availableSegment.fd == 183 || CommitLog.instance.segmentManager.availableSegment.fd == 217"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 179 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 183 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 217);
			}
		});
		invariants1999.add(new Invariant(1890, "CommitLog.instance.segmentManager.availableSegment.id == 1731353224494L || CommitLog.instance.segmentManager.availableSegment.id == 1731353224495L || CommitLog.instance.segmentManager.availableSegment.id == 1731353224496L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224494L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224495L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224496L);
			}
		});
		invariants1999.add(new Invariant(1891, "cfsInstance.metadata.resource.hash == 2144393076 || cfsInstance.metadata.resource.hash == 2144393077"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == 2144393076 || ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == 2144393077);
			}
		});
		invariants1999.add(new Invariant(1892, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK >= CFMetadataInstance.partitionColumns.regulars.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() >= ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1893, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1894, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK <= CFMetadataInstance.partitionColumns.regulars.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() <= ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1895, "CFMetadataInstance.partitionColumns.regulars.complexIdx > CFMetadataInstance.partitionColumns.statics.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1896, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1897, "cfsInstance.fileIndexGenerator % CFMetadataInstance.partitionColumns.regulars.complexIdx == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() % ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() == 0);
			}
		});
		invariants1999.add(new Invariant(1898, "CFMetadataInstance.partitionColumns.regulars.complexIdx < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1899, "CFMetadataInstance.partitioner.HEAP_SIZE != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1900, "CFMetadataInstance.partitioner.HEAP_SIZE != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1901, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1902, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1903, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1904, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1905, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1906, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1907, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition != StorageService.instance.RING_DELAY"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() != ((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1908, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition != cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1909, "CommitLog.instance.segmentManager.allocatingFrom.fd != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1910, "CommitLog.instance.segmentManager.allocatingFrom.fd != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1911, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset != StorageService.instance.RING_DELAY"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() != ((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1912, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset != cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1913, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset != StorageService.instance.RING_DELAY"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() != ((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1914, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset != cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1915, "CommitLog.instance.segmentManager.allocatingFrom.nextId != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1916, "CommitLog.instance.segmentManager.allocatingFrom.nextId != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1917, "CommitLog.instance.segmentManager.availableSegment.allocatePosition != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1918, "CommitLog.instance.segmentManager.availableSegment.allocatePosition != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1919, "CommitLog.instance.segmentManager.availableSegment.fd != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1920, "CommitLog.instance.segmentManager.availableSegment.fd != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1921, "CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1922, "CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1923, "cfsInstance.compactionStrategyManager.fanout != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1924, "cfsInstance.compactionStrategyManager.fanout != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1925, "cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants1999.add(new Invariant(1926, "cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1927, "cfsInstance.fileIndexGenerator != resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() != ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1928, "cfsInstance.sampleLatencyNanos != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants1999.add(new Invariant(1929, "CFMetadataInstance.partitionColumns.regulars.complexIdx + CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.allocatingFrom.id - 1.731353224496E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - 1.731353224496E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1930, "CFMetadataInstance.partitionColumns.regulars.complexIdx + CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.availableSegment.id - 1.731353224497E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - 1.731353224497E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1931, "CFMetadataInstance.partitionColumns.regulars.complexIdx + CommitLog.instance.segmentManager.allocatingFrom.nextId - cfsInstance.metadata.resource.hash + 2144393051 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 2144393051 == 0);
			}
		});
		invariants1999.add(new Invariant(1932, "2 * CFMetadataInstance.resource.hash - 2 * CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.allocatingFrom.fd - 4.288786335E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() - 4.288786335E9 == 0);
			}
		});
		invariants1999.add(new Invariant(1933, "CFMetadataInstance.resource.hash - CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.allocatingFrom.id + 1.729208831418E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + 1.729208831418E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1934, "CFMetadataInstance.resource.hash - CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.allocatingFrom.nextId - 2144393052 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() - 2144393052 == 0);
			}
		});
		invariants1999.add(new Invariant(1935, "4 * CFMetadataInstance.resource.hash - 4 * CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.availableSegment.fd - 8.577572483E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (4 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 4 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() - 8.577572483E9 == 0);
			}
		});
		invariants1999.add(new Invariant(1936, "CFMetadataInstance.resource.hash - CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.availableSegment.id + 1.729208831419E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + 1.729208831419E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1937, "CFMetadataInstance.resource.hash - CommitLog.instance.executor.pending - cfsInstance.readOrdering.current.id - 2144393073 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - 2144393073 == 0);
			}
		});
		invariants1999.add(new Invariant(1938, "CFMetadataInstance.resource.hash + CommitLog.instance.executor.pending + daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 2144393077 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 2144393077 == 0);
			}
		});
		invariants1999.add(new Invariant(1939, "CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.allocatingFrom.id + cfsInstance.readOrdering.current.id + 1.73135322449E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() + 1.73135322449E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1940, "CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.allocatingFrom.id + daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224494E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224494E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1941, "CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.availableSegment.id + cfsInstance.readOrdering.current.id + 1.731353224491E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() + 1.731353224491E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1942, "CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.availableSegment.id + daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224495E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224495E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1943, "2 * CommitLog.instance.segmentManager.allocatingFrom.fd + 6 * CommitLog.instance.segmentManager.allocatingFrom.id + cfsInstance.fileIndexGenerator - 1.038811934733E13 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() + 6 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 1.038811934733E13 == 0);
			}
		});
		invariants1999.add(new Invariant(1944, "2 * CommitLog.instance.segmentManager.allocatingFrom.fd + 6 * CommitLog.instance.segmentManager.availableSegment.id + cfsInstance.fileIndexGenerator - 1.0388119347336E13 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() + 6 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 1.0388119347336E13 == 0);
			}
		});
		invariants1999.add(new Invariant(1945, "CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.readOrdering.current.id - daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.73135322449E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.73135322449E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1946, "CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.readOrdering.current.id - daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224491E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224491E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1947, "CFMetadataInstance.resource.hash == 2144393075 || CFMetadataInstance.resource.hash == 2144393076"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == 2144393075 || ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == 2144393076);
			}
		});
		invariants1999.add(new Invariant(1948, "CommitLog.instance.segmentManager.allocatingFrom.fd == 177 || CommitLog.instance.segmentManager.allocatingFrom.fd == 180 || CommitLog.instance.segmentManager.allocatingFrom.fd == 185"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 177 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 180 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 185);
			}
		});
		invariants1999.add(new Invariant(1949, "CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224491L || CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224492L || CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224493L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224491L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224492L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224493L);
			}
		});
		invariants1999.add(new Invariant(1950, "CommitLog.instance.segmentManager.allocatingFrom.nextId == 21 || CommitLog.instance.segmentManager.allocatingFrom.nextId == 22 || CommitLog.instance.segmentManager.allocatingFrom.nextId == 23"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 21 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 22 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 23);
			}
		});
		invariants1999.add(new Invariant(1951, "CommitLog.instance.segmentManager.availableSegment.fd == 180 || CommitLog.instance.segmentManager.availableSegment.fd == 183 || CommitLog.instance.segmentManager.availableSegment.fd == 185"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 180 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 183 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 185);
			}
		});
		invariants1999.add(new Invariant(1952, "CommitLog.instance.segmentManager.availableSegment.id == 1731353224492L || CommitLog.instance.segmentManager.availableSegment.id == 1731353224493L || CommitLog.instance.segmentManager.availableSegment.id == 1731353224494L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224492L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224493L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224494L);
			}
		});
		invariants1999.add(new Invariant(1953, "cfsInstance.metadata.resource.hash == 2144393075 || cfsInstance.metadata.resource.hash == 2144393076"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == 2144393075 || ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == 2144393076);
			}
		});
		invariants1999.add(new Invariant(1954, "CFMetadataInstance.partitionColumns.regulars.complexIdx != CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1955, "CFMetadataInstance.partitionColumns.regulars.complexIdx >= cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() >= ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1956, "CommitLog.instance.executor.pending != resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() != ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1957, "cfsInstance.sampleLatencyNanos % resultSetInstance.metadata.columnCount == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue() % ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() == 0);
			}
		});
		invariants1999.add(new Invariant(1958, "5242880 * CFMetadataInstance.partitionColumns.regulars.complexIdx - 5242880 * CommitLog.instance.segmentManager.allocatingFrom.id + CommitLog.instance.segmentManager.size + 9.0772771936036454E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() - 5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 9.0772771936036454E18 == 0);
			}
		});
		invariants1999.add(new Invariant(1959, "3 * CFMetadataInstance.partitionColumns.regulars.complexIdx - 2 * CommitLog.instance.segmentManager.allocatingFrom.id + cfsInstance.fileIndexGenerator + 3.462706448978E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (3 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 3.462706448978E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1960, "CFMetadataInstance.partitionColumns.regulars.complexIdx - CommitLog.instance.segmentManager.allocatingFrom.nextId + cfsInstance.metadata.resource.hash - 2144393055 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 2144393055 == 0);
			}
		});
		invariants1999.add(new Invariant(1961, "5242880 * CFMetadataInstance.partitionColumns.regulars.complexIdx - 5242880 * CommitLog.instance.segmentManager.availableSegment.id + CommitLog.instance.segmentManager.size + 9.0772771936088883E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() - 5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 9.0772771936088883E18 == 0);
			}
		});
		invariants1999.add(new Invariant(1962, "3 * CFMetadataInstance.partitionColumns.regulars.complexIdx - 2 * CommitLog.instance.segmentManager.availableSegment.id + cfsInstance.fileIndexGenerator + 3.46270644898E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (3 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 3.46270644898E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1963, "5242880 * CFMetadataInstance.resource.hash + 2621440 * CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.size - 1.124279558078464E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() + 2621440 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 1.124279558078464E16 == 0);
			}
		});
		invariants1999.add(new Invariant(1964, "2 * CFMetadataInstance.resource.hash + CommitLog.instance.executor.pending - 2 * cfsInstance.readOrdering.current.id - 4.288786148E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - 4.288786148E9 == 0);
			}
		});
		invariants1999.add(new Invariant(1965, "2 * CFMetadataInstance.resource.hash + CommitLog.instance.executor.pending + 2 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 4.288786152E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + 2 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 4.288786152E9 == 0);
			}
		});
		invariants1999.add(new Invariant(1966, "26214400 * CFMetadataInstance.resource.hash - 5242880 * CommitLog.instance.segmentManager.allocatingFrom.fd + 3 * CommitLog.instance.segmentManager.size - 5.621397692874752E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (26214400 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() + 3 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 5.621397692874752E16 == 0);
			}
		});
		invariants1999.add(new Invariant(1967, "11 * CFMetadataInstance.resource.hash - 2 * CommitLog.instance.segmentManager.allocatingFrom.fd + 5 * cfsInstance.fileIndexGenerator - 2.3588323476E10 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (11 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() + 5 * ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 2.3588323476E10 == 0);
			}
		});
		invariants1999.add(new Invariant(1968, "5242880 * CFMetadataInstance.resource.hash - 5242880 * CommitLog.instance.segmentManager.allocatingFrom.id + CommitLog.instance.segmentManager.size + 9.0660343980438323E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 9.0660343980438323E18 == 0);
			}
		});
		invariants1999.add(new Invariant(1969, "3 * CFMetadataInstance.resource.hash - 2 * CommitLog.instance.segmentManager.allocatingFrom.id + cfsInstance.fileIndexGenerator + 3.456273269756E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (3 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 3.456273269756E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1970, "5242880 * CFMetadataInstance.resource.hash - 5242880 * CommitLog.instance.segmentManager.allocatingFrom.nextId + CommitLog.instance.segmentManager.size - 1.124279546544128E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 1.124279546544128E16 == 0);
			}
		});
		invariants1999.add(new Invariant(1971, "3 * CFMetadataInstance.resource.hash - 2 * CommitLog.instance.segmentManager.allocatingFrom.nextId + cfsInstance.fileIndexGenerator - 6.433179184E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (3 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 6.433179184E9 == 0);
			}
		});
		invariants1999.add(new Invariant(1972, "5242880 * CFMetadataInstance.resource.hash - 1048576 * CommitLog.instance.segmentManager.availableSegment.fd + CommitLog.instance.segmentManager.size - 1.124279538679808E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 1048576 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 1.124279538679808E16 == 0);
			}
		});
		invariants1999.add(new Invariant(1973, "5242880 * CFMetadataInstance.resource.hash - 5242880 * CommitLog.instance.segmentManager.availableSegment.id + CommitLog.instance.segmentManager.size + 9.0660343980490752E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 9.0660343980490752E18 == 0);
			}
		});
		invariants1999.add(new Invariant(1974, "3 * CFMetadataInstance.resource.hash - 2 * CommitLog.instance.segmentManager.availableSegment.id + cfsInstance.fileIndexGenerator + 3.456273269758E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (3 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 3.456273269758E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1975, "2621440 * CFMetadataInstance.resource.hash - CommitLog.instance.segmentManager.size + 2621440 * cfsInstance.fileIndexGenerator - 5.62139777466368E15 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2621440 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 2621440 * ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 5.62139777466368E15 == 0);
			}
		});
		invariants1999.add(new Invariant(1976, "1250000000 * CFMetadataInstance.resource.hash - 1250000000 * cfsInstance.readOrdering.current.id - cfsInstance.sampleLatencyNanos - 2.6804913424999997E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (1250000000 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 1250000000 * ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue() - 2.6804913424999997E18 == 0);
			}
		});
		invariants1999.add(new Invariant(1977, "CommitLog.instance.executor.lastSyncedAt - 28089917 * resultSetInstance.metadata.columnCount + 224674956 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 8.9406998411439E13 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 28089917 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() + 224674956 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 8.9406998411439E13 == 0);
			}
		});
		invariants1999.add(new Invariant(1978, "CommitLog.instance.executor.lastSyncedAt - 28089917 * resultSetInstance.metadata.columnCount + 224674956 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1 - 8.9406773736483E13 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 28089917 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() + 224674956 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1 - 8.9406773736483E13 == 0);
			}
		});
		invariants1999.add(new Invariant(1979, "CommitLog.instance.executor.pending + 2 * CommitLog.instance.segmentManager.allocatingFrom.id - 2 * cfsInstance.readOrdering.current.id - 3.46270644898E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - 3.46270644898E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1980, "CommitLog.instance.executor.pending + 2 * CommitLog.instance.segmentManager.allocatingFrom.id + 2 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 3.462706448984E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + 2 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 3.462706448984E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1981, "CommitLog.instance.executor.pending + 2 * CommitLog.instance.segmentManager.availableSegment.id - 2 * cfsInstance.readOrdering.current.id - 3.462706448982E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - 3.462706448982E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1982, "CommitLog.instance.executor.pending + 2 * CommitLog.instance.segmentManager.availableSegment.id + 2 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 3.462706448986E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + 2 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 3.462706448986E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1983, "5242880 * CommitLog.instance.segmentManager.allocatingFrom.fd - 3 * CommitLog.instance.segmentManager.size - 26214400 * cfsInstance.metadata.resource.hash + 5.621397692874752E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() - 3 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 26214400 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 5.621397692874752E16 == 0);
			}
		});
		invariants1999.add(new Invariant(1984, "2 * CommitLog.instance.segmentManager.allocatingFrom.fd - 5 * cfsInstance.fileIndexGenerator - 11 * cfsInstance.metadata.resource.hash + 2.3588323476E10 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() - 5 * ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 11 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 2.3588323476E10 == 0);
			}
		});
		invariants1999.add(new Invariant(1985, "5242880 * CommitLog.instance.segmentManager.allocatingFrom.id - 3 * CommitLog.instance.segmentManager.size + 5242880 * cfsInstance.fileIndexGenerator - 9.0772771935931597E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - 3 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 5242880 * ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 9.0772771935931597E18 == 0);
			}
		});
		invariants1999.add(new Invariant(1986, "5242880 * CommitLog.instance.segmentManager.allocatingFrom.id - CommitLog.instance.segmentManager.size - 5242880 * cfsInstance.metadata.resource.hash - 9.0660343980438323E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 5242880 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 9.0660343980438323E18 == 0);
			}
		});
		invariants1999.add(new Invariant(1987, "2 * CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.fileIndexGenerator - 3 * cfsInstance.metadata.resource.hash - 3.456273269756E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 3 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 3.456273269756E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1988, "CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.readOrdering.current.id - daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224489E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224489E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1989, "5242880 * CommitLog.instance.segmentManager.allocatingFrom.nextId - CommitLog.instance.segmentManager.size - 5242880 * cfsInstance.metadata.resource.hash + 1.124279546544128E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 5242880 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 1.124279546544128E16 == 0);
			}
		});
		invariants1999.add(new Invariant(1990, "2 * CommitLog.instance.segmentManager.allocatingFrom.nextId - cfsInstance.fileIndexGenerator - 3 * cfsInstance.metadata.resource.hash + 6.433179184E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 3 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 6.433179184E9 == 0);
			}
		});
		invariants1999.add(new Invariant(1991, "1048576 * CommitLog.instance.segmentManager.availableSegment.fd - CommitLog.instance.segmentManager.size - 5242880 * cfsInstance.metadata.resource.hash + 1.124279538679808E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (1048576 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 5242880 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 1.124279538679808E16 == 0);
			}
		});
		invariants1999.add(new Invariant(1992, "5242880 * CommitLog.instance.segmentManager.availableSegment.id - 3 * CommitLog.instance.segmentManager.size + 5242880 * cfsInstance.fileIndexGenerator - 9.0772771935984026E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - 3 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 5242880 * ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 9.0772771935984026E18 == 0);
			}
		});
		invariants1999.add(new Invariant(1993, "5242880 * CommitLog.instance.segmentManager.availableSegment.id - CommitLog.instance.segmentManager.size - 5242880 * cfsInstance.metadata.resource.hash - 9.0660343980490752E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 5242880 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 9.0660343980490752E18 == 0);
			}
		});
		invariants1999.add(new Invariant(1994, "2 * CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.fileIndexGenerator - 3 * cfsInstance.metadata.resource.hash - 3.456273269758E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 3 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 3.456273269758E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1995, "CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.readOrdering.current.id - daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.73135322449E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.73135322449E12 == 0);
			}
		});
		invariants1999.add(new Invariant(1996, "CommitLog.instance.segmentManager.size - 2621440 * cfsInstance.fileIndexGenerator - 2621440 * cfsInstance.metadata.resource.hash + 5.62139777466368E15 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 2621440 * ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 2621440 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 5.62139777466368E15 == 0);
			}
		});
		invariants1999.add(new Invariant(1997, "CFMetadataInstance.isIndex == cfsInstance.diskBoundaryManager.diskBoundaries.isInvalid"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isIndex"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.isInvalid"))).booleanValue());
			}
		});
		invariants1999.add(new Invariant(1998, "CFMetadataInstance.partitionColumns.regulars.complexIdx == CommitLog.instance.executor.syncComplete.NOT_SET"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue());
			}
		});
		invariants1999.add(new Invariant(1999, "CFMetadataInstance.partitionColumns.regulars.complexIdx == CommitLog.instance.segmentManager.bufferPool.usedBuffers"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.usedBuffers"))).intValue());
			}
		});
	}
	static {
installInv1999();	}
}
