package daikon.cassandra;
import daikon.*;
import java.util.Set;
import java.util.ArrayList;
import java.util.List;
//this class is automatically generated by our scripts
public class InvariantPool999{

	public static List<Invariant> invariants999 = new ArrayList<>();

	public static void installInv999(){
		invariants999.add(new Invariant(0, "CFMetadataInstance.allColumnFilter.isFetchAll == CFMetadataInstance.isCompound"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCompound"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(1, "CFMetadataInstance.allColumnFilter.isFetchAll == CommitLog.instance.segmentManager.allocatingFrom.headerWritten"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.headerWritten"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(2, "CFMetadataInstance.allColumnFilter.isFetchAll == CommitLog.instance.segmentManager.availableSegment.headerWritten"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.headerWritten"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(3, "CFMetadataInstance.allColumnFilter.isFetchAll == StorageService.instance.joinRing"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("StorageService.instance.joinRing"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(4, "CFMetadataInstance.allColumnFilter.isFetchAll == StorageService.instance.useStrictConsistency"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("StorageService.instance.useStrictConsistency"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(5, "CFMetadataInstance.allColumnFilter.isFetchAll == cfsInstance.compactionSpaceCheck"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.compactionSpaceCheck"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(6, "CFMetadataInstance.allColumnFilter.isFetchAll == cfsInstance.compactionStrategyManager.enabled"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.enabled"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(7, "CFMetadataInstance.allColumnFilter.isFetchAll == cfsInstance.compactionStrategyManager.partitionSSTablesByTokenRange"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.partitionSSTablesByTokenRange"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(8, "CFMetadataInstance.allColumnFilter.isFetchAll == cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_ENABLED"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_ENABLED"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(9, "CFMetadataInstance.allColumnFilter.isFetchAll == cfsInstance.compactionStrategyManager.schemaCompactionParams.isEnabled"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.isEnabled"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(10, "CFMetadataInstance.allColumnFilter.isFetchAll == cfsInstance.compactionStrategyManager.shouldDefragment"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.shouldDefragment"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(11, "CFMetadataInstance.allColumnFilter.isFetchAll == cfsInstance.compactionStrategyManager.supportsEarlyOpen"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.supportsEarlyOpen"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(12, "CFMetadataInstance.allColumnFilter.isFetchAll == cfsInstance.data.loadsstables"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.data.loadsstables"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(13, "CFMetadataInstance.allColumnFilter.isFetchAll == cfsInstance.directories.metadata.isCompound"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.directories.metadata.isCompound"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(14, "CFMetadataInstance.allColumnFilter.isFetchAll == cfsInstance.keyspace.initialized"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.keyspace.initialized"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(15, "CFMetadataInstance.allColumnFilter.isFetchAll == cfsInstance.metadata.allColumnFilter.isFetchAll"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.metadata.allColumnFilter.isFetchAll"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(16, "CFMetadataInstance.allColumnFilter.isFetchAll == cfsInstance.metadata.isCompound"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.metadata.isCompound"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(17, "CFMetadataInstance.allColumnFilter.isFetchAll == cfsInstance.viewManager.baseTableMetadata.isCompound"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.viewManager.baseTableMetadata.isCompound"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(18, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK == cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MIN_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MIN_THRESHOLD"))).intValue());
			}
		});
		invariants999.add(new Invariant(19, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK == CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() == ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.serialVersionUID"))).intValue());
			}
		});
		invariants999.add(new Invariant(20, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK == CommitLog.instance.executor.syncComplete.SIGNALLED"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.SIGNALLED"))).intValue());
			}
		});
		invariants999.add(new Invariant(21, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK == CommitLog.instance.segmentManager.managerThreadWaitQueue.SIGNALLED"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.managerThreadWaitQueue.SIGNALLED"))).intValue());
			}
		});
		invariants999.add(new Invariant(22, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK == CommitLog.instance.segmentManager.segmentPrepared.SIGNALLED"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.segmentPrepared.SIGNALLED"))).intValue());
			}
		});
		invariants999.add(new Invariant(23, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK == StorageService.instance.threadCounter"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() == ((Number)(InvariantChecker.getValue("StorageService.instance.threadCounter"))).intValue());
			}
		});
		invariants999.add(new Invariant(24, "CFMetadataInstance.isCounter == CFMetadataInstance.isDense"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isDense"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(25, "CFMetadataInstance.isCounter == CFMetadataInstance.isIndex"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isIndex"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(26, "CFMetadataInstance.isCounter == CFMetadataInstance.isSuper"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isSuper"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(27, "CFMetadataInstance.isCounter == CFMetadataInstance.isView"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isView"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(28, "CFMetadataInstance.isCounter == CFMetadataInstance.partitioner.partitionOrdering.isByteOrderComparable"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CFMetadataInstance.partitioner.partitionOrdering.isByteOrderComparable"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(29, "CFMetadataInstance.isCounter == CommitLog.instance.executor.shutdown"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CommitLog.instance.executor.shutdown"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(30, "CFMetadataInstance.isCounter == CommitLog.instance.executor.syncRequested"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CommitLog.instance.executor.syncRequested"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(31, "CFMetadataInstance.isCounter == CommitLog.instance.segmentManager.shutdown"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CommitLog.instance.segmentManager.shutdown"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(32, "CFMetadataInstance.isCounter == StorageService.instance.allowSimultaneousMoves"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("StorageService.instance.allowSimultaneousMoves"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(33, "CFMetadataInstance.isCounter == StorageService.instance.authSetupCalled"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("StorageService.instance.authSetupCalled"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(34, "CFMetadataInstance.isCounter == StorageService.instance.authSetupComplete"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("StorageService.instance.authSetupComplete"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(35, "CFMetadataInstance.isCounter == StorageService.instance.gossipActive"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("StorageService.instance.gossipActive"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(36, "CFMetadataInstance.isCounter == StorageService.instance.initialized"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("StorageService.instance.initialized"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(37, "CFMetadataInstance.isCounter == StorageService.instance.isBootstrapMode"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("StorageService.instance.isBootstrapMode"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(38, "CFMetadataInstance.isCounter == StorageService.instance.isDecommissioning"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("StorageService.instance.isDecommissioning"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(39, "CFMetadataInstance.isCounter == StorageService.instance.isRebuilding"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("StorageService.instance.isRebuilding"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(40, "CFMetadataInstance.isCounter == StorageService.instance.isShutdown"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("StorageService.instance.isShutdown"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(41, "CFMetadataInstance.isCounter == StorageService.instance.isSurveyMode"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("StorageService.instance.isSurveyMode"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(42, "CFMetadataInstance.isCounter == StorageService.instance.joined"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("StorageService.instance.joined"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(43, "CFMetadataInstance.isCounter == StorageService.instance.replacing"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("StorageService.instance.replacing"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(44, "CFMetadataInstance.isCounter == cfsInstance.compactionStrategyManager.compactionLogger.enabled"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.compactionLogger.enabled"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(45, "CFMetadataInstance.isCounter == cfsInstance.compactionStrategyManager.currentBoundaries.isInvalid"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.isInvalid"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(46, "CFMetadataInstance.isCounter == cfsInstance.directories.metadata.isCounter"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.directories.metadata.isCounter"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(47, "CFMetadataInstance.isCounter == cfsInstance.directories.metadata.isDense"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.directories.metadata.isDense"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(48, "CFMetadataInstance.isCounter == cfsInstance.directories.metadata.isIndex"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.directories.metadata.isIndex"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(49, "CFMetadataInstance.isCounter == cfsInstance.directories.metadata.isSuper"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.directories.metadata.isSuper"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(50, "CFMetadataInstance.isCounter == cfsInstance.directories.metadata.isView"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.directories.metadata.isView"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(51, "CFMetadataInstance.isCounter == cfsInstance.diskBoundaryManager.diskBoundaries.isInvalid"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.isInvalid"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(52, "CFMetadataInstance.isCounter == cfsInstance.keyspace.TEST_FAIL_WRITES"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.keyspace.TEST_FAIL_WRITES"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(53, "CFMetadataInstance.isCounter == cfsInstance.keyspace.viewManager.enableCoordinatorBatchlog"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.keyspace.viewManager.enableCoordinatorBatchlog"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(54, "CFMetadataInstance.isCounter == cfsInstance.metadata.isCounter"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.metadata.isCounter"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(55, "CFMetadataInstance.isCounter == cfsInstance.metadata.isDense"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.metadata.isDense"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(56, "CFMetadataInstance.isCounter == cfsInstance.metadata.isIndex"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.metadata.isIndex"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(57, "CFMetadataInstance.isCounter == cfsInstance.metadata.isSuper"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.metadata.isSuper"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(58, "CFMetadataInstance.isCounter == cfsInstance.metadata.isView"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.metadata.isView"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(59, "CFMetadataInstance.isCounter == cfsInstance.metric.aliasFactory.isIndex"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.metric.aliasFactory.isIndex"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(60, "CFMetadataInstance.isCounter == cfsInstance.metric.factory.isIndex"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.metric.factory.isIndex"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(61, "CFMetadataInstance.isCounter == cfsInstance.readOrdering.current.isBlocking"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.readOrdering.current.isBlocking"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(62, "CFMetadataInstance.isCounter == cfsInstance.viewManager.baseTableMetadata.isCounter"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.viewManager.baseTableMetadata.isCounter"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(63, "CFMetadataInstance.isCounter == cfsInstance.viewManager.baseTableMetadata.isDense"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.viewManager.baseTableMetadata.isDense"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(64, "CFMetadataInstance.isCounter == cfsInstance.viewManager.baseTableMetadata.isIndex"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.viewManager.baseTableMetadata.isIndex"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(65, "CFMetadataInstance.isCounter == cfsInstance.viewManager.baseTableMetadata.isSuper"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.viewManager.baseTableMetadata.isSuper"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(66, "CFMetadataInstance.isCounter == cfsInstance.viewManager.baseTableMetadata.isView"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.viewManager.baseTableMetadata.isView"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(67, "CFMetadataInstance.partitionColumns.statics.complexIdx == CommitLog.instance.executor.syncComplete.NOT_SET"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue());
			}
		});
		invariants999.add(new Invariant(68, "CFMetadataInstance.partitionColumns.statics.complexIdx == CommitLog.instance.segmentManager.bufferPool.usedBuffers"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.usedBuffers"))).intValue());
			}
		});
		invariants999.add(new Invariant(69, "CFMetadataInstance.partitionColumns.statics.complexIdx == CommitLog.instance.segmentManager.managerThreadWaitQueue.NOT_SET"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.managerThreadWaitQueue.NOT_SET"))).intValue());
			}
		});
		invariants999.add(new Invariant(70, "CFMetadataInstance.partitionColumns.statics.complexIdx == CommitLog.instance.segmentManager.segmentPrepared.NOT_SET"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.segmentPrepared.NOT_SET"))).intValue());
			}
		});
		invariants999.add(new Invariant(71, "CFMetadataInstance.partitionColumns.statics.complexIdx == QueryProcessor.instance.lastMinuteEvictionsCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("QueryProcessor.instance.lastMinuteEvictionsCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(72, "CFMetadataInstance.partitionColumns.statics.complexIdx == QueryProcessor.instance.thriftLastMinuteEvictionsCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("QueryProcessor.instance.thriftLastMinuteEvictionsCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(73, "CFMetadataInstance.partitionColumns.statics.complexIdx == StorageService.instance.legacyProgressSupport.notificationSerialNumber"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("StorageService.instance.legacyProgressSupport.notificationSerialNumber"))).intValue());
			}
		});
		invariants999.add(new Invariant(74, "CFMetadataInstance.partitionColumns.statics.complexIdx == StorageService.instance.nextRepairCommand"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("StorageService.instance.nextRepairCommand"))).intValue());
			}
		});
		invariants999.add(new Invariant(75, "CFMetadataInstance.partitionColumns.statics.complexIdx == StorageService.instance.progressSupport.notificationSerialNumber"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("StorageService.instance.progressSupport.notificationSerialNumber"))).intValue());
			}
		});
		invariants999.add(new Invariant(76, "CFMetadataInstance.partitionColumns.statics.complexIdx == StorageService.instance.remainingCFs"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("StorageService.instance.remainingCFs"))).intValue());
			}
		});
		invariants999.add(new Invariant(77, "CFMetadataInstance.partitionColumns.statics.complexIdx == StorageService.instance.tokenMetadata.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.ringVersion"))).intValue());
			}
		});
		invariants999.add(new Invariant(78, "CFMetadataInstance.partitionColumns.statics.complexIdx == StorageService.instance.totalCFs"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("StorageService.instance.totalCFs"))).intValue());
			}
		});
		invariants999.add(new Invariant(79, "CFMetadataInstance.partitionColumns.statics.complexIdx == cfsInstance.compactionStrategyManager.compactionLogger.identifier"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.compactionLogger.identifier"))).intValue());
			}
		});
		invariants999.add(new Invariant(80, "CFMetadataInstance.partitionColumns.statics.complexIdx == cfsInstance.compactionStrategyManager.currentBoundaries.directoriesVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.directoriesVersion"))).intValue());
			}
		});
		invariants999.add(new Invariant(81, "CFMetadataInstance.partitionColumns.statics.complexIdx == cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants999.add(new Invariant(82, "CFMetadataInstance.partitionColumns.statics.complexIdx == cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue());
			}
		});
		invariants999.add(new Invariant(83, "CFMetadataInstance.partitionColumns.statics.complexIdx == cfsInstance.diskBoundaryManager.diskBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.ringVersion"))).intValue());
			}
		});
		invariants999.add(new Invariant(84, "CFMetadataInstance.partitionColumns.statics.complexIdx == cfsInstance.keyspace.TEST_FAIL_MV_LOCKS_COUNT"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.keyspace.TEST_FAIL_MV_LOCKS_COUNT"))).intValue());
			}
		});
		invariants999.add(new Invariant(85, "CFMetadataInstance.partitionColumns.statics.complexIdx == cfsInstance.keyspace.replicationStrategy.lastInvalidatedVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.keyspace.replicationStrategy.lastInvalidatedVersion"))).intValue());
			}
		});
		invariants999.add(new Invariant(86, "CFMetadataInstance.partitionColumns.statics.complexIdx == cfsInstance.readOrdering.current.running"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.running"))).intValue());
			}
		});
		invariants999.add(new Invariant(87, "CFMetadataInstance.partitionColumns.statics.complexIdx == daikon.Quant.size(QueryProcessor.instance.thriftPreparedStatements_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() == daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("QueryProcessor.instance.thriftPreparedStatements")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(88, "CFMetadataInstance.partitioner.HEAP_SIZE == StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() == ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(89, "CFMetadataInstance.partitioner.HEAP_SIZE == StorageService.instance.valueFactory.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() == ((Number)(InvariantChecker.getValue("StorageService.instance.valueFactory.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(90, "CFMetadataInstance.partitioner.HEAP_SIZE == cfsInstance.metadata.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.metadata.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(91, "CFMetadataInstance.partitioner.MAXIMUM == StorageService.instance.tokenMetadata.partitioner.MAXIMUM"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() == ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.partitioner.MAXIMUM"))).intValue());
			}
		});
		invariants999.add(new Invariant(92, "CFMetadataInstance.partitioner.MAXIMUM == StorageService.instance.valueFactory.partitioner.MAXIMUM"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() == ((Number)(InvariantChecker.getValue("StorageService.instance.valueFactory.partitioner.MAXIMUM"))).intValue());
			}
		});
		invariants999.add(new Invariant(93, "CFMetadataInstance.partitioner.MAXIMUM == cfsInstance.metadata.partitioner.MAXIMUM"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.metadata.partitioner.MAXIMUM"))).intValue());
			}
		});
		invariants999.add(new Invariant(94, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE == CommitLog.instance.configuration.encryptionContext.chunkLength"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.configuration.encryptionContext.chunkLength"))).intValue());
			}
		});
		invariants999.add(new Invariant(95, "CommitLog.instance.executor.markerIntervalNanos == CommitLog.instance.executor.syncIntervalNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncIntervalNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(96, "CommitLog.instance.executor.syncComplete.CANCELLED == CommitLog.instance.segmentManager.managerThreadWaitQueue.CANCELLED"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.CANCELLED"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.managerThreadWaitQueue.CANCELLED"))).intValue());
			}
		});
		invariants999.add(new Invariant(97, "CommitLog.instance.executor.syncComplete.CANCELLED == CommitLog.instance.segmentManager.segmentPrepared.CANCELLED"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.CANCELLED"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.segmentPrepared.CANCELLED"))).intValue());
			}
		});
		invariants999.add(new Invariant(98, "CommitLog.instance.executor.syncComplete.CANCELLED == cfsInstance.keyspace.writeOrder.FINISHED"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.CANCELLED"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.keyspace.writeOrder.FINISHED"))).intValue());
			}
		});
		invariants999.add(new Invariant(99, "CommitLog.instance.executor.syncComplete.CANCELLED == cfsInstance.readOrdering.FINISHED"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.CANCELLED"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.FINISHED"))).intValue());
			}
		});
		invariants999.add(new Invariant(100, "CommitLog.instance.executor.syncComplete.CANCELLED == daikon.Quant.size(QueryProcessor.instance.thriftPreparedStatements_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.CANCELLED"))).intValue() == daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("QueryProcessor.instance.thriftPreparedStatements")).toArray(new Object[0])))-1);
			}
		});
		invariants999.add(new Invariant(101, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE == CommitLog.instance.segmentManager.availableSegment.ENTRY_OVERHEAD_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.ENTRY_OVERHEAD_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(102, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE == CommitLog.instance.segmentManager.availableSegment.SYNC_MARKER_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.SYNC_MARKER_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(103, "CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer == CommitLog.instance.segmentManager.availableSegment.endOfBuffer"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.endOfBuffer"))).intValue());
			}
		});
		invariants999.add(new Invariant(104, "CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer == CommitLog.instance.segmentManager.bufferPool.bufferSize"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.bufferSize"))).intValue());
			}
		});
		invariants999.add(new Invariant(105, "CommitLog.instance.segmentManager.allocatingFrom.idBase == CommitLog.instance.segmentManager.availableSegment.idBase"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.idBase"))).intValue());
			}
		});
		invariants999.add(new Invariant(106, "CommitLog.instance.segmentManager.allocatingFrom.nextId == CommitLog.instance.segmentManager.availableSegment.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(107, "CommitLog.instance.segmentManager.allocatingFrom.replayLimitId == CommitLog.instance.segmentManager.availableSegment.replayLimitId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.replayLimitId"))).intValue());
			}
		});
		invariants999.add(new Invariant(108, "CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset == CommitLog.instance.segmentManager.availableSegment.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(109, "QueryProcessor.instance.thriftPreparedStatements_FOR_ENCLOSING_USE == resultSetInstance.rows_FOR_ENCLOSING_USE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return ((Set.class.cast(InvariantChecker.getValue("QueryProcessor.instance.thriftPreparedStatements")).toArray(new Object[0])) == (Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])));
			}
		});
		invariants999.add(new Invariant(110, "cfsInstance.compactionStrategyManager.isActive == cfsInstance.valid"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.isActive"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.valid"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(111, "CFMetadataInstance.allColumnFilter.isFetchAll == true"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == true);
			}
		});
		invariants999.add(new Invariant(112, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK == 2"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() == 2);
			}
		});
		invariants999.add(new Invariant(113, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK == 4"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() == 4);
			}
		});
		invariants999.add(new Invariant(114, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK == 1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() == 1);
			}
		});
		invariants999.add(new Invariant(115, "CFMetadataInstance.isCounter == false"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == false);
			}
		});
		invariants999.add(new Invariant(116, "CFMetadataInstance.partitionColumns.regulars.complexIdx == 0 || CFMetadataInstance.partitionColumns.regulars.complexIdx == 1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() == 0 || ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() == 1);
			}
		});
		invariants999.add(new Invariant(117, "CFMetadataInstance.partitioner.HEAP_SIZE == 24"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() == 24);
			}
		});
		invariants999.add(new Invariant(118, "CFMetadataInstance.partitioner.MAXIMUM == 9223372036854775807L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() == 9223372036854775807L);
			}
		});
		invariants999.add(new Invariant(119, "CFMetadataInstance.partitioner.MINIMUM.token == -9223372036854775808L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue() == -9223372036854775808L);
			}
		});
		invariants999.add(new Invariant(120, "CFMetadataInstance.resource.hash == -1493090401 || CFMetadataInstance.resource.hash == -1493090400"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == -1493090401 || ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == -1493090400);
			}
		});
		invariants999.add(new Invariant(121, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE == 65536"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() == 65536);
			}
		});
		invariants999.add(new Invariant(122, "CommitLog.instance.MAX_MUTATION_SIZE == 2621440"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() == 2621440);
			}
		});
		invariants999.add(new Invariant(123, "CommitLog.instance.archiver.restorePointInTime == 4510987932000L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue() == 4510987932000L);
			}
		});
		invariants999.add(new Invariant(124, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS == 100"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() == 100);
			}
		});
		invariants999.add(new Invariant(125, "CommitLog.instance.executor.markerIntervalNanos == 1000000"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() == 1000000);
			}
		});
		invariants999.add(new Invariant(126, "CommitLog.instance.executor.pending == 0 || CommitLog.instance.executor.pending == 1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() == 0 || ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() == 1);
			}
		});
		invariants999.add(new Invariant(127, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE == 12"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() == 12);
			}
		});
		invariants999.add(new Invariant(128, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE == 8"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() == 8);
			}
		});
		invariants999.add(new Invariant(129, "CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer == 5242880"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue() == 5242880);
			}
		});
		invariants999.add(new Invariant(130, "CommitLog.instance.segmentManager.allocatingFrom.fd == 177 || CommitLog.instance.segmentManager.allocatingFrom.fd == 181 || CommitLog.instance.segmentManager.allocatingFrom.fd == 215"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 177 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 181 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 215);
			}
		});
		invariants999.add(new Invariant(131, "CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224501L || CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224502L || CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224503L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224501L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224502L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224503L);
			}
		});
		invariants999.add(new Invariant(132, "CommitLog.instance.segmentManager.allocatingFrom.idBase == 1731353224472L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue() == 1731353224472L);
			}
		});
		invariants999.add(new Invariant(133, "CommitLog.instance.segmentManager.allocatingFrom.nextId == 31 || CommitLog.instance.segmentManager.allocatingFrom.nextId == 32 || CommitLog.instance.segmentManager.allocatingFrom.nextId == 33"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 31 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 32 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 33);
			}
		});
		invariants999.add(new Invariant(134, "CommitLog.instance.segmentManager.allocatingFrom.replayLimitId == 1731353224475L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue() == 1731353224475L);
			}
		});
		invariants999.add(new Invariant(135, "CommitLog.instance.segmentManager.availableSegment.allocatePosition == 28"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue() == 28);
			}
		});
		invariants999.add(new Invariant(136, "CommitLog.instance.segmentManager.availableSegment.fd == 177 || CommitLog.instance.segmentManager.availableSegment.fd == 181 || CommitLog.instance.segmentManager.availableSegment.fd == 215"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 177 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 181 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 215);
			}
		});
		invariants999.add(new Invariant(137, "CommitLog.instance.segmentManager.availableSegment.id == 1731353224502L || CommitLog.instance.segmentManager.availableSegment.id == 1731353224503L || CommitLog.instance.segmentManager.availableSegment.id == 1731353224504L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224502L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224503L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224504L);
			}
		});
		invariants999.add(new Invariant(138, "CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset == 20"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue() == 20);
			}
		});
		invariants999.add(new Invariant(139, "CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize == 3"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue() == 3);
			}
		});
		invariants999.add(new Invariant(140, "CommitLog.instance.segmentManager.size == 10485760 || CommitLog.instance.segmentManager.size == 15728640"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() == 10485760 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() == 15728640);
			}
		});
		invariants999.add(new Invariant(141, "QueryProcessor.instance.thriftPreparedStatements_FOR_ENCLOSING_USE != null"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return ((Set.class.cast(InvariantChecker.getValue("QueryProcessor.instance.thriftPreparedStatements")).toArray(new Object[0])) != null);
			}
		});
		invariants999.add(new Invariant(142, "StorageService.instance.RING_DELAY == 30000"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue() == 30000);
			}
		});
		invariants999.add(new Invariant(143, "daikon.Quant.fuzzy.eq(StorageService.instance.traceProbability, 0.0)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (daikon.Quant.fuzzy.eq(((Number)(InvariantChecker.getValue("StorageService.instance.traceProbability"))).doubleValue(), 0.0));
			}
		});
		invariants999.add(new Invariant(144, "cfsInstance.compactionStrategyManager.fanout == 10"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue() == 10);
			}
		});
		invariants999.add(new Invariant(145, "cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD == 32"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue() == 32);
			}
		});
		invariants999.add(new Invariant(146, "cfsInstance.fileIndexGenerator == 0 || cfsInstance.fileIndexGenerator == 1 || cfsInstance.fileIndexGenerator == 2"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() == 0 || ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() == 1 || ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() == 2);
			}
		});
		invariants999.add(new Invariant(147, "cfsInstance.indexManager.DEFAULT_PAGE_SIZE == 10000"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue() == 10000);
			}
		});
		invariants999.add(new Invariant(148, "cfsInstance.metadata.resource.hash == -1493090401 || cfsInstance.metadata.resource.hash == -1493090400"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == -1493090401 || ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == -1493090400);
			}
		});
		invariants999.add(new Invariant(149, "cfsInstance.sampleLatencyNanos == 2500000000L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue() == 2500000000L);
			}
		});
		invariants999.add(new Invariant(150, "resultSetInstance.metadata.columnCount >= 1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() >= 1);
			}
		});
		invariants999.add(new Invariant(151, "daikon.Quant.eltsNotEqual(resultSetInstance.rows_FOR_ENCLOSING_USE, null)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (daikon.Quant.eltsNotEqual((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])), null));
			}
		});
		invariants999.add(new Invariant(152, "daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) == 0 || daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) == 1 || daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) == 2"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) == 0 || daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) == 1 || daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) == 2);
			}
		});
		invariants999.add(new Invariant(153, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK > CFMetadataInstance.partitionColumns.regulars.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue());
			}
		});
		invariants999.add(new Invariant(154, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK > CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(155, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK < CommitLog.instance.executor.lastSyncedAt"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue());
			}
		});
		invariants999.add(new Invariant(156, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK > CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants999.add(new Invariant(157, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK < CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants999.add(new Invariant(158, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK < CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(159, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK < CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(160, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(161, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK < CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(162, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK < CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(163, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK < CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(164, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(165, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(166, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(167, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK >= cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() >= ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(168, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(169, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK != resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() != ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(170, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK >= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() >= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(171, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK > CFMetadataInstance.partitionColumns.regulars.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue());
			}
		});
		invariants999.add(new Invariant(172, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK > CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(173, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK < CommitLog.instance.executor.lastSyncedAt"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue());
			}
		});
		invariants999.add(new Invariant(174, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK > CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants999.add(new Invariant(175, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK < CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants999.add(new Invariant(176, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK < CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(177, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK < CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(178, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(179, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK < CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(180, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK < CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(181, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK < CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(182, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(183, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(184, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(185, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(186, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(187, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(188, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(189, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK >= CFMetadataInstance.partitionColumns.regulars.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() >= ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue());
			}
		});
		invariants999.add(new Invariant(190, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK > CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(191, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK < CommitLog.instance.executor.lastSyncedAt"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue());
			}
		});
		invariants999.add(new Invariant(192, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK >= CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() >= ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants999.add(new Invariant(193, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK < CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants999.add(new Invariant(194, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK < CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(195, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK < CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(196, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(197, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK < CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(198, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK < CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(199, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK < CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(200, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(201, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(202, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(203, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(204, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK <= resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() <= ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(205, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK >= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() >= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants999.add(new Invariant(206, "CFMetadataInstance.partitionColumns.regulars.complexIdx >= CFMetadataInstance.partitionColumns.statics.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() >= ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue());
			}
		});
		invariants999.add(new Invariant(207, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CFMetadataInstance.partitioner.HEAP_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(208, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CFMetadataInstance.partitioner.MAXIMUM"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue());
			}
		});
		invariants999.add(new Invariant(209, "CFMetadataInstance.partitionColumns.regulars.complexIdx > CFMetadataInstance.partitioner.MINIMUM.token"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue());
			}
		});
		invariants999.add(new Invariant(210, "CFMetadataInstance.partitionColumns.regulars.complexIdx > CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(211, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue());
			}
		});
		invariants999.add(new Invariant(212, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.MAX_MUTATION_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(213, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.archiver.restorePointInTime"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue());
			}
		});
		invariants999.add(new Invariant(214, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue());
			}
		});
		invariants999.add(new Invariant(215, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.executor.lastSyncedAt"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue());
			}
		});
		invariants999.add(new Invariant(216, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.executor.markerIntervalNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(217, "CFMetadataInstance.partitionColumns.regulars.complexIdx >= CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() >= ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants999.add(new Invariant(218, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants999.add(new Invariant(219, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(220, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(221, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(222, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue());
			}
		});
		invariants999.add(new Invariant(223, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(224, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(225, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.idBase"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue());
			}
		});
		invariants999.add(new Invariant(226, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(227, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(228, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(229, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue());
			}
		});
		invariants999.add(new Invariant(230, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.segmentManager.availableSegment.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(231, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(232, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(233, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(234, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue());
			}
		});
		invariants999.add(new Invariant(235, "CFMetadataInstance.partitionColumns.regulars.complexIdx < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(236, "CFMetadataInstance.partitionColumns.regulars.complexIdx < StorageService.instance.RING_DELAY"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue());
			}
		});
		invariants999.add(new Invariant(237, "CFMetadataInstance.partitionColumns.regulars.complexIdx < cfsInstance.compactionStrategyManager.fanout"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue());
			}
		});
		invariants999.add(new Invariant(238, "CFMetadataInstance.partitionColumns.regulars.complexIdx < cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants999.add(new Invariant(239, "CFMetadataInstance.partitionColumns.regulars.complexIdx <= cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() <= ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(240, "CFMetadataInstance.partitionColumns.regulars.complexIdx < cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(241, "CFMetadataInstance.partitionColumns.regulars.complexIdx > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(242, "CFMetadataInstance.partitionColumns.regulars.complexIdx <= cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() <= ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(243, "CFMetadataInstance.partitionColumns.regulars.complexIdx < cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(244, "CFMetadataInstance.partitionColumns.regulars.complexIdx <= resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() <= ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(245, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.executor.lastSyncedAt"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue());
			}
		});
		invariants999.add(new Invariant(246, "CFMetadataInstance.partitionColumns.statics.complexIdx <= CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() <= ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants999.add(new Invariant(247, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants999.add(new Invariant(248, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(249, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(250, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(251, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(252, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(253, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(254, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(255, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(256, "CFMetadataInstance.partitionColumns.statics.complexIdx < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(257, "CFMetadataInstance.partitionColumns.statics.complexIdx <= cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() <= ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(258, "CFMetadataInstance.partitionColumns.statics.complexIdx <= cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() <= ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(259, "CFMetadataInstance.partitionColumns.statics.complexIdx < resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() < ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(260, "CFMetadataInstance.partitionColumns.statics.complexIdx <= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue() <= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(261, "CFMetadataInstance.partitioner.HEAP_SIZE > CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(262, "CFMetadataInstance.partitioner.HEAP_SIZE < CommitLog.instance.executor.lastSyncedAt"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue());
			}
		});
		invariants999.add(new Invariant(263, "CFMetadataInstance.partitioner.HEAP_SIZE > CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants999.add(new Invariant(264, "CFMetadataInstance.partitioner.HEAP_SIZE < CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants999.add(new Invariant(265, "CFMetadataInstance.partitioner.HEAP_SIZE < CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(266, "CFMetadataInstance.partitioner.HEAP_SIZE < CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(267, "CFMetadataInstance.partitioner.HEAP_SIZE < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(268, "CFMetadataInstance.partitioner.HEAP_SIZE != CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(269, "CFMetadataInstance.partitioner.HEAP_SIZE != CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(270, "CFMetadataInstance.partitioner.HEAP_SIZE < CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(271, "CFMetadataInstance.partitioner.HEAP_SIZE < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(272, "CFMetadataInstance.partitioner.HEAP_SIZE < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(273, "CFMetadataInstance.partitioner.HEAP_SIZE < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(274, "CFMetadataInstance.partitioner.HEAP_SIZE > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(275, "CFMetadataInstance.partitioner.HEAP_SIZE > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(276, "CFMetadataInstance.partitioner.HEAP_SIZE > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(277, "CFMetadataInstance.partitioner.HEAP_SIZE > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(278, "CFMetadataInstance.partitioner.HEAP_SIZE > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(279, "CFMetadataInstance.partitioner.MAXIMUM > CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(280, "CFMetadataInstance.partitioner.MAXIMUM > CommitLog.instance.executor.lastSyncedAt"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue());
			}
		});
		invariants999.add(new Invariant(281, "CFMetadataInstance.partitioner.MAXIMUM > CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants999.add(new Invariant(282, "CFMetadataInstance.partitioner.MAXIMUM > CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants999.add(new Invariant(283, "CFMetadataInstance.partitioner.MAXIMUM > CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(284, "CFMetadataInstance.partitioner.MAXIMUM > CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(285, "CFMetadataInstance.partitioner.MAXIMUM > CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(286, "CFMetadataInstance.partitioner.MAXIMUM > CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(287, "CFMetadataInstance.partitioner.MAXIMUM > CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(288, "CFMetadataInstance.partitioner.MAXIMUM > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(289, "CFMetadataInstance.partitioner.MAXIMUM > CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(290, "CFMetadataInstance.partitioner.MAXIMUM > CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(291, "CFMetadataInstance.partitioner.MAXIMUM > CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(292, "CFMetadataInstance.partitioner.MAXIMUM > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(293, "CFMetadataInstance.partitioner.MAXIMUM > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(294, "CFMetadataInstance.partitioner.MAXIMUM > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(295, "CFMetadataInstance.partitioner.MAXIMUM > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(296, "CFMetadataInstance.partitioner.MAXIMUM > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MAXIMUM"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(297, "CFMetadataInstance.partitioner.MINIMUM.token < CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(298, "CFMetadataInstance.partitioner.MINIMUM.token < CommitLog.instance.executor.lastSyncedAt"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue());
			}
		});
		invariants999.add(new Invariant(299, "CFMetadataInstance.partitioner.MINIMUM.token < CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants999.add(new Invariant(300, "CFMetadataInstance.partitioner.MINIMUM.token < CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants999.add(new Invariant(301, "CFMetadataInstance.partitioner.MINIMUM.token < CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(302, "CFMetadataInstance.partitioner.MINIMUM.token < CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(303, "CFMetadataInstance.partitioner.MINIMUM.token < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(304, "CFMetadataInstance.partitioner.MINIMUM.token < CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(305, "CFMetadataInstance.partitioner.MINIMUM.token < CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(306, "CFMetadataInstance.partitioner.MINIMUM.token < CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(307, "CFMetadataInstance.partitioner.MINIMUM.token < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(308, "CFMetadataInstance.partitioner.MINIMUM.token < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(309, "CFMetadataInstance.partitioner.MINIMUM.token < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(310, "CFMetadataInstance.partitioner.MINIMUM.token < cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(311, "CFMetadataInstance.partitioner.MINIMUM.token < cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(312, "CFMetadataInstance.partitioner.MINIMUM.token < cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(313, "CFMetadataInstance.partitioner.MINIMUM.token < resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue() < ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(314, "CFMetadataInstance.partitioner.MINIMUM.token < daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.MINIMUM.token"))).intValue() < daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants999.add(new Invariant(315, "CFMetadataInstance.resource.hash < CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue());
			}
		});
		invariants999.add(new Invariant(316, "CFMetadataInstance.resource.hash < CommitLog.instance.MAX_MUTATION_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(317, "CFMetadataInstance.resource.hash < CommitLog.instance.archiver.restorePointInTime"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue());
			}
		});
		invariants999.add(new Invariant(318, "CFMetadataInstance.resource.hash < CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue());
			}
		});
		invariants999.add(new Invariant(319, "CFMetadataInstance.resource.hash < CommitLog.instance.executor.lastSyncedAt"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue());
			}
		});
		invariants999.add(new Invariant(320, "CFMetadataInstance.resource.hash < CommitLog.instance.executor.markerIntervalNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(321, "CFMetadataInstance.resource.hash < CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants999.add(new Invariant(322, "CFMetadataInstance.resource.hash < CommitLog.instance.executor.syncComplete.CANCELLED"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.CANCELLED"))).intValue());
			}
		});
		invariants999.add(new Invariant(323, "CFMetadataInstance.resource.hash < CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants999.add(new Invariant(324, "CFMetadataInstance.resource.hash < CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(325, "CFMetadataInstance.resource.hash < CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(326, "CFMetadataInstance.resource.hash < CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(327, "CFMetadataInstance.resource.hash < CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue());
			}
		});
		invariants999.add(new Invariant(328, "CFMetadataInstance.resource.hash < CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(329, "CFMetadataInstance.resource.hash < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(330, "CFMetadataInstance.resource.hash < CommitLog.instance.segmentManager.allocatingFrom.idBase"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue());
			}
		});
		invariants999.add(new Invariant(331, "CFMetadataInstance.resource.hash < CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(332, "CFMetadataInstance.resource.hash < CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(333, "CFMetadataInstance.resource.hash < CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(334, "CFMetadataInstance.resource.hash < CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue());
			}
		});
		invariants999.add(new Invariant(335, "CFMetadataInstance.resource.hash < CommitLog.instance.segmentManager.availableSegment.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(336, "CFMetadataInstance.resource.hash < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(337, "CFMetadataInstance.resource.hash < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(338, "CFMetadataInstance.resource.hash < CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(339, "CFMetadataInstance.resource.hash < CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue());
			}
		});
		invariants999.add(new Invariant(340, "CFMetadataInstance.resource.hash < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(341, "CFMetadataInstance.resource.hash < StorageService.instance.RING_DELAY"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue());
			}
		});
		invariants999.add(new Invariant(342, "CFMetadataInstance.resource.hash < cfsInstance.compactionStrategyManager.fanout"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue());
			}
		});
		invariants999.add(new Invariant(343, "CFMetadataInstance.resource.hash < cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants999.add(new Invariant(344, "CFMetadataInstance.resource.hash < cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(345, "CFMetadataInstance.resource.hash < cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(346, "CFMetadataInstance.resource.hash >= cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() >= ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(347, "CFMetadataInstance.resource.hash < cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(348, "CFMetadataInstance.resource.hash < cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(349, "CFMetadataInstance.resource.hash < resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(350, "CFMetadataInstance.resource.hash < daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() < daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants999.add(new Invariant(351, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE < CommitLog.instance.executor.lastSyncedAt"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue());
			}
		});
		invariants999.add(new Invariant(352, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE > CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants999.add(new Invariant(353, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE > CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants999.add(new Invariant(354, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE > CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(355, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE > CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(356, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(357, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE > CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(358, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE > CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(359, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(360, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE > CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(361, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(362, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(363, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(364, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(365, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(366, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(367, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(368, "CommitLog.instance.MAX_MUTATION_SIZE < CommitLog.instance.executor.lastSyncedAt"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue());
			}
		});
		invariants999.add(new Invariant(369, "CommitLog.instance.MAX_MUTATION_SIZE > CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants999.add(new Invariant(370, "CommitLog.instance.MAX_MUTATION_SIZE > CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants999.add(new Invariant(371, "CommitLog.instance.MAX_MUTATION_SIZE > CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(372, "CommitLog.instance.MAX_MUTATION_SIZE > CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(373, "CommitLog.instance.MAX_MUTATION_SIZE < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(374, "CommitLog.instance.MAX_MUTATION_SIZE > CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(375, "CommitLog.instance.MAX_MUTATION_SIZE > CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(376, "CommitLog.instance.MAX_MUTATION_SIZE > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(377, "CommitLog.instance.MAX_MUTATION_SIZE > CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(378, "CommitLog.instance.MAX_MUTATION_SIZE < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(379, "CommitLog.instance.MAX_MUTATION_SIZE < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(380, "CommitLog.instance.MAX_MUTATION_SIZE > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(381, "CommitLog.instance.MAX_MUTATION_SIZE > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(382, "CommitLog.instance.MAX_MUTATION_SIZE > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(383, "CommitLog.instance.MAX_MUTATION_SIZE > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(384, "CommitLog.instance.MAX_MUTATION_SIZE > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(385, "CommitLog.instance.archiver.restorePointInTime < CommitLog.instance.executor.lastSyncedAt"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue());
			}
		});
		invariants999.add(new Invariant(386, "CommitLog.instance.archiver.restorePointInTime > CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants999.add(new Invariant(387, "CommitLog.instance.archiver.restorePointInTime > CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants999.add(new Invariant(388, "CommitLog.instance.archiver.restorePointInTime > CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(389, "CommitLog.instance.archiver.restorePointInTime > CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(390, "CommitLog.instance.archiver.restorePointInTime > CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(391, "CommitLog.instance.archiver.restorePointInTime > CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(392, "CommitLog.instance.archiver.restorePointInTime > CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(393, "CommitLog.instance.archiver.restorePointInTime > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(394, "CommitLog.instance.archiver.restorePointInTime > CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(395, "CommitLog.instance.archiver.restorePointInTime > CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(396, "CommitLog.instance.archiver.restorePointInTime > CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(397, "CommitLog.instance.archiver.restorePointInTime > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(398, "CommitLog.instance.archiver.restorePointInTime > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(399, "CommitLog.instance.archiver.restorePointInTime > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(400, "CommitLog.instance.archiver.restorePointInTime % resultSetInstance.metadata.columnCount == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue() % ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() == 0);
			}
		});
		invariants999.add(new Invariant(401, "CommitLog.instance.archiver.restorePointInTime > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(402, "CommitLog.instance.archiver.restorePointInTime > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.archiver.restorePointInTime"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(403, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS < CommitLog.instance.executor.lastSyncedAt"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue());
			}
		});
		invariants999.add(new Invariant(404, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS > CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants999.add(new Invariant(405, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS < CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants999.add(new Invariant(406, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS != CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(407, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS < CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(408, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(409, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS != CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(410, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS != CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(411, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(412, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(413, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(414, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(415, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(416, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(417, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(418, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(419, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(420, "CommitLog.instance.executor.lastSyncedAt > CommitLog.instance.executor.markerIntervalNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(421, "CommitLog.instance.executor.lastSyncedAt > CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants999.add(new Invariant(422, "CommitLog.instance.executor.lastSyncedAt > CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants999.add(new Invariant(423, "CommitLog.instance.executor.lastSyncedAt > CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(424, "CommitLog.instance.executor.lastSyncedAt > CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(425, "CommitLog.instance.executor.lastSyncedAt > CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(426, "CommitLog.instance.executor.lastSyncedAt > CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue());
			}
		});
		invariants999.add(new Invariant(427, "CommitLog.instance.executor.lastSyncedAt > CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(428, "CommitLog.instance.executor.lastSyncedAt > CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(429, "CommitLog.instance.executor.lastSyncedAt > CommitLog.instance.segmentManager.allocatingFrom.idBase"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue());
			}
		});
		invariants999.add(new Invariant(430, "CommitLog.instance.executor.lastSyncedAt > CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(431, "CommitLog.instance.executor.lastSyncedAt > CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(432, "CommitLog.instance.executor.lastSyncedAt > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(433, "CommitLog.instance.executor.lastSyncedAt > CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue());
			}
		});
		invariants999.add(new Invariant(434, "CommitLog.instance.executor.lastSyncedAt > CommitLog.instance.segmentManager.availableSegment.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(435, "CommitLog.instance.executor.lastSyncedAt > CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(436, "CommitLog.instance.executor.lastSyncedAt > CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(437, "CommitLog.instance.executor.lastSyncedAt > CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(438, "CommitLog.instance.executor.lastSyncedAt > CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue());
			}
		});
		invariants999.add(new Invariant(439, "CommitLog.instance.executor.lastSyncedAt > CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(440, "CommitLog.instance.executor.lastSyncedAt > StorageService.instance.RING_DELAY"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue());
			}
		});
		invariants999.add(new Invariant(441, "CommitLog.instance.executor.lastSyncedAt > cfsInstance.compactionStrategyManager.fanout"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue());
			}
		});
		invariants999.add(new Invariant(442, "CommitLog.instance.executor.lastSyncedAt > cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants999.add(new Invariant(443, "CommitLog.instance.executor.lastSyncedAt > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(444, "CommitLog.instance.executor.lastSyncedAt > cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(445, "CommitLog.instance.executor.lastSyncedAt > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(446, "CommitLog.instance.executor.lastSyncedAt > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(447, "CommitLog.instance.executor.lastSyncedAt > cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(448, "CommitLog.instance.executor.lastSyncedAt > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(449, "CommitLog.instance.executor.lastSyncedAt > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(450, "CommitLog.instance.executor.markerIntervalNanos > CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants999.add(new Invariant(451, "CommitLog.instance.executor.markerIntervalNanos > CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants999.add(new Invariant(452, "CommitLog.instance.executor.markerIntervalNanos > CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(453, "CommitLog.instance.executor.markerIntervalNanos > CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(454, "CommitLog.instance.executor.markerIntervalNanos < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(455, "CommitLog.instance.executor.markerIntervalNanos > CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(456, "CommitLog.instance.executor.markerIntervalNanos > CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(457, "CommitLog.instance.executor.markerIntervalNanos > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(458, "CommitLog.instance.executor.markerIntervalNanos > CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(459, "CommitLog.instance.executor.markerIntervalNanos < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(460, "CommitLog.instance.executor.markerIntervalNanos < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(461, "CommitLog.instance.executor.markerIntervalNanos > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(462, "CommitLog.instance.executor.markerIntervalNanos > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(463, "CommitLog.instance.executor.markerIntervalNanos > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(464, "CommitLog.instance.executor.markerIntervalNanos > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(465, "CommitLog.instance.executor.markerIntervalNanos > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(466, "CommitLog.instance.executor.pending < CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants999.add(new Invariant(467, "CommitLog.instance.executor.pending < CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(468, "CommitLog.instance.executor.pending < CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(469, "CommitLog.instance.executor.pending < CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(470, "CommitLog.instance.executor.pending < CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue());
			}
		});
		invariants999.add(new Invariant(471, "CommitLog.instance.executor.pending < CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(472, "CommitLog.instance.executor.pending < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(473, "CommitLog.instance.executor.pending < CommitLog.instance.segmentManager.allocatingFrom.idBase"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue());
			}
		});
		invariants999.add(new Invariant(474, "CommitLog.instance.executor.pending < CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(475, "CommitLog.instance.executor.pending < CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(476, "CommitLog.instance.executor.pending < CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(477, "CommitLog.instance.executor.pending < CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue());
			}
		});
		invariants999.add(new Invariant(478, "CommitLog.instance.executor.pending < CommitLog.instance.segmentManager.availableSegment.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(479, "CommitLog.instance.executor.pending < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(480, "CommitLog.instance.executor.pending < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(481, "CommitLog.instance.executor.pending < CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(482, "CommitLog.instance.executor.pending < CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue());
			}
		});
		invariants999.add(new Invariant(483, "CommitLog.instance.executor.pending < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(484, "CommitLog.instance.executor.pending < StorageService.instance.RING_DELAY"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue());
			}
		});
		invariants999.add(new Invariant(485, "CommitLog.instance.executor.pending < cfsInstance.compactionStrategyManager.fanout"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue());
			}
		});
		invariants999.add(new Invariant(486, "CommitLog.instance.executor.pending < cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants999.add(new Invariant(487, "CommitLog.instance.executor.pending <= cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() <= ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(488, "CommitLog.instance.executor.pending < cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(489, "CommitLog.instance.executor.pending > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(490, "CommitLog.instance.executor.pending <= cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() <= ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(491, "CommitLog.instance.executor.pending < cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(492, "CommitLog.instance.executor.pending % resultSetInstance.metadata.columnCount == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() % ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() == 0);
			}
		});
		invariants999.add(new Invariant(493, "CommitLog.instance.executor.pending <= resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() <= ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(494, "CommitLog.instance.executor.syncComplete.CANCELLED > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.CANCELLED"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(495, "CommitLog.instance.executor.syncComplete.CANCELLED <= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.CANCELLED"))).intValue() <= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants999.add(new Invariant(496, "CommitLog.instance.executor.written > CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(497, "CommitLog.instance.executor.written > CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(498, "CommitLog.instance.executor.written != CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(499, "CommitLog.instance.executor.written < CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue());
			}
		});
		invariants999.add(new Invariant(500, "CommitLog.instance.executor.written > CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(501, "CommitLog.instance.executor.written < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(502, "CommitLog.instance.executor.written < CommitLog.instance.segmentManager.allocatingFrom.idBase"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue());
			}
		});
		invariants999.add(new Invariant(503, "CommitLog.instance.executor.written != CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(504, "CommitLog.instance.executor.written != CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(505, "CommitLog.instance.executor.written > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(506, "CommitLog.instance.executor.written < CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue());
			}
		});
		invariants999.add(new Invariant(507, "CommitLog.instance.executor.written > CommitLog.instance.segmentManager.availableSegment.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(508, "CommitLog.instance.executor.written > CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(509, "CommitLog.instance.executor.written < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(510, "CommitLog.instance.executor.written > CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(511, "CommitLog.instance.executor.written > CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue());
			}
		});
		invariants999.add(new Invariant(512, "CommitLog.instance.executor.written < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(513, "CommitLog.instance.executor.written < StorageService.instance.RING_DELAY"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue());
			}
		});
		invariants999.add(new Invariant(514, "CommitLog.instance.executor.written > cfsInstance.compactionStrategyManager.fanout"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue());
			}
		});
		invariants999.add(new Invariant(515, "CommitLog.instance.executor.written > cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants999.add(new Invariant(516, "CommitLog.instance.executor.written > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(517, "CommitLog.instance.executor.written < cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(518, "CommitLog.instance.executor.written > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(519, "CommitLog.instance.executor.written > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(520, "CommitLog.instance.executor.written < cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(521, "CommitLog.instance.executor.written > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(522, "CommitLog.instance.executor.written > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(523, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE < CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(524, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE < CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(525, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(526, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE < CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(527, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE < CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(528, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE < CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(529, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(530, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(531, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(532, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(533, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(534, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(535, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE != resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(536, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(537, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE < CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(538, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE < CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(539, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(540, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE < CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(541, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE < CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(542, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE < CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(543, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(544, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(545, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(546, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(547, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(548, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(549, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(550, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition < CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue());
			}
		});
		invariants999.add(new Invariant(551, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition != CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(552, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(553, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition < CommitLog.instance.segmentManager.allocatingFrom.idBase"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue());
			}
		});
		invariants999.add(new Invariant(554, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition - CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset - 8 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() - 8 == 0);
			}
		});
		invariants999.add(new Invariant(555, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition > CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(556, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition != CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(557, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition < CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue());
			}
		});
		invariants999.add(new Invariant(558, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition >= CommitLog.instance.segmentManager.availableSegment.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() >= ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(559, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition != CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(560, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(561, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition > CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(562, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition > CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue());
			}
		});
		invariants999.add(new Invariant(563, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(564, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition < StorageService.instance.RING_DELAY"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue());
			}
		});
		invariants999.add(new Invariant(565, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition > cfsInstance.compactionStrategyManager.fanout"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue());
			}
		});
		invariants999.add(new Invariant(566, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition != cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants999.add(new Invariant(567, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(568, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition < cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(569, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(570, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(571, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition < cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(572, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(573, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(574, "CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer > CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(575, "CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(576, "CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer > CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(577, "CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer > CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(578, "CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(579, "CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer > CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(580, "CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(581, "CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(582, "CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(583, "CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(584, "CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(585, "CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(586, "CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(587, "CommitLog.instance.segmentManager.allocatingFrom.fd < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(588, "CommitLog.instance.segmentManager.allocatingFrom.fd < CommitLog.instance.segmentManager.allocatingFrom.idBase"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue());
			}
		});
		invariants999.add(new Invariant(589, "CommitLog.instance.segmentManager.allocatingFrom.fd != CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(590, "CommitLog.instance.segmentManager.allocatingFrom.fd != CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(591, "CommitLog.instance.segmentManager.allocatingFrom.fd > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(592, "CommitLog.instance.segmentManager.allocatingFrom.fd < CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue());
			}
		});
		invariants999.add(new Invariant(593, "CommitLog.instance.segmentManager.allocatingFrom.fd > CommitLog.instance.segmentManager.availableSegment.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(594, "CommitLog.instance.segmentManager.allocatingFrom.fd != CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(595, "CommitLog.instance.segmentManager.allocatingFrom.fd < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(596, "CommitLog.instance.segmentManager.allocatingFrom.fd > CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(597, "CommitLog.instance.segmentManager.allocatingFrom.fd > CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue());
			}
		});
		invariants999.add(new Invariant(598, "CommitLog.instance.segmentManager.allocatingFrom.fd < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(599, "CommitLog.instance.segmentManager.allocatingFrom.fd < StorageService.instance.RING_DELAY"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue());
			}
		});
		invariants999.add(new Invariant(600, "CommitLog.instance.segmentManager.allocatingFrom.fd > cfsInstance.compactionStrategyManager.fanout"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue());
			}
		});
		invariants999.add(new Invariant(601, "CommitLog.instance.segmentManager.allocatingFrom.fd > cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants999.add(new Invariant(602, "CommitLog.instance.segmentManager.allocatingFrom.fd > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(603, "CommitLog.instance.segmentManager.allocatingFrom.fd < cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(604, "CommitLog.instance.segmentManager.allocatingFrom.fd > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(605, "CommitLog.instance.segmentManager.allocatingFrom.fd > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(606, "CommitLog.instance.segmentManager.allocatingFrom.fd < cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(607, "CommitLog.instance.segmentManager.allocatingFrom.fd > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(608, "CommitLog.instance.segmentManager.allocatingFrom.fd > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(609, "CommitLog.instance.segmentManager.allocatingFrom.id > CommitLog.instance.segmentManager.allocatingFrom.idBase"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue());
			}
		});
		invariants999.add(new Invariant(610, "CommitLog.instance.segmentManager.allocatingFrom.id > CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(611, "CommitLog.instance.segmentManager.allocatingFrom.id > CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(612, "CommitLog.instance.segmentManager.allocatingFrom.id > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(613, "CommitLog.instance.segmentManager.allocatingFrom.id > CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue());
			}
		});
		invariants999.add(new Invariant(614, "CommitLog.instance.segmentManager.allocatingFrom.id > CommitLog.instance.segmentManager.availableSegment.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(615, "CommitLog.instance.segmentManager.allocatingFrom.id > CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(616, "CommitLog.instance.segmentManager.allocatingFrom.id < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(617, "CommitLog.instance.segmentManager.allocatingFrom.id > CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(618, "CommitLog.instance.segmentManager.allocatingFrom.id > CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue());
			}
		});
		invariants999.add(new Invariant(619, "CommitLog.instance.segmentManager.allocatingFrom.id > CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(620, "CommitLog.instance.segmentManager.allocatingFrom.id > StorageService.instance.RING_DELAY"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue());
			}
		});
		invariants999.add(new Invariant(621, "CommitLog.instance.segmentManager.allocatingFrom.id > cfsInstance.compactionStrategyManager.fanout"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue());
			}
		});
		invariants999.add(new Invariant(622, "CommitLog.instance.segmentManager.allocatingFrom.id > cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants999.add(new Invariant(623, "CommitLog.instance.segmentManager.allocatingFrom.id > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(624, "CommitLog.instance.segmentManager.allocatingFrom.id > cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(625, "CommitLog.instance.segmentManager.allocatingFrom.id > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(626, "CommitLog.instance.segmentManager.allocatingFrom.id > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(627, "CommitLog.instance.segmentManager.allocatingFrom.id > cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(628, "CommitLog.instance.segmentManager.allocatingFrom.id > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(629, "CommitLog.instance.segmentManager.allocatingFrom.id > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(630, "CommitLog.instance.segmentManager.allocatingFrom.idBase > CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(631, "CommitLog.instance.segmentManager.allocatingFrom.idBase > CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(632, "CommitLog.instance.segmentManager.allocatingFrom.idBase > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(633, "CommitLog.instance.segmentManager.allocatingFrom.idBase > CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(634, "CommitLog.instance.segmentManager.allocatingFrom.idBase < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(635, "CommitLog.instance.segmentManager.allocatingFrom.idBase > CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(636, "CommitLog.instance.segmentManager.allocatingFrom.idBase > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(637, "CommitLog.instance.segmentManager.allocatingFrom.idBase > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(638, "CommitLog.instance.segmentManager.allocatingFrom.idBase > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(639, "CommitLog.instance.segmentManager.allocatingFrom.idBase > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(640, "CommitLog.instance.segmentManager.allocatingFrom.idBase > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.idBase"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(641, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset >= CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() >= ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(642, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset != CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(643, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset < CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue());
			}
		});
		invariants999.add(new Invariant(644, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset != CommitLog.instance.segmentManager.availableSegment.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(645, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset != CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(646, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(647, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset >= CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() >= ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(648, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset > CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue());
			}
		});
		invariants999.add(new Invariant(649, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(650, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset < StorageService.instance.RING_DELAY"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue());
			}
		});
		invariants999.add(new Invariant(651, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset > cfsInstance.compactionStrategyManager.fanout"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue());
			}
		});
		invariants999.add(new Invariant(652, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset != cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants999.add(new Invariant(653, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(654, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset < cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(655, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(656, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(657, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset < cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(658, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(659, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(660, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset != CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(661, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset < CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue());
			}
		});
		invariants999.add(new Invariant(662, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset != CommitLog.instance.segmentManager.availableSegment.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(663, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset != CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(664, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(665, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset >= CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() >= ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(666, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset > CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue());
			}
		});
		invariants999.add(new Invariant(667, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(668, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset < StorageService.instance.RING_DELAY"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue());
			}
		});
		invariants999.add(new Invariant(669, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset > cfsInstance.compactionStrategyManager.fanout"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue());
			}
		});
		invariants999.add(new Invariant(670, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset != cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants999.add(new Invariant(671, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(672, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset < cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(673, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(674, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(675, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset < cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(676, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(677, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(678, "CommitLog.instance.segmentManager.allocatingFrom.nextId < CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue());
			}
		});
		invariants999.add(new Invariant(679, "CommitLog.instance.segmentManager.allocatingFrom.nextId > CommitLog.instance.segmentManager.availableSegment.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(680, "CommitLog.instance.segmentManager.allocatingFrom.nextId < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(681, "CommitLog.instance.segmentManager.allocatingFrom.nextId < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(682, "CommitLog.instance.segmentManager.allocatingFrom.nextId > CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(683, "CommitLog.instance.segmentManager.allocatingFrom.nextId > CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue());
			}
		});
		invariants999.add(new Invariant(684, "CommitLog.instance.segmentManager.allocatingFrom.nextId < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(685, "CommitLog.instance.segmentManager.allocatingFrom.nextId < StorageService.instance.RING_DELAY"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue());
			}
		});
		invariants999.add(new Invariant(686, "CommitLog.instance.segmentManager.allocatingFrom.nextId > cfsInstance.compactionStrategyManager.fanout"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue());
			}
		});
		invariants999.add(new Invariant(687, "CommitLog.instance.segmentManager.allocatingFrom.nextId > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(688, "CommitLog.instance.segmentManager.allocatingFrom.nextId < cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(689, "CommitLog.instance.segmentManager.allocatingFrom.nextId > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(690, "CommitLog.instance.segmentManager.allocatingFrom.nextId > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(691, "CommitLog.instance.segmentManager.allocatingFrom.nextId < cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(692, "CommitLog.instance.segmentManager.allocatingFrom.nextId > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(693, "CommitLog.instance.segmentManager.allocatingFrom.nextId > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(694, "CommitLog.instance.segmentManager.allocatingFrom.replayLimitId > CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(695, "CommitLog.instance.segmentManager.allocatingFrom.replayLimitId < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(696, "CommitLog.instance.segmentManager.allocatingFrom.replayLimitId > CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(697, "CommitLog.instance.segmentManager.allocatingFrom.replayLimitId > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(698, "CommitLog.instance.segmentManager.allocatingFrom.replayLimitId > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(699, "CommitLog.instance.segmentManager.allocatingFrom.replayLimitId > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(700, "CommitLog.instance.segmentManager.allocatingFrom.replayLimitId > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(701, "CommitLog.instance.segmentManager.allocatingFrom.replayLimitId > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.replayLimitId"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(702, "CommitLog.instance.segmentManager.availableSegment.allocatePosition < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(703, "CommitLog.instance.segmentManager.availableSegment.allocatePosition < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(704, "CommitLog.instance.segmentManager.availableSegment.allocatePosition < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(705, "CommitLog.instance.segmentManager.availableSegment.allocatePosition > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(706, "CommitLog.instance.segmentManager.availableSegment.allocatePosition > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(707, "CommitLog.instance.segmentManager.availableSegment.allocatePosition > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(708, "CommitLog.instance.segmentManager.availableSegment.allocatePosition > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(709, "CommitLog.instance.segmentManager.availableSegment.allocatePosition > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(710, "CommitLog.instance.segmentManager.availableSegment.fd < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(711, "CommitLog.instance.segmentManager.availableSegment.fd > CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(712, "CommitLog.instance.segmentManager.availableSegment.fd > CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue());
			}
		});
		invariants999.add(new Invariant(713, "CommitLog.instance.segmentManager.availableSegment.fd < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(714, "CommitLog.instance.segmentManager.availableSegment.fd < StorageService.instance.RING_DELAY"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() < ((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue());
			}
		});
		invariants999.add(new Invariant(715, "CommitLog.instance.segmentManager.availableSegment.fd > cfsInstance.compactionStrategyManager.fanout"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue());
			}
		});
		invariants999.add(new Invariant(716, "CommitLog.instance.segmentManager.availableSegment.fd > cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants999.add(new Invariant(717, "CommitLog.instance.segmentManager.availableSegment.fd > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(718, "CommitLog.instance.segmentManager.availableSegment.fd < cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(719, "CommitLog.instance.segmentManager.availableSegment.fd > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(720, "CommitLog.instance.segmentManager.availableSegment.fd > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(721, "CommitLog.instance.segmentManager.availableSegment.fd < cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(722, "CommitLog.instance.segmentManager.availableSegment.fd > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(723, "CommitLog.instance.segmentManager.availableSegment.fd > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(724, "CommitLog.instance.segmentManager.availableSegment.id > CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(725, "CommitLog.instance.segmentManager.availableSegment.id > CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue());
			}
		});
		invariants999.add(new Invariant(726, "CommitLog.instance.segmentManager.availableSegment.id > CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(727, "CommitLog.instance.segmentManager.availableSegment.id > StorageService.instance.RING_DELAY"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() > ((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue());
			}
		});
		invariants999.add(new Invariant(728, "CommitLog.instance.segmentManager.availableSegment.id > cfsInstance.compactionStrategyManager.fanout"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue());
			}
		});
		invariants999.add(new Invariant(729, "CommitLog.instance.segmentManager.availableSegment.id > cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants999.add(new Invariant(730, "CommitLog.instance.segmentManager.availableSegment.id > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(731, "CommitLog.instance.segmentManager.availableSegment.id > cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(732, "CommitLog.instance.segmentManager.availableSegment.id > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(733, "CommitLog.instance.segmentManager.availableSegment.id > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(734, "CommitLog.instance.segmentManager.availableSegment.id > cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(735, "CommitLog.instance.segmentManager.availableSegment.id > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(736, "CommitLog.instance.segmentManager.availableSegment.id > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(737, "CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(738, "CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(739, "CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(740, "CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(741, "CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset >= resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue() >= ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(742, "CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(743, "CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(744, "CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(745, "CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(746, "CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize >= cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue() >= ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(747, "CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(748, "CommitLog.instance.segmentManager.size > StorageService.instance.RING_DELAY"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() > ((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue());
			}
		});
		invariants999.add(new Invariant(749, "CommitLog.instance.segmentManager.size > cfsInstance.compactionStrategyManager.fanout"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue());
			}
		});
		invariants999.add(new Invariant(750, "CommitLog.instance.segmentManager.size > cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants999.add(new Invariant(751, "CommitLog.instance.segmentManager.size > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(752, "CommitLog.instance.segmentManager.size > cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(753, "CommitLog.instance.segmentManager.size > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(754, "CommitLog.instance.segmentManager.size > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(755, "CommitLog.instance.segmentManager.size < cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(756, "CommitLog.instance.segmentManager.size > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(757, "CommitLog.instance.segmentManager.size > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(758, "daikon.Quant.subsetOf(QueryProcessor.instance.thriftPreparedStatements_FOR_ENCLOSING_USE, resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (daikon.Quant.subsetOf((Set.class.cast(InvariantChecker.getValue("QueryProcessor.instance.thriftPreparedStatements")).toArray(new Object[0])), (Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(759, "StorageService.instance.RING_DELAY > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(760, "StorageService.instance.RING_DELAY > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(761, "StorageService.instance.RING_DELAY > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(762, "StorageService.instance.RING_DELAY % resultSetInstance.metadata.columnCount == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue() % ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() == 0);
			}
		});
		invariants999.add(new Invariant(763, "StorageService.instance.RING_DELAY > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(764, "StorageService.instance.RING_DELAY > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(765, "cfsInstance.compactionStrategyManager.fanout > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(766, "cfsInstance.compactionStrategyManager.fanout > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(767, "cfsInstance.compactionStrategyManager.fanout > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(768, "cfsInstance.compactionStrategyManager.fanout != resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue() != ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(769, "cfsInstance.compactionStrategyManager.fanout > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(770, "cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD > cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(771, "cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(772, "cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(773, "cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(774, "cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(775, "cfsInstance.fileIndexGenerator < cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(776, "cfsInstance.fileIndexGenerator > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(777, "cfsInstance.fileIndexGenerator < cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(778, "cfsInstance.fileIndexGenerator >= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() >= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(779, "cfsInstance.indexManager.DEFAULT_PAGE_SIZE > cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(780, "cfsInstance.indexManager.DEFAULT_PAGE_SIZE > cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(781, "cfsInstance.indexManager.DEFAULT_PAGE_SIZE > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(782, "cfsInstance.indexManager.DEFAULT_PAGE_SIZE > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(783, "cfsInstance.metadata.resource.hash < cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(784, "cfsInstance.metadata.resource.hash < cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(785, "cfsInstance.metadata.resource.hash < resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() < ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(786, "cfsInstance.metadata.resource.hash < daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() < daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants999.add(new Invariant(787, "cfsInstance.readOrdering.current.id < cfsInstance.sampleLatencyNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(788, "cfsInstance.readOrdering.current.id >= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() >= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(789, "cfsInstance.sampleLatencyNanos > resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue() > ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(790, "cfsInstance.sampleLatencyNanos > daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.sampleLatencyNanos"))).intValue() > daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(791, "resultSetInstance.metadata.columnCount >= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() >= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(792, "10485760 * CFMetadataInstance.partitionColumns.regulars.complexIdx + 5242880 * CommitLog.instance.segmentManager.allocatingFrom.id - CommitLog.instance.segmentManager.size - 9.0772771936718029E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (10485760 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() + 5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 9.0772771936718029E18 == 0);
			}
		});
		invariants999.add(new Invariant(793, "CFMetadataInstance.partitionColumns.regulars.complexIdx + CommitLog.instance.segmentManager.allocatingFrom.nextId - cfsInstance.metadata.resource.hash - 1493090433 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 1493090433 == 0);
			}
		});
		invariants999.add(new Invariant(794, "10485760 * CFMetadataInstance.partitionColumns.regulars.complexIdx + 5242880 * CommitLog.instance.segmentManager.availableSegment.id - CommitLog.instance.segmentManager.size - 9.0772771936770458E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (10485760 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() + 5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 9.0772771936770458E18 == 0);
			}
		});
		invariants999.add(new Invariant(795, "CFMetadataInstance.resource.hash + CommitLog.instance.executor.pending + daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) + 1493090400 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) + 1493090400 == 0);
			}
		});
		invariants999.add(new Invariant(796, "10485760 * CFMetadataInstance.resource.hash - 5242880 * CommitLog.instance.segmentManager.allocatingFrom.id + CommitLog.instance.segmentManager.size + 9.0929333812645069E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (10485760 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 9.0929333812645069E18 == 0);
			}
		});
		invariants999.add(new Invariant(797, "10485760 * CFMetadataInstance.resource.hash - 5242880 * CommitLog.instance.segmentManager.allocatingFrom.nextId + CommitLog.instance.segmentManager.size + 1.565618775523328E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (10485760 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 1.565618775523328E16 == 0);
			}
		});
		invariants999.add(new Invariant(798, "CFMetadataInstance.resource.hash - CommitLog.instance.segmentManager.allocatingFrom.nextId + cfsInstance.metadata.resource.hash + 2.986180833E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 2.986180833E9 == 0);
			}
		});
		invariants999.add(new Invariant(799, "99614720 * CFMetadataInstance.resource.hash + 2621440 * CommitLog.instance.segmentManager.availableSegment.fd + 19 * CommitLog.instance.segmentManager.size + 1.4873378146746368E17 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (99614720 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() + 2621440 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() + 19 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 1.4873378146746368E17 == 0);
			}
		});
		invariants999.add(new Invariant(800, "10485760 * CFMetadataInstance.resource.hash - 5242880 * CommitLog.instance.segmentManager.availableSegment.id + CommitLog.instance.segmentManager.size + 9.0929333812697498E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (10485760 * ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() - 5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 9.0929333812697498E18 == 0);
			}
		});
		invariants999.add(new Invariant(801, "81 * CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.allocatingFrom.allocatePosition + CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset + 8 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (81 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() + 8 == 0);
			}
		});
		invariants999.add(new Invariant(802, "10485760 * CommitLog.instance.executor.pending + 5242880 * CommitLog.instance.segmentManager.allocatingFrom.id + CommitLog.instance.segmentManager.size - 9.0772771936927744E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (10485760 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + 5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 9.0772771936927744E18 == 0);
			}
		});
		invariants999.add(new Invariant(803, "CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.allocatingFrom.id + daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224502E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224502E12 == 0);
			}
		});
		invariants999.add(new Invariant(804, "81 * CommitLog.instance.executor.pending - CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset + CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (81 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() == 0);
			}
		});
		invariants999.add(new Invariant(805, "10485760 * CommitLog.instance.executor.pending + 5242880 * CommitLog.instance.segmentManager.availableSegment.id + CommitLog.instance.segmentManager.size - 9.0772771936980173E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (10485760 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + 5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 9.0772771936980173E18 == 0);
			}
		});
		invariants999.add(new Invariant(806, "CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.availableSegment.id + daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224503E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224503E12 == 0);
			}
		});
		invariants999.add(new Invariant(807, "CommitLog.instance.segmentManager.allocatingFrom.fd + 38 * cfsInstance.fileIndexGenerator + 76 * cfsInstance.metadata.resource.hash + 1.13474870185E11 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() + 38 * ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() + 76 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 1.13474870185E11 == 0);
			}
		});
		invariants999.add(new Invariant(808, "5242880 * CommitLog.instance.segmentManager.allocatingFrom.id - CommitLog.instance.segmentManager.size - 10485760 * cfsInstance.metadata.resource.hash - 9.0929333812645069E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 10485760 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 9.0929333812645069E18 == 0);
			}
		});
		invariants999.add(new Invariant(809, "CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.fileIndexGenerator - 3 * cfsInstance.metadata.resource.hash - 1.735832495702E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 3 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 1.735832495702E12 == 0);
			}
		});
		invariants999.add(new Invariant(810, "CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.readOrdering.current.id - daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224498E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224498E12 == 0);
			}
		});
		invariants999.add(new Invariant(811, "5242880 * CommitLog.instance.segmentManager.allocatingFrom.nextId - CommitLog.instance.segmentManager.size - 10485760 * cfsInstance.metadata.resource.hash - 1.565618775523328E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 10485760 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 1.565618775523328E16 == 0);
			}
		});
		invariants999.add(new Invariant(812, "CommitLog.instance.segmentManager.allocatingFrom.nextId - cfsInstance.fileIndexGenerator - 3 * cfsInstance.metadata.resource.hash - 4.479271232E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 3 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 4.479271232E9 == 0);
			}
		});
		invariants999.add(new Invariant(813, "2621440 * CommitLog.instance.segmentManager.availableSegment.fd + 19 * CommitLog.instance.segmentManager.size + 99614720 * cfsInstance.metadata.resource.hash + 1.4873378146746368E17 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2621440 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() + 19 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() + 99614720 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 1.4873378146746368E17 == 0);
			}
		});
		invariants999.add(new Invariant(814, "5242880 * CommitLog.instance.segmentManager.availableSegment.id - CommitLog.instance.segmentManager.size - 10485760 * cfsInstance.metadata.resource.hash - 9.0929333812697498E18 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (5242880 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 10485760 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 9.0929333812697498E18 == 0);
			}
		});
		invariants999.add(new Invariant(815, "CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.fileIndexGenerator - 3 * cfsInstance.metadata.resource.hash - 1.735832495703E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 3 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 1.735832495703E12 == 0);
			}
		});
		invariants999.add(new Invariant(816, "CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.readOrdering.current.id - daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224499E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224499E12 == 0);
			}
		});
		invariants999.add(new Invariant(817, "CFMetadataInstance.isCounter == CFMetadataInstance.keyValidator.isByteOrderComparable"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("CFMetadataInstance.keyValidator.isByteOrderComparable"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(818, "CFMetadataInstance.isCounter == cfsInstance.metadata.keyValidator.isByteOrderComparable"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.isCounter"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.metadata.keyValidator.isByteOrderComparable"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(819, "CFMetadataInstance.resource.hash == -1493090400 || CFMetadataInstance.resource.hash == -1493090399"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == -1493090400 || ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == -1493090399);
			}
		});
		invariants999.add(new Invariant(820, "CommitLog.instance.segmentManager.allocatingFrom.fd == 177 || CommitLog.instance.segmentManager.allocatingFrom.fd == 181 || CommitLog.instance.segmentManager.allocatingFrom.fd == 187"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 177 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 181 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 187);
			}
		});
		invariants999.add(new Invariant(821, "CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224503L || CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224504L || CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224505L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224503L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224504L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224505L);
			}
		});
		invariants999.add(new Invariant(822, "CommitLog.instance.segmentManager.allocatingFrom.nextId == 33 || CommitLog.instance.segmentManager.allocatingFrom.nextId == 34 || CommitLog.instance.segmentManager.allocatingFrom.nextId == 35"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 33 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 34 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 35);
			}
		});
		invariants999.add(new Invariant(823, "CommitLog.instance.segmentManager.availableSegment.fd == 181 || CommitLog.instance.segmentManager.availableSegment.fd == 187 || CommitLog.instance.segmentManager.availableSegment.fd == 252"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 181 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 187 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 252);
			}
		});
		invariants999.add(new Invariant(824, "CommitLog.instance.segmentManager.availableSegment.id == 1731353224504L || CommitLog.instance.segmentManager.availableSegment.id == 1731353224505L || CommitLog.instance.segmentManager.availableSegment.id == 1731353224506L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224504L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224505L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224506L);
			}
		});
		invariants999.add(new Invariant(825, "cfsInstance.metadata.resource.hash == -1493090400 || cfsInstance.metadata.resource.hash == -1493090399"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == -1493090400 || ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == -1493090399);
			}
		});
		invariants999.add(new Invariant(826, "cfsInstance.readOrdering.current.id == 0 || cfsInstance.readOrdering.current.id == 1 || cfsInstance.readOrdering.current.id == 3"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() == 0 || ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() == 1 || ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() == 3);
			}
		});
		invariants999.add(new Invariant(827, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK != cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(828, "CFMetadataInstance.partitionColumns.regulars.complexIdx >= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() >= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants999.add(new Invariant(829, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition > CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(830, "CommitLog.instance.segmentManager.allocatingFrom.fd < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(831, "CommitLog.instance.segmentManager.allocatingFrom.nextId > cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants999.add(new Invariant(832, "cfsInstance.fileIndexGenerator != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants999.add(new Invariant(833, "cfsInstance.readOrdering.current.id != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants999.add(new Invariant(834, "resultSetInstance.metadata.columnCount >= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() >= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants999.add(new Invariant(835, "CFMetadataInstance.partitionColumns.regulars.complexIdx - CommitLog.instance.segmentManager.allocatingFrom.nextId + cfsInstance.metadata.resource.hash + 1493090433 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() - ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() + 1493090433 == 0);
			}
		});
		invariants999.add(new Invariant(836, "CFMetadataInstance.resource.hash + CommitLog.instance.executor.pending + daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) + 1493090399 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) + 1493090399 == 0);
			}
		});
		invariants999.add(new Invariant(837, "3 * CommitLog.instance.executor.lastSyncedAt - 252498456 * CommitLog.instance.executor.written + 56159374 * resultSetInstance.metadata.columnCount - 2.68149641622346E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (3 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 252498456 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() + 56159374 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() - 2.68149641622346E14 == 0);
			}
		});
		invariants999.add(new Invariant(838, "957 * CommitLog.instance.executor.lastSyncedAt - 504996912 * CommitLog.instance.segmentManager.allocatingFrom.allocatePosition + 1.7914840306E10 * resultSetInstance.metadata.columnCount - 8.5630088210032672E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (957 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 504996912 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() + 1.7914840306E10 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() - 8.5630088210032672E16 == 0);
			}
		});
		invariants999.add(new Invariant(839, "957 * CommitLog.instance.executor.lastSyncedAt - 504996912 * CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset + 1.7914840306E10 * resultSetInstance.metadata.columnCount - 8.5630092250007968E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (957 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 504996912 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() + 1.7914840306E10 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() - 8.5630092250007968E16 == 0);
			}
		});
		invariants999.add(new Invariant(840, "957 * CommitLog.instance.executor.lastSyncedAt - 504996912 * CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset + 1.7914840306E10 * resultSetInstance.metadata.columnCount - 8.5630092250007968E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (957 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() - 504996912 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() + 1.7914840306E10 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() - 8.5630092250007968E16 == 0);
			}
		});
		invariants999.add(new Invariant(841, "3 * CommitLog.instance.executor.lastSyncedAt + 50700812 * resultSetInstance.metadata.columnCount + 504996912 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 2.6843394942524E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (3 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() + 50700812 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() + 504996912 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 2.6843394942524E14 == 0);
			}
		});
		invariants999.add(new Invariant(842, "3 * CommitLog.instance.executor.lastSyncedAt + 50700812 * resultSetInstance.metadata.columnCount + 504996912 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1 - 2.68433444428328E14 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (3 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() + 50700812 * ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue() + 504996912 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1 - 2.68433444428328E14 == 0);
			}
		});
		invariants999.add(new Invariant(843, "CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.fileIndexGenerator - 1.731353224502E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 1.731353224502E12 == 0);
			}
		});
		invariants999.add(new Invariant(844, "2 * CommitLog.instance.executor.pending - 2 * CommitLog.instance.segmentManager.allocatingFrom.id + cfsInstance.readOrdering.current.id + 3.462706449003E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() + 3.462706449003E12 == 0);
			}
		});
		invariants999.add(new Invariant(845, "CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.allocatingFrom.id + daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224504E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() + daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224504E12 == 0);
			}
		});
		invariants999.add(new Invariant(846, "CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.fileIndexGenerator - 1.731353224503E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 1.731353224503E12 == 0);
			}
		});
		invariants999.add(new Invariant(847, "2 * CommitLog.instance.executor.pending - 2 * CommitLog.instance.segmentManager.availableSegment.id + cfsInstance.readOrdering.current.id + 3.462706449005E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() - 2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() + 3.462706449005E12 == 0);
			}
		});
		invariants999.add(new Invariant(848, "CommitLog.instance.executor.pending + CommitLog.instance.segmentManager.availableSegment.id + daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224505E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() + ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() + daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224505E12 == 0);
			}
		});
		invariants999.add(new Invariant(849, "CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.fileIndexGenerator - 3 * cfsInstance.metadata.resource.hash - 1.735832495701E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 3 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 1.735832495701E12 == 0);
			}
		});
		invariants999.add(new Invariant(850, "CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.fileIndexGenerator - daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224501E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224501E12 == 0);
			}
		});
		invariants999.add(new Invariant(851, "2 * CommitLog.instance.segmentManager.allocatingFrom.id - cfsInstance.readOrdering.current.id - 2 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 3.462706449003E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - 2 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 3.462706449003E12 == 0);
			}
		});
		invariants999.add(new Invariant(852, "CommitLog.instance.segmentManager.allocatingFrom.nextId - cfsInstance.fileIndexGenerator - 3 * cfsInstance.metadata.resource.hash - 4.479271231E9 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 3 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 4.479271231E9 == 0);
			}
		});
		invariants999.add(new Invariant(853, "CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.fileIndexGenerator - 3 * cfsInstance.metadata.resource.hash - 1.735832495702E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 3 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 1.735832495702E12 == 0);
			}
		});
		invariants999.add(new Invariant(854, "CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.fileIndexGenerator - daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 1.731353224502E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 1.731353224502E12 == 0);
			}
		});
		invariants999.add(new Invariant(855, "2 * CommitLog.instance.segmentManager.availableSegment.id - cfsInstance.readOrdering.current.id - 2 * daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE) - 3.462706449005E12 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (2 * ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() - ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue() - 2 * daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))) - 3.462706449005E12 == 0);
			}
		});
		invariants999.add(new Invariant(856, "CommitLog.instance.segmentManager.size - 5242880 * cfsInstance.fileIndexGenerator - 10485760 * cfsInstance.metadata.resource.hash - 1.5656187592704E16 == 0"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue() - 5242880 * ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue() - 10485760 * ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() - 1.5656187592704E16 == 0);
			}
		});
		invariants999.add(new Invariant(857, "CFMetadataInstance.allColumnFilter.isFetchAll == cfsInstance.compactionStrategyManager.isActive"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.isActive"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(858, "CFMetadataInstance.allColumnFilter.isFetchAll == cfsInstance.valid"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Boolean)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.isFetchAll"))).booleanValue() == ((Boolean)(InvariantChecker.getValue("cfsInstance.valid"))).booleanValue());
			}
		});
		invariants999.add(new Invariant(859, "CFMetadataInstance.partitionColumns.regulars.complexIdx == CFMetadataInstance.partitionColumns.statics.complexIdx"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() == ((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.statics.complexIdx"))).intValue());
			}
		});
		invariants999.add(new Invariant(860, "CommitLog.instance.executor.syncComplete.NOT_SET == CommitLog.instance.segmentManager.bufferPool.usedBuffers"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.usedBuffers"))).intValue());
			}
		});
		invariants999.add(new Invariant(861, "CommitLog.instance.executor.syncComplete.NOT_SET == CommitLog.instance.segmentManager.managerThreadWaitQueue.NOT_SET"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.managerThreadWaitQueue.NOT_SET"))).intValue());
			}
		});
		invariants999.add(new Invariant(862, "CommitLog.instance.executor.syncComplete.NOT_SET == CommitLog.instance.segmentManager.segmentPrepared.NOT_SET"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.segmentPrepared.NOT_SET"))).intValue());
			}
		});
		invariants999.add(new Invariant(863, "CommitLog.instance.executor.syncComplete.NOT_SET == QueryProcessor.instance.lastMinuteEvictionsCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == ((Number)(InvariantChecker.getValue("QueryProcessor.instance.lastMinuteEvictionsCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(864, "CommitLog.instance.executor.syncComplete.NOT_SET == QueryProcessor.instance.thriftLastMinuteEvictionsCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == ((Number)(InvariantChecker.getValue("QueryProcessor.instance.thriftLastMinuteEvictionsCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(865, "CommitLog.instance.executor.syncComplete.NOT_SET == StorageService.instance.legacyProgressSupport.notificationSerialNumber"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == ((Number)(InvariantChecker.getValue("StorageService.instance.legacyProgressSupport.notificationSerialNumber"))).intValue());
			}
		});
		invariants999.add(new Invariant(866, "CommitLog.instance.executor.syncComplete.NOT_SET == StorageService.instance.nextRepairCommand"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == ((Number)(InvariantChecker.getValue("StorageService.instance.nextRepairCommand"))).intValue());
			}
		});
		invariants999.add(new Invariant(867, "CommitLog.instance.executor.syncComplete.NOT_SET == StorageService.instance.progressSupport.notificationSerialNumber"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == ((Number)(InvariantChecker.getValue("StorageService.instance.progressSupport.notificationSerialNumber"))).intValue());
			}
		});
		invariants999.add(new Invariant(868, "CommitLog.instance.executor.syncComplete.NOT_SET == StorageService.instance.remainingCFs"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == ((Number)(InvariantChecker.getValue("StorageService.instance.remainingCFs"))).intValue());
			}
		});
		invariants999.add(new Invariant(869, "CommitLog.instance.executor.syncComplete.NOT_SET == StorageService.instance.tokenMetadata.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == ((Number)(InvariantChecker.getValue("StorageService.instance.tokenMetadata.ringVersion"))).intValue());
			}
		});
		invariants999.add(new Invariant(870, "CommitLog.instance.executor.syncComplete.NOT_SET == StorageService.instance.totalCFs"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == ((Number)(InvariantChecker.getValue("StorageService.instance.totalCFs"))).intValue());
			}
		});
		invariants999.add(new Invariant(871, "CommitLog.instance.executor.syncComplete.NOT_SET == cfsInstance.compactionStrategyManager.compactionLogger.identifier"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.compactionLogger.identifier"))).intValue());
			}
		});
		invariants999.add(new Invariant(872, "CommitLog.instance.executor.syncComplete.NOT_SET == cfsInstance.compactionStrategyManager.currentBoundaries.directoriesVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.directoriesVersion"))).intValue());
			}
		});
		invariants999.add(new Invariant(873, "CommitLog.instance.executor.syncComplete.NOT_SET == cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.currentBoundaries.ringVersion"))).intValue());
			}
		});
		invariants999.add(new Invariant(874, "CommitLog.instance.executor.syncComplete.NOT_SET == cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.directoriesVersion"))).intValue());
			}
		});
		invariants999.add(new Invariant(875, "CommitLog.instance.executor.syncComplete.NOT_SET == cfsInstance.diskBoundaryManager.diskBoundaries.ringVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.diskBoundaryManager.diskBoundaries.ringVersion"))).intValue());
			}
		});
		invariants999.add(new Invariant(876, "CommitLog.instance.executor.syncComplete.NOT_SET == cfsInstance.fileIndexGenerator"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.fileIndexGenerator"))).intValue());
			}
		});
		invariants999.add(new Invariant(877, "CommitLog.instance.executor.syncComplete.NOT_SET == cfsInstance.keyspace.TEST_FAIL_MV_LOCKS_COUNT"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.keyspace.TEST_FAIL_MV_LOCKS_COUNT"))).intValue());
			}
		});
		invariants999.add(new Invariant(878, "CommitLog.instance.executor.syncComplete.NOT_SET == cfsInstance.keyspace.replicationStrategy.lastInvalidatedVersion"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.keyspace.replicationStrategy.lastInvalidatedVersion"))).intValue());
			}
		});
		invariants999.add(new Invariant(879, "CommitLog.instance.executor.syncComplete.NOT_SET == cfsInstance.readOrdering.current.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(880, "CommitLog.instance.executor.syncComplete.NOT_SET == cfsInstance.readOrdering.current.running"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == ((Number)(InvariantChecker.getValue("cfsInstance.readOrdering.current.running"))).intValue());
			}
		});
		invariants999.add(new Invariant(881, "CommitLog.instance.executor.syncComplete.NOT_SET == daikon.Quant.size(QueryProcessor.instance.thriftPreparedStatements_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() == daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("QueryProcessor.instance.thriftPreparedStatements")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(882, "CFMetadataInstance.resource.hash == -1145774585 || CFMetadataInstance.resource.hash == 2144393068"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == -1145774585 || ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() == 2144393068);
			}
		});
		invariants999.add(new Invariant(883, "CommitLog.instance.executor.pending == 0 || CommitLog.instance.executor.pending == 1 || CommitLog.instance.executor.pending == 2"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() == 0 || ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() == 1 || ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() == 2);
			}
		});
		invariants999.add(new Invariant(884, "CommitLog.instance.executor.written >= 1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() >= 1);
			}
		});
		invariants999.add(new Invariant(885, "CommitLog.instance.segmentManager.allocatingFrom.fd == 177 || CommitLog.instance.segmentManager.allocatingFrom.fd == 178"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 177 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() == 178);
			}
		});
		invariants999.add(new Invariant(886, "CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224476L || CommitLog.instance.segmentManager.allocatingFrom.id == 1731353224477L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224476L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue() == 1731353224477L);
			}
		});
		invariants999.add(new Invariant(887, "CommitLog.instance.segmentManager.allocatingFrom.nextId == 6 || CommitLog.instance.segmentManager.allocatingFrom.nextId == 7"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 6 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() == 7);
			}
		});
		invariants999.add(new Invariant(888, "CommitLog.instance.segmentManager.availableSegment.fd == 178 || CommitLog.instance.segmentManager.availableSegment.fd == 211"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 178 || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() == 211);
			}
		});
		invariants999.add(new Invariant(889, "CommitLog.instance.segmentManager.availableSegment.id == 1731353224477L || CommitLog.instance.segmentManager.availableSegment.id == 1731353224478L"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224477L || ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue() == 1731353224478L);
			}
		});
		invariants999.add(new Invariant(890, "cfsInstance.metadata.resource.hash == -1614813437 || cfsInstance.metadata.resource.hash == 152082639 || cfsInstance.metadata.resource.hash == 2144393068"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == -1614813437 || ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == 152082639 || ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue() == 2144393068);
			}
		});
		invariants999.add(new Invariant(891, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK != CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() != ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(892, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK >= CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() >= ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants999.add(new Invariant(893, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(894, "CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_QUERIED_MASK"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(895, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK != CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() != ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(896, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(897, "CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK >= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.HAS_SUB_SELECTIONS_MASK"))).intValue() >= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(898, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK != CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() != ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(899, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK <= CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() <= ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants999.add(new Invariant(900, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(901, "CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.allColumnFilter.serializer.IS_FETCH_ALL_MASK"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants999.add(new Invariant(902, "CFMetadataInstance.partitionColumns.regulars.complexIdx != CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() != ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(903, "CFMetadataInstance.partitionColumns.regulars.complexIdx >= CommitLog.instance.executor.syncComplete.NOT_SET"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() >= ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue());
			}
		});
		invariants999.add(new Invariant(904, "CFMetadataInstance.partitionColumns.regulars.complexIdx != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitionColumns.regulars.complexIdx"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(905, "CFMetadataInstance.partitioner.HEAP_SIZE != CFMetadataInstance.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(906, "CFMetadataInstance.partitioner.HEAP_SIZE > CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants999.add(new Invariant(907, "CFMetadataInstance.partitioner.HEAP_SIZE < CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(908, "CFMetadataInstance.partitioner.HEAP_SIZE > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(909, "CFMetadataInstance.partitioner.HEAP_SIZE != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.partitioner.HEAP_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(910, "CFMetadataInstance.resource.hash != CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue());
			}
		});
		invariants999.add(new Invariant(911, "CFMetadataInstance.resource.hash != CommitLog.instance.MAX_MUTATION_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(912, "CFMetadataInstance.resource.hash != CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue());
			}
		});
		invariants999.add(new Invariant(913, "CFMetadataInstance.resource.hash != CommitLog.instance.executor.markerIntervalNanos"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue());
			}
		});
		invariants999.add(new Invariant(914, "CFMetadataInstance.resource.hash != CommitLog.instance.executor.pending"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue());
			}
		});
		invariants999.add(new Invariant(915, "CFMetadataInstance.resource.hash != CommitLog.instance.executor.syncComplete.CANCELLED"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.CANCELLED"))).intValue());
			}
		});
		invariants999.add(new Invariant(916, "CFMetadataInstance.resource.hash != CommitLog.instance.executor.syncComplete.NOT_SET"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue());
			}
		});
		invariants999.add(new Invariant(917, "CFMetadataInstance.resource.hash != CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants999.add(new Invariant(918, "CFMetadataInstance.resource.hash != CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(919, "CFMetadataInstance.resource.hash != CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(920, "CFMetadataInstance.resource.hash != CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(921, "CFMetadataInstance.resource.hash != CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue());
			}
		});
		invariants999.add(new Invariant(922, "CFMetadataInstance.resource.hash != CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(923, "CFMetadataInstance.resource.hash != CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(924, "CFMetadataInstance.resource.hash != CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(925, "CFMetadataInstance.resource.hash != CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(926, "CFMetadataInstance.resource.hash != CommitLog.instance.segmentManager.availableSegment.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(927, "CFMetadataInstance.resource.hash != CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(928, "CFMetadataInstance.resource.hash != CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(929, "CFMetadataInstance.resource.hash != CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.bufferPool.maxBufferPoolSize"))).intValue());
			}
		});
		invariants999.add(new Invariant(930, "CFMetadataInstance.resource.hash != CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(931, "CFMetadataInstance.resource.hash != StorageService.instance.RING_DELAY"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("StorageService.instance.RING_DELAY"))).intValue());
			}
		});
		invariants999.add(new Invariant(932, "CFMetadataInstance.resource.hash != cfsInstance.compactionStrategyManager.fanout"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue());
			}
		});
		invariants999.add(new Invariant(933, "CFMetadataInstance.resource.hash != cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants999.add(new Invariant(934, "CFMetadataInstance.resource.hash != cfsInstance.indexManager.DEFAULT_PAGE_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.indexManager.DEFAULT_PAGE_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(935, "CFMetadataInstance.resource.hash != resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(936, "CFMetadataInstance.resource.hash != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(937, "CFMetadataInstance.resource.hash != daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.resource.hash"))).intValue() != daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants999.add(new Invariant(938, "CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CFMetadataInstance.serializers.latestVersionIndexSerializer.WIDTH_BASE"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(939, "CommitLog.instance.MAX_MUTATION_SIZE != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.MAX_MUTATION_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(940, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS > CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants999.add(new Invariant(941, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS < CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(942, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS < CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(943, "CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.DEFAULT_MARKER_INTERVAL_MILLIS"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(944, "CommitLog.instance.executor.lastSyncedAt > CommitLog.instance.executor.syncComplete.NOT_SET"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.lastSyncedAt"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue());
			}
		});
		invariants999.add(new Invariant(945, "CommitLog.instance.executor.markerIntervalNanos != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.markerIntervalNanos"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(946, "CommitLog.instance.executor.pending >= CommitLog.instance.executor.syncComplete.NOT_SET"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() >= ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue());
			}
		});
		invariants999.add(new Invariant(947, "CommitLog.instance.executor.pending != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(948, "CommitLog.instance.executor.pending < resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.pending"))).intValue() < ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(949, "CommitLog.instance.executor.syncComplete.CANCELLED != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.CANCELLED"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(950, "CommitLog.instance.executor.syncComplete.NOT_SET < CommitLog.instance.executor.written"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue());
			}
		});
		invariants999.add(new Invariant(951, "CommitLog.instance.executor.syncComplete.NOT_SET < CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(952, "CommitLog.instance.executor.syncComplete.NOT_SET < CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(953, "CommitLog.instance.executor.syncComplete.NOT_SET < CommitLog.instance.segmentManager.allocatingFrom.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(954, "CommitLog.instance.executor.syncComplete.NOT_SET < CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(955, "CommitLog.instance.executor.syncComplete.NOT_SET < CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(956, "CommitLog.instance.executor.syncComplete.NOT_SET < CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(957, "CommitLog.instance.executor.syncComplete.NOT_SET < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(958, "CommitLog.instance.executor.syncComplete.NOT_SET < CommitLog.instance.segmentManager.availableSegment.id"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.id"))).intValue());
			}
		});
		invariants999.add(new Invariant(959, "CommitLog.instance.executor.syncComplete.NOT_SET < CommitLog.instance.segmentManager.size"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.size"))).intValue());
			}
		});
		invariants999.add(new Invariant(960, "CommitLog.instance.executor.syncComplete.NOT_SET != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(961, "CommitLog.instance.executor.syncComplete.NOT_SET < resultSetInstance.metadata.columnCount"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() < ((Number)(InvariantChecker.getValue("resultSetInstance.metadata.columnCount"))).intValue());
			}
		});
		invariants999.add(new Invariant(962, "CommitLog.instance.executor.syncComplete.NOT_SET <= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.syncComplete.NOT_SET"))).intValue() <= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0]))));
			}
		});
		invariants999.add(new Invariant(963, "CommitLog.instance.executor.written != CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() != ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue());
			}
		});
		invariants999.add(new Invariant(964, "CommitLog.instance.executor.written < CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(965, "CommitLog.instance.executor.written < CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(966, "CommitLog.instance.executor.written < CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(967, "CommitLog.instance.executor.written < CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(968, "CommitLog.instance.executor.written < CommitLog.instance.segmentManager.availableSegment.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(969, "CommitLog.instance.executor.written < CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(970, "CommitLog.instance.executor.written < CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(971, "CommitLog.instance.executor.written < cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants999.add(new Invariant(972, "CommitLog.instance.executor.written != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(973, "CommitLog.instance.executor.written >= daikon.Quant.size(resultSetInstance.rows_FOR_ENCLOSING_USE)-1"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.executor.written"))).intValue() >= daikon.Quant.size((Set.class.cast(InvariantChecker.getValue("resultSetInstance.rows")).toArray(new Object[0])))-1);
			}
		});
		invariants999.add(new Invariant(974, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(975, "CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.ENTRY_OVERHEAD_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(976, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(977, "CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.SYNC_MARKER_SIZE"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(978, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition > CommitLog.instance.segmentManager.allocatingFrom.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(979, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(980, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition > CommitLog.instance.segmentManager.availableSegment.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(981, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition > CommitLog.instance.segmentManager.availableSegment.fd"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue());
			}
		});
		invariants999.add(new Invariant(982, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition > cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants999.add(new Invariant(983, "CommitLog.instance.segmentManager.allocatingFrom.allocatePosition != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.allocatePosition"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(984, "CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.endOfBuffer"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(985, "CommitLog.instance.segmentManager.allocatingFrom.fd != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.fd"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(986, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(987, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset > CommitLog.instance.segmentManager.availableSegment.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(988, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset > CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(989, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset > cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() > ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants999.add(new Invariant(990, "CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastMarkerOffset"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(991, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset > CommitLog.instance.segmentManager.allocatingFrom.nextId"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() > ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue());
			}
		});
		invariants999.add(new Invariant(992, "CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.lastSyncedOffset"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(993, "CommitLog.instance.segmentManager.allocatingFrom.nextId < CommitLog.instance.segmentManager.availableSegment.allocatePosition"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue());
			}
		});
		invariants999.add(new Invariant(994, "CommitLog.instance.segmentManager.allocatingFrom.nextId < CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() < ((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.lastMarkerOffset"))).intValue());
			}
		});
		invariants999.add(new Invariant(995, "CommitLog.instance.segmentManager.allocatingFrom.nextId < cfsInstance.compactionStrategyManager.fanout"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.fanout"))).intValue());
			}
		});
		invariants999.add(new Invariant(996, "CommitLog.instance.segmentManager.allocatingFrom.nextId < cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() < ((Number)(InvariantChecker.getValue("cfsInstance.compactionStrategyManager.schemaCompactionParams.DEFAULT_MAX_THRESHOLD"))).intValue());
			}
		});
		invariants999.add(new Invariant(997, "CommitLog.instance.segmentManager.allocatingFrom.nextId != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.allocatingFrom.nextId"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(998, "CommitLog.instance.segmentManager.availableSegment.allocatePosition != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.allocatePosition"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
		invariants999.add(new Invariant(999, "CommitLog.instance.segmentManager.availableSegment.fd != cfsInstance.metadata.resource.hash"){
			@SuppressWarnings("unchecked")
			public boolean check() {
				return (((Number)(InvariantChecker.getValue("CommitLog.instance.segmentManager.availableSegment.fd"))).intValue() != ((Number)(InvariantChecker.getValue("cfsInstance.metadata.resource.hash"))).intValue());
			}
		});
	}
	static {
installInv999();	}
}
